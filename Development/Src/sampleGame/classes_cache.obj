(lp0
(iUnrealScriptIDEData
ClassReference
p1
(dp2
S'_parent_class'
p3
(iUnrealScriptIDEData
ClassReference
p4
(dp5
S'_parent_class'
p6
NsS'_collector_reference'
p7
ccopy_reg
_reconstructor
p8
(cUnrealScriptIDEMain
UnrealScriptIDEMain
p9
c__builtin__
object
p10
Ntp11
Rp12
(dp13
S'_inbuilt_functions'
p14
(lp15
V### HiddenFunctions	-    Functions ###
p16
a(iUnrealScriptIDEData
Function
p17
(dp18
S'_description'
p19
S'/**\n * Creates a new vector with the given components.\n */\nnative function vector vect( float X, float Y, float Z );\n'
p20
sS'_file_name'
p21
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cHiddenFunctions.uc
p22
sS'_arguments'
p23
S'float X, float Y, float Z'
p24
sS'_return_type'
p25
S'vector'
p26
sS'_function_modifiers'
p27
S'native'
p28
sS'_function_name'
p29
S'vect'
p30
sS'_line_number'
p31
I15
sS'_b_is_function'
p32
I01
sba(iUnrealScriptIDEData
Function
p33
(dp34
g19
S'/**\n * Creates a new rotator with the given components.\n */\nnative function rotator rot( int Pitch, int Yaw, int Roll );\n'
p35
sg21
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cHiddenFunctions.uc
p36
sg23
S'int Pitch, int Yaw, int Roll'
p37
sg25
S'rotator'
p38
sg27
S'native'
p39
sg29
S'rot'
p40
sg31
I20
sg32
I01
sba(iUnrealScriptIDEData
Function
p41
(dp42
g19
S'/**\n * Creates a new Object of the given class.\n * For Actors, you must use the Spawn function!\n *\n * The actual syntax for the new operator is as follows: \n * \t\tObjectVar = new[(InOuter, InName, InFlags)] <class\'InClass\'>[(InTemplate)];\n * E.g:\n * \t\tNewObj = new class\'Engine.LightFunction\';\n * \t\tNewObj = new(None,\'NewLight\') class\'Engine.LightFunction\' (LightFunctionTemplate);\n *\n * @param\t\tInOuter\t\t\t(optional) the object to assign as the Outer for the newly created object.\n *                              If not specified, the object\'s Outer will be set to a special package which exists only while the game is running, called the "transient package".\n *\n * @param\t\tInName\t\t\t(optional) the name to give the new object.\n *                             \tIf not specified, the object will be given a unique name in the format ClassName_##, where ## is incremented each time an instance of this class is created.\n *\n * @param\t\tInFlags\t\t\t(optional, currently broken since object flags are now 64 bits) the object flags to use when creating the object. The valid values are:\n *                              (0x0000000100000000 - Supports editor undo/redo. (RF_Transactional), 0x0000000400000000 - Can be referenced by external files. (RF_Public), 0x0000400000000000 - Cannot be saved to disk. (RF_Transient), 0x0010000000000000 - Don\'t load object on the game client. (RF_NotForClient), 0x0020000000000000 - Don\'t load object on the game server. (RF_NotForServer), 0x0040000000000000 - Don\'t load object in the editor. (RF_NotForEdit), 0x0008000000000000 - Keep object around for editing even if unreferenced. (RF_Standalone))\n *\n * @param\t\tInClass\t\t\tthe class to create an instance of\n *\n * @param\t\tInTemplate\t\tthe object to use for initializing the new object\'s property values\n */\nnative final operator function Object new\n(\n   optional object   InOuter,\n   optional name     InName,\n   optional int      InFlags,\n   class    InClass,\n   object   InTemplate\n);\n'
p43
sg21
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cHiddenFunctions.uc
p44
sg23
S'optional object InOuter, optional name InName, optional int InFlags, class InClass, object InTemplate'
p45
sg25
S'Object'
p46
sg27
S'native final operator'
p47
sg29
S'new'
p48
sg31
I53
sg32
I01
sba(iUnrealScriptIDEData
Function
p49
(dp50
g19
S'/**\n * Returns the name of the given reference.\n *\n * @param\t\tMemberName\t\teither a variable or function name\n */\nnative final function name NameOf(String MemberName)\n'
p51
sg21
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cHiddenFunctions.uc
p52
sg23
S'String MemberName'
p53
sg25
S'name'
p54
sg27
S'native final'
p55
sg29
S'NameOf'
p56
sg31
I60
sg32
I01
sba(iUnrealScriptIDEData
Function
p57
(dp58
g19
S'/**\n * This returns the number of values declared for that enum. Similar to ArrayCount.\n *\n * @param\t\tref\t\t\tThe reference to the enumeration.\n */\nnative final function int EnumCount(ByteProperties ref);\n'
p59
sg21
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cHiddenFunctions.uc
p60
sg23
S'ByteProperties ref'
p61
sg25
S'int'
p62
sg27
S'native final'
p63
sg29
S'EnumCount'
p64
sg31
I67
sg32
I01
sba(iUnrealScriptIDEData
Function
p65
(dp66
g19
S"/**\n * The ArrayCount pseudo-function can be used to get the length of a static array.\n *\n * @param\t\tref\t\t\tThe static array reference could be as simple as the name of a static array variable in the same class or function\n *                   \t\tor a more complex expression, such as class'TeamAI'.default.OrderList.\n */\nnative final function int ArrayCount(StaticArrayReference ref);\n"
p67
sg21
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cHiddenFunctions.uc
p68
sg23
S'StaticArrayReference ref'
p69
sg25
S'int'
p70
sg27
S'native final'
p71
sg29
S'ArrayCount'
p72
sg31
I76
sg32
I01
sbasS'b_wanted_to_autocomplete'
p73
I00
sS'_functions'
p74
(lp75
sS'_classes'
p76
g0
sS'_inbuilt_variables'
p77
(lp78
V### HiddenFunctions	-    Variables ###
p79
asS'b_first_time'
p80
I00
sS'b_still_parsing_classes'
p81
I00
sS'_variables'
p82
(lp83
sS'completion_class'
p84
NsS'help_panel_line_number'
p85
I-1
sS'b_did_autocomplete'
p86
I00
sS'b_built_for_current_file'
p87
I01
sS'src_folder'
p88
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame
p89
sbsS'_b_was_parsed'
p90
I01
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p91
sg74
(lp92
(iUnrealScriptIDEData
Function
p93
(dp94
g19
S''
p95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p96
sg23
S'Vector WallHitNormal, Actor HitActor'
p97
sg25
S'bool'
p98
sg27
S'native final'
p99
sg29
S'PickWallAdjust'
p100
sg31
I659
sg32
I01
sba(iUnrealScriptIDEData
Function
p101
(dp102
g19
S"/** SetDesiredRotation function\n  * @param TargetDesiredRotation: DesiredRotation you want\n  * @param InLockDesiredRotation: I'd like to lock up DesiredRotation, please nobody else can touch it until I say it's done\n  * @param InUnlockWhenReached: When you lock, set this to TRUE if you want it to be auto Unlock when reached desired rotation\n  * @param InterpolationTime: Give interpolation time to get to the desired rotation - Ignore default RotationRate, but use this to get there\n  * @return TRUE if properly set, otherwise, return FALSE\n  **/\nnative final function bool SetDesiredRotation(Rotator TargetDesiredRotation, bool InLockDesiredRotation=FALSE, bool InUnlockWhenReached=FALSE, FLOAT InterpolationTime=-1.f, bool bResetRotationRate=TRUE);\n"
p103
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p104
sg23
S'Rotator TargetDesiredRotation, bool InLockDesiredRotation=FALSE, bool InUnlockWhenReached=FALSE, FLOAT InterpolationTime=-1.f, bool bResetRotationRate=TRUE'
p105
sg25
S'bool'
p106
sg27
S'native final'
p107
sg29
S'SetDesiredRotation'
p108
sg31
I669
sg32
I01
sba(iUnrealScriptIDEData
Function
p109
(dp110
g19
S'/** LockDesiredRotation function\n  * @param Lock: Lock or Unlock CurrentDesiredRotation\n  * @param InUnlockWhenReached: Unlock when reached desired rotation. This is only valid when Lock = true\n  */\nnative final function LockDesiredRotation(bool Lock, bool InUnlockWhenReached=false/** This is only valid if Lock=true **/);\n'
p111
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p112
sg23
S'bool Lock, bool InUnlockWhenReached=false/** This is only valid if Lock=true **/'
p113
sg25
g95
sg27
S'native final'
p114
sg29
S'LockDesiredRotation'
p115
sg31
I675
sg32
I01
sba(iUnrealScriptIDEData
Function
p116
(dp117
g19
S"/** ResetDesiredRotation function\n  * Clear RotationRate/Flag to go back to default behavior\n  * Unless it's locked.\n  */\nnative final function ResetDesiredRotation();\n"
p118
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p119
sg23
g95
sg25
g95
sg27
S'native final'
p120
sg29
S'ResetDesiredRotation'
p121
sg31
I680
sg32
I01
sba(iUnrealScriptIDEData
Function
p122
(dp123
g19
S'/** CheckDesiredRotation function\n* Check to see if DesiredRotation is met, and it need to be clear or not\n* This is called by physicsRotation to make sure it needs to be cleared\n*/\nnative final function CheckDesiredRotation();\n'
p124
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p125
sg23
g95
sg25
g95
sg27
S'native final'
p126
sg29
S'CheckDesiredRotation'
p127
sg31
I685
sg32
I01
sba(iUnrealScriptIDEData
Function
p128
(dp129
g19
S'/** IsDesiredRotationInUse()\n* See if DesiredRotation is used by somebody\n*/\nnative final function bool IsDesiredRotationInUse();\n'
p130
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p131
sg23
g95
sg25
S'bool'
p132
sg27
S'native final'
p133
sg29
S'IsDesiredRotationInUse'
p134
sg31
I689
sg32
I01
sba(iUnrealScriptIDEData
Function
p135
(dp136
g19
S'/** IsDesiredRotationLocked()\n* See if DesiredRotation is locked by somebody\n*/\nnative final function bool IsDesiredRotationLocked();\n'
p137
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p138
sg23
g95
sg25
S'bool'
p139
sg27
S'native final'
p140
sg29
S'IsDesiredRotationLocked'
p141
sg31
I693
sg32
I01
sba(iUnrealScriptIDEData
Function
p142
(dp143
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p144
sg23
S'SkeletalMeshComponent SkelComp'
p145
sg25
g95
sg27
S'simulated'
p146
sg29
S'PostInitAnimTree'
p147
sg31
I695
sg32
I00
sba(iUnrealScriptIDEData
Function
p148
(dp149
g19
S"/** Save off commonly used nodes so the tree doesn't need to be iterated over often */\nsimulated native event CacheAnimNodes();\n"
p150
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p151
sg23
g95
sg25
g95
sg27
S'simulated native'
p152
sg29
S'CacheAnimNodes'
p153
sg31
I708
sg32
I00
sba(iUnrealScriptIDEData
Function
p154
(dp155
g19
S'/** Remove references to the saved nodes */\nsimulated function ClearAnimNodes()\n'
p156
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p157
sg23
g95
sg25
g95
sg27
S'simulated'
p158
sg29
S'ClearAnimNodes'
p159
sg31
I711
sg32
I01
sba(iUnrealScriptIDEData
Function
p160
(dp161
g19
S'/** Update list of AnimSets for this Pawn */\nsimulated native final function UpdateAnimSetList();\n'
p162
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p163
sg23
g95
sg25
g95
sg27
S'simulated native final'
p164
sg29
S'UpdateAnimSetList'
p165
sg31
I717
sg32
I01
sba(iUnrealScriptIDEData
Function
p166
(dp167
g19
S'/** Build AnimSet list Script version, called by UpdateAnimSetList() */\nsimulated event BuildScriptAnimSetList();\n'
p168
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p169
sg23
g95
sg25
g95
sg27
S'simulated'
p170
sg29
S'BuildScriptAnimSetList'
p171
sg31
I719
sg32
I00
sba(iUnrealScriptIDEData
Function
p172
(dp173
g19
S'/**\n * Add a given list of anim sets on the top of the list (so they override the other ones\n * !! Only use within BuildScriptAnimSetList() !!\n */\nsimulated native final function AddAnimSets(const out array<AnimSet> CustomAnimSets);\n'
p174
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p175
sg23
S'const out array<AnimSet> CustomAnimSets'
p176
sg25
g95
sg27
S'simulated native final'
p177
sg29
S'AddAnimSets'
p178
sg31
I725
sg32
I01
sba(iUnrealScriptIDEData
Function
p179
(dp180
g19
S'/** Called after UpdateAnimSetList does its job */\nsimulated event AnimSetListUpdated();\n'
p181
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p182
sg23
g95
sg25
g95
sg27
S'simulated'
p183
sg29
S'AnimSetListUpdated'
p184
sg31
I728
sg32
I00
sba(iUnrealScriptIDEData
Function
p185
(dp186
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p187
sg23
g95
sg25
S'bool'
p188
sg27
S'simulated'
p189
sg29
S'RestoreAnimSetsToDefault'
p190
sg31
I730
sg32
I00
sba(iUnrealScriptIDEData
Function
p191
(dp192
g19
S'/** Called when we start an AnimControl track operating on this Actor. Supplied is the set of AnimSets we are going to want to play from. */\nsimulated event BeginAnimControl(InterpGroup InInterpGroup)\n'
p193
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p194
sg23
S'InterpGroup InInterpGroup'
p195
sg25
g95
sg27
S'simulated'
p196
sg29
S'BeginAnimControl'
p197
sg31
I739
sg32
I00
sba(iUnrealScriptIDEData
Function
p198
(dp199
g19
S'/** Start AnimControl. Add required AnimSets. */\nnative function MAT_BeginAnimControl(InterpGroup InInterpGroup);\n'
p200
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p201
sg23
S'InterpGroup InInterpGroup'
p202
sg25
g95
sg27
S'native'
p203
sg29
S'MAT_BeginAnimControl'
p204
sg31
I745
sg32
I01
sba(iUnrealScriptIDEData
Function
p205
(dp206
g19
S'/** Called when we are done with the AnimControl track. */\nsimulated event FinishAnimControl(InterpGroup InInterpGroup)\n'
p207
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p208
sg23
S'InterpGroup InInterpGroup'
p209
sg25
g95
sg27
S'simulated'
p210
sg29
S'FinishAnimControl'
p211
sg31
I748
sg32
I00
sba(iUnrealScriptIDEData
Function
p212
(dp213
g19
S'/** End AnimControl. Release required AnimSets */\nnative function MAT_FinishAnimControl(InterpGroup InInterpGroup);\n'
p214
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p215
sg23
S'InterpGroup InInterpGroup'
p216
sg25
g95
sg27
S'native'
p217
sg29
S'MAT_FinishAnimControl'
p218
sg31
I753
sg32
I01
sba(iUnrealScriptIDEData
Function
p219
(dp220
g19
S'/** Called each from while the Matinee action is running, with the desired sequence name and position we want to be at. */\nsimulated event SetAnimPosition(name SlotName, int ChannelIndex, name InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)\n'
p221
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p222
sg23
S'name SlotName, int ChannelIndex, name InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion'
p223
sg25
g95
sg27
S'simulated'
p224
sg29
S'SetAnimPosition'
p225
sg31
I756
sg32
I00
sba(iUnrealScriptIDEData
Function
p226
(dp227
g19
S'/** Update AnimTree from track info */\nnative function MAT_SetAnimPosition(name SlotName, int ChannelIndex, name InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);\n'
p228
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p229
sg23
S'name SlotName, int ChannelIndex, name InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion'
p230
sg25
g95
sg27
S'native'
p231
sg29
S'MAT_SetAnimPosition'
p232
sg31
I763
sg32
I01
sba(iUnrealScriptIDEData
Function
p233
(dp234
g19
S'/** Update AnimTree from track weights */\nnative function MAT_SetAnimWeights(Array<AnimSlotInfo> SlotInfos);\n'
p235
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p236
sg23
S'Array<AnimSlotInfo> SlotInfos'
p237
sg25
g95
sg27
S'native'
p238
sg29
S'MAT_SetAnimWeights'
p239
sg31
I766
sg32
I01
sba(iUnrealScriptIDEData
Function
p240
(dp241
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p242
sg23
S'name MorphNodeName, float MorphWeight'
p243
sg25
g95
sg27
S'native'
p244
sg29
S'MAT_SetMorphWeight'
p245
sg31
I768
sg32
I01
sba(iUnrealScriptIDEData
Function
p246
(dp247
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p248
sg23
S'name SkelControlName, float Scale'
p249
sg25
g95
sg27
S'native'
p250
sg29
S'MAT_SetSkelControlScale'
p251
sg31
I770
sg32
I01
sba(iUnrealScriptIDEData
Function
p252
(dp253
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p254
sg23
S'name SkelControlName, float ControlStrength'
p255
sg25
g95
sg27
S'native'
p256
sg29
S'MAT_SetSkelControlStrength'
p257
sg31
I772
sg32
I01
sba(iUnrealScriptIDEData
Function
p258
(dp259
g19
S'/** called when a SeqAct_Interp action starts interpolating this Actor via matinee\n * @note this function is called on clients for actors that are interpolated clientside via MatineeActor\n * @param InterpAction the SeqAct_Interp that is affecting the Actor\n */\nsimulated event InterpolationStarted(SeqAct_Interp InterpAction, InterpGroupInst GroupInst)\n'
p260
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p261
sg23
S'SeqAct_Interp InterpAction, InterpGroupInst GroupInst'
p262
sg25
g95
sg27
S'simulated'
p263
sg29
S'InterpolationStarted'
p264
sg31
I778
sg32
I00
sba(iUnrealScriptIDEData
Function
p265
(dp266
g19
S'/** called when a SeqAct_Interp action finished interpolating this Actor\n * @note this function is called on clients for actors that are interpolated clientside via MatineeActor\n * @param InterpAction the SeqAct_Interp that was affecting the Actor\n */\nsimulated event InterpolationFinished(SeqAct_Interp InterpAction)\n'
p267
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p268
sg23
S'SeqAct_Interp InterpAction'
p269
sg25
g95
sg27
S'simulated'
p270
sg29
S'InterpolationFinished'
p271
sg31
I788
sg32
I00
sba(iUnrealScriptIDEData
Function
p272
(dp273
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p274
sg23
g95
sg25
g95
sg27
S'simulated'
p275
sg29
S'BeginAIGroup'
p276
sg31
I793
sg32
I01
sba(iUnrealScriptIDEData
Function
p277
(dp278
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p279
sg23
g95
sg25
g95
sg27
S'simulated'
p280
sg29
S'FinishAIGroup'
p281
sg31
I794
sg32
I01
sba(iUnrealScriptIDEData
Function
p282
(dp283
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p284
sg23
S'vector StartLoc, rotator StartRot'
p285
sg25
g95
sg27
g95
sg29
S'MAT_BeginAIGroup'
p286
sg31
I796
sg32
I00
sba(iUnrealScriptIDEData
Function
p287
(dp288
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p289
sg23
g95
sg25
g95
sg27
g95
sg29
S'MAT_FinishAIGroup'
p290
sg31
I805
sg32
I00
sba(iUnrealScriptIDEData
Function
p291
(dp292
g19
S'/**\n * Play FaceFX animations on this Actor.\n * Returns TRUE if succeeded, if failed, a log warning will be issued.\n */\nsimulated event bool PlayActorFaceFXAnim(FaceFXAnimSet AnimSet, String GroupName, String SeqName, SoundCue SoundCueToPlay )\n'
p293
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p294
sg23
S'FaceFXAnimSet AnimSet, String GroupName, String SeqName, SoundCue SoundCueToPlay'
p295
sg25
S'bool'
p296
sg27
S'simulated'
p297
sg29
S'PlayActorFaceFXAnim'
p298
sg31
I814
sg32
I00
sba(iUnrealScriptIDEData
Function
p299
(dp300
g19
S'/** Stop any matinee FaceFX animations on this Actor. */\nevent StopActorFaceFXAnim()\n'
p301
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p302
sg23
g95
sg25
g95
sg27
g95
sg29
S'StopActorFaceFXAnim'
p303
sg31
I820
sg32
I00
sba(iUnrealScriptIDEData
Function
p304
(dp305
g19
S'/** Used to let FaceFX know what component to play dialogue audio on. */\nsimulated event AudioComponent GetFaceFXAudioComponent()\n'
p306
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p307
sg23
g95
sg25
S'AudioComponent'
p308
sg27
S'simulated'
p309
sg29
S'GetFaceFXAudioComponent'
p310
sg31
I826
sg32
I00
sba(iUnrealScriptIDEData
Function
p311
(dp312
g19
S'/**\n * Returns TRUE if Actor is playing a FaceFX anim.\n * Implement in sub-class.\n */\nsimulated function bool IsActorPlayingFaceFXAnim()\n'
p313
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p314
sg23
g95
sg25
S'bool'
p315
sg27
S'simulated'
p316
sg29
S'IsActorPlayingFaceFXAnim'
p317
sg31
I835
sg32
I01
sba(iUnrealScriptIDEData
Function
p318
(dp319
g19
S'/**\n* Returns FALSE??? if Actor can play facefx\n* Implement in sub-class.\n*/\nsimulated function bool CanActorPlayFaceFXAnim()\n'
p320
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p321
sg23
g95
sg25
S'bool'
p322
sg27
S'simulated'
p323
sg29
S'CanActorPlayFaceFXAnim'
p324
sg31
I844
sg32
I01
sba(iUnrealScriptIDEData
Function
p325
(dp326
g19
S'/** Function for handling the SeqAct_PlayFaceFXAnim Kismet action working on this Actor. */\nsimulated function OnPlayFaceFXAnim(SeqAct_PlayFaceFXAnim inAction)\n'
p327
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p328
sg23
S'SeqAct_PlayFaceFXAnim inAction'
p329
sg25
g95
sg27
S'simulated'
p330
sg29
S'OnPlayFaceFXAnim'
p331
sg31
I850
sg32
I01
sba(iUnrealScriptIDEData
Function
p332
(dp333
g19
S'/**\n * Called via delegate when FacialAudioComp is finished.\n */\nsimulated function FaceFXAudioFinished(AudioComponent AC)\n'
p334
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p335
sg23
S'AudioComponent AC'
p336
sg25
g95
sg27
S'simulated'
p337
sg29
S'FaceFXAudioFinished'
p338
sg31
I859
sg32
I01
sba(iUnrealScriptIDEData
Function
p339
(dp340
g19
S'/** Used by Matinee in-game to mount FaceFXAnimSets before playing animations. */\nevent FaceFXAsset GetActorFaceFXAsset()\n'
p341
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p342
sg23
g95
sg25
S'FaceFXAsset'
p343
sg27
g95
sg29
S'GetActorFaceFXAsset'
p344
sg31
I864
sg32
I00
sba(iUnrealScriptIDEData
Function
p345
(dp346
g19
S'/** Called each frame by Matinee to update the weight of a particular MorphNodeWeight. */\nevent SetMorphWeight(name MorphNodeName, float MorphWeight)\n'
p347
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p348
sg23
S'name MorphNodeName, float MorphWeight'
p349
sg25
g95
sg27
g95
sg29
S'SetMorphWeight'
p350
sg31
I877
sg32
I00
sba(iUnrealScriptIDEData
Function
p351
(dp352
g19
S'/** Called each frame by Matinee to update the scaling on a SkelControl. */\nevent SetSkelControlScale(name SkelControlName, float Scale)\n'
p353
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p354
sg23
S'name SkelControlName, float Scale'
p355
sg25
g95
sg27
g95
sg29
S'SetSkelControlScale'
p356
sg31
I883
sg32
I00
sba(iUnrealScriptIDEData
Function
p357
(dp358
g19
S'/** Check on various replicated data and act accordingly. */\nsimulated event ReplicatedEvent( name VarName )\n'
p359
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p360
sg23
S'name VarName'
p361
sg25
g95
sg27
S'simulated'
p362
sg29
S'ReplicatedEvent'
p363
sg31
I892
sg32
I00
sba(iUnrealScriptIDEData
Function
p364
(dp365
g19
S'/** Returns TRUE if Pawn is alive and doing well */\nfinal virtual simulated native function bool IsAliveAndWell() const;\n'
p366
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p367
sg23
g95
sg25
S'bool'
p368
sg27
S'final virtual simulated native'
p369
sg29
S'IsAliveAndWell'
p370
sg31
I950
sg32
I01
sba(iUnrealScriptIDEData
Function
p371
(dp372
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p373
sg23
S'Actor GoalActor, optional Vector Dest'
p374
sg25
S'Vector'
p375
sg27
S'final native virtual'
p376
sg29
S'AdjustDestination'
p377
sg31
I952
sg32
I01
sba(iUnrealScriptIDEData
Function
p378
(dp379
g19
S'/** Is the current anchor valid? */\nfinal native function bool ValidAnchor();\n'
p380
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p381
sg23
g95
sg25
S'bool'
p382
sg27
S'final native'
p383
sg29
S'ValidAnchor'
p384
sg31
I955
sg32
I01
sba(iUnrealScriptIDEData
Function
p385
(dp386
g19
S'/**\n * SuggestJumpVelocity()\n * returns true if succesful jump from start to destination is possible\n * returns a suggested initial falling velocity in JumpVelocity\n * Uses GroundSpeed and JumpZ as limits\n *\n * @param\tJumpVelocity        The vector to fill with the calculated jump velocity\n * @param   Destination         The destination location of the jump\n * @param   Start               The start location of the jump\n * @param   bRequireFallLanding If true, the jump calculated will have a velocity in the negative Z at the destination\n*/\nnative function bool SuggestJumpVelocity(out vector JumpVelocity, vector Destination, vector Start, optional bool bRequireFallLanding);\n'
p387
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p388
sg23
S'out vector JumpVelocity, vector Destination, vector Start, optional bool bRequireFallLanding'
p389
sg25
S'bool'
p390
sg27
S'native'
p391
sg29
S'SuggestJumpVelocity'
p392
sg31
I968
sg32
I01
sba(iUnrealScriptIDEData
Function
p393
(dp394
g19
S'/**\n *\tGetFallDuration\n *\treturns time before impact if pawn falls from current position with current velocity\n */\nnative function float GetFallDuration();\n'
p395
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p396
sg23
g95
sg25
S'float'
p397
sg27
S'native'
p398
sg29
S'GetFallDuration'
p399
sg31
I974
sg32
I01
sba(iUnrealScriptIDEData
Function
p400
(dp401
g19
S"/** returns if we are a valid enemy for PRI\n * checks things like whether we're alive, teammates, etc\n * works on clients and servers\n */\nnative function bool IsValidEnemyTargetFor(const PlayerReplicationInfo PRI, bool bNoPRIisEnemy);\n"
p402
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p403
sg23
S'const PlayerReplicationInfo PRI, bool bNoPRIisEnemy'
p404
sg25
S'bool'
p405
sg27
S'native'
p406
sg29
S'IsValidEnemyTargetFor'
p407
sg31
I980
sg32
I01
sba(iUnrealScriptIDEData
Function
p408
(dp409
g19
S'/**\n@RETURN true if pawn is invisible to AI\n*/\nnative function bool IsInvisible();\n'
p410
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p411
sg23
g95
sg25
S'bool'
p412
sg27
S'native'
p413
sg29
S'IsInvisible'
p414
sg31
I985
sg32
I01
sba(iUnrealScriptIDEData
Function
p415
(dp416
g19
S'/**\n * Set Pawn ViewPitch, so we can see where remote clients are looking.\n *\n * @param\tNewRemoteViewPitch\tPitch component to replicate to remote (non owned) clients.\n */\nnative final function SetRemoteViewPitch( int NewRemoteViewPitch );\n'
p417
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p418
sg23
S'int NewRemoteViewPitch'
p419
sg25
g95
sg27
S'native final'
p420
sg29
S'SetRemoteViewPitch'
p421
sg31
I992
sg32
I01
sba(iUnrealScriptIDEData
Function
p422
(dp423
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p424
sg23
S'NavigationPoint NewAnchor'
p425
sg25
g95
sg27
S'native'
p426
sg29
S'SetAnchor'
p427
sg31
I994
sg32
I01
sba(iUnrealScriptIDEData
Function
p428
(dp429
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p430
sg23
S'Actor TestActor, Vector TestLocation, bool bStartPoint, bool bOnlyCheckVisible, out float out_Dist'
p431
sg25
S'NavigationPoint'
p432
sg27
S'native'
p433
sg29
S'GetBestAnchor'
p434
sg31
I995
sg32
I01
sba(iUnrealScriptIDEData
Function
p435
(dp436
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p437
sg23
S'Actor Goal'
p438
sg25
S'bool'
p439
sg27
S'native'
p440
sg29
S'ReachedDestination'
p441
sg31
I996
sg32
I01
sba(iUnrealScriptIDEData
Function
p442
(dp443
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p444
sg23
S'Vector Point, Actor NewAnchor'
p445
sg25
S'bool'
p446
sg27
S'native'
p447
sg29
S'ReachedPoint'
p448
sg31
I997
sg32
I01
sba(iUnrealScriptIDEData
Function
p449
(dp450
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p451
sg23
g95
sg25
g95
sg27
S'native'
p452
sg29
S'ForceCrouch'
p453
sg31
I998
sg32
I01
sba(iUnrealScriptIDEData
Function
p454
(dp455
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p456
sg23
S'bool NewPush'
p457
sg25
g95
sg27
S'native'
p458
sg29
S'SetPushesRigidBodies'
p459
sg31
I999
sg32
I01
sba(iUnrealScriptIDEData
Function
p460
(dp461
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p462
sg23
g95
sg25
S'bool'
p463
sg27
S'native final virtual'
p464
sg29
S'ReachedDesiredRotation'
p465
sg31
I1000
sg32
I01
sba(iUnrealScriptIDEData
Function
p466
(dp467
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p468
sg23
S'out float CollisionRadius, out float CollisionHeight'
p469
sg25
g95
sg27
S'native'
p470
sg29
S'GetBoundingCylinder'
p471
sg31
I1002
sg32
I01
sba(iUnrealScriptIDEData
Function
p472
(dp473
g19
S"/**\n * Does the following:\n *\t- Assign the SkeletalMeshComponent 'Mesh' to the CollisionComponent\n *\t- Call InitArticulated on the SkeletalMeshComponent.\n *\t- Change the physics mode to PHYS_RigidBody\n */\nnative function bool InitRagdoll();\n"
p474
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p475
sg23
g95
sg25
S'bool'
p476
sg27
S'native'
p477
sg29
S'InitRagdoll'
p478
sg31
I1010
sg32
I01
sba(iUnrealScriptIDEData
Function
p479
(dp480
g19
S"/** the opposite of InitRagdoll(); resets CollisionComponent to the default,\n * sets physics to PHYS_Falling, and calls TermArticulated() on the SkeletalMeshComponent\n * @return true on success, false if there is no Mesh, the Mesh is not in ragdoll, or we're otherwise not able to terminate the physics\n */\nnative function bool TermRagdoll();\n"
p481
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p482
sg23
g95
sg25
S'bool'
p483
sg27
S'native'
p484
sg29
S'TermRagdoll'
p485
sg31
I1015
sg32
I01
sba(iUnrealScriptIDEData
Function
p486
(dp487
g19
S'/** Give pawn the chance to do something special moving between points */\nfunction bool SpecialMoveTo( NavigationPoint Start, NavigationPoint End, Actor Next );\n'
p488
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p489
sg23
S'NavigationPoint Start, NavigationPoint End, Actor Next'
p490
sg25
S'bool'
p491
sg27
g95
sg29
S'SpecialMoveTo'
p492
sg31
I1018
sg32
I01
sba(iUnrealScriptIDEData
Function
p493
(dp494
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p495
sg23
S'ENavMeshEdgeType EdgeType, INT Dir, Vector MoveStart, Vector MoveDest, optional Actor RelActor, optional int RelItem, optional NavigationHandle NavHandle'
p496
sg25
S'bool'
p497
sg27
g95
sg29
S'SpecialMoveThruEdge'
p498
sg31
I1019
sg32
I00
sba(iUnrealScriptIDEData
Function
p499
(dp500
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p501
sg23
g95
sg25
g95
sg27
S'simulated'
p502
sg29
S'SetBaseEyeheight'
p503
sg31
I1021
sg32
I01
sba(iUnrealScriptIDEData
Function
p504
(dp505
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p506
sg23
g95
sg25
g95
sg27
g95
sg29
S'PlayerChangedTeam'
p507
sg31
I1029
sg32
I01
sba(iUnrealScriptIDEData
Function
p508
(dp509
g19
S'/* Reset()\nreset actor to initial state - used when restarting level without reloading.\n*/\nfunction Reset()\n'
p510
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p511
sg23
g95
sg25
g95
sg27
g95
sg29
S'Reset'
p512
sg31
I1037
sg32
I01
sba(iUnrealScriptIDEData
Function
p513
(dp514
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p515
sg23
g95
sg25
S'bool'
p516
sg27
g95
sg29
S'StopFiring'
p517
sg31
I1048
sg32
I01
sba(iUnrealScriptIDEData
Function
p518
(dp519
g19
S'/**\n * Pawn starts firing!\n * Called from PlayerController::StartFiring\n * Network: Local Player\n *\n * @param\tFireModeNum\t\tfire mode number\n */\nsimulated function StartFire(byte FireModeNum)\n'
p520
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p521
sg23
S'byte FireModeNum'
p522
sg25
g95
sg27
S'simulated'
p523
sg29
S'StartFire'
p524
sg31
I1065
sg32
I01
sba(iUnrealScriptIDEData
Function
p525
(dp526
g19
S'/**\n * Pawn stops firing!\n * i.e. player releases fire button, this may not stop weapon firing right away. (for example press button once for a burst fire)\n * Network: Local Player\n *\n * @param\tFireModeNum\t\tfire mode number\n */\nsimulated function StopFire(byte FireModeNum)\n'
p527
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p528
sg23
S'byte FireModeNum'
p529
sg25
g95
sg27
S'simulated'
p530
sg29
S'StopFire'
p531
sg31
I1086
sg32
I01
sba(iUnrealScriptIDEData
Function
p532
(dp533
g19
S'/** Return FiringMode currently in use by weapon InWeapon */\nsimulated function byte GetWeaponFiringMode(Weapon InWeapon)\n'
p534
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p535
sg23
S'Weapon InWeapon'
p536
sg25
S'byte'
p537
sg27
S'simulated'
p538
sg29
S'GetWeaponFiringMode'
p539
sg31
I1101
sg32
I01
sba(iUnrealScriptIDEData
Function
p540
(dp541
g19
S'/**\n * Set firing mode replication for remote clients trigger update notification.\n * Network: LocalPlayer and Server\n */\nsimulated function SetFiringMode(Weapon InWeapon, byte InFiringMode)\n'
p542
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p543
sg23
S'Weapon InWeapon, byte InFiringMode'
p544
sg25
g95
sg27
S'simulated'
p545
sg29
S'SetFiringMode'
p546
sg31
I1110
sg32
I01
sba(iUnrealScriptIDEData
Function
p547
(dp548
g19
S'/**\n * Called when FiringMode has been updated.\n *\n * Network: ALL\n */\nsimulated function FiringModeUpdated(Weapon InWeapon, byte InFiringMode, bool bViaReplication)\n'
p549
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p550
sg23
S'Weapon InWeapon, byte InFiringMode, bool bViaReplication'
p551
sg25
g95
sg27
S'simulated'
p552
sg29
S'FiringModeUpdated'
p553
sg31
I1128
sg32
I01
sba(iUnrealScriptIDEData
Function
p554
(dp555
g19
S"/**\n * This function's responsibility is to signal clients that non-instant hit shot\n * has been fired. Call this on the server and local player.\n *\n * Network: Server and Local Player\n */\nsimulated function IncrementFlashCount(Weapon InWeapon, byte InFiringMode)\n"
p556
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p557
sg23
S'Weapon InWeapon, byte InFiringMode'
p558
sg25
g95
sg27
S'simulated'
p559
sg29
S'IncrementFlashCount'
p560
sg31
I1143
sg32
I01
sba(iUnrealScriptIDEData
Function
p561
(dp562
g19
S"/**\n * Called when FlashCount has been updated.\n * Trigger appropritate events based on FlashCount's value.\n * = 0 means Weapon Stopped firing\n * > 0 means Weapon just fired\n *\n * Network: ALL\n */\nsimulated function FlashCountUpdated(Weapon InWeapon, Byte InFlashCount, bool bViaReplication)\n"
p563
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p564
sg23
S'Weapon InWeapon, Byte InFlashCount, bool bViaReplication'
p565
sg25
g95
sg27
S'simulated'
p566
sg29
S'FlashCountUpdated'
p567
sg31
I1169
sg32
I01
sba(iUnrealScriptIDEData
Function
p568
(dp569
g19
S'/**\n * Clear flashCount variable. and call WeaponStoppedFiring event.\n * Call this on the server and local player.\n *\n * Network: Server or Local Player\n */\nsimulated function ClearFlashCount(Weapon InWeapon)\n'
p570
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p571
sg23
S'Weapon InWeapon'
p572
sg25
g95
sg27
S'simulated'
p573
sg29
S'ClearFlashCount'
p574
sg31
I1188
sg32
I01
sba(iUnrealScriptIDEData
Function
p575
(dp576
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p577
sg23
S'Weapon InWeapon, byte InFiringMode, vector NewLoc'
p578
sg25
g95
sg27
S'simulated'
p579
sg29
S'SetFlashLocation'
p580
sg31
I1208
sg32
I01
sba(iUnrealScriptIDEData
Function
p581
(dp582
g19
S'/**\n * Reset flash location variable. and call stop firing.\n * Network: Server only\n */\nfunction ClearFlashLocation(Weapon InWeapon)\n'
p583
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p584
sg23
S'Weapon InWeapon'
p585
sg25
g95
sg27
g95
sg29
S'ClearFlashLocation'
p586
sg31
I1239
sg32
I01
sba(iUnrealScriptIDEData
Function
p587
(dp588
g19
S"/**\n * Called when FlashLocation has been updated.\n * Trigger appropritate events based on FlashLocation's value.\n * == (0,0,0) means Weapon Stopped firing\n * != (0,0,0) means Weapon just fired\n *\n * Network: ALL\n */\nsimulated function FlashLocationUpdated(Weapon InWeapon, Vector InFlashLocation, bool bViaReplication)\n"
p589
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p590
sg23
S'Weapon InWeapon, Vector InFlashLocation, bool bViaReplication'
p591
sg25
g95
sg27
S'simulated'
p592
sg29
S'FlashLocationUpdated'
p593
sg31
I1257
sg32
I01
sba(iUnrealScriptIDEData
Function
p594
(dp595
g19
S"/**\n * Called when a pawn's weapon has fired and is responsibile for\n * delegating the creation of all of the different effects.\n *\n * bViaReplication denotes if this call in as the result of the\n * flashcount/flashlocation being replicated. It's used filter out\n * when to make the effects.\n *\n * Network: ALL\n */\nsimulated function WeaponFired(Weapon InWeapon, bool bViaReplication, optional vector HitLocation)\n"
p596
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p597
sg23
S'Weapon InWeapon, bool bViaReplication, optional vector HitLocation'
p598
sg25
g95
sg27
S'simulated'
p599
sg29
S'WeaponFired'
p600
sg31
I1280
sg32
I01
sba(iUnrealScriptIDEData
Function
p601
(dp602
g19
S"/**\n * Called when a pawn's weapon has stopped firing and is responsibile for\n * delegating the destruction of all of the different effects.\n *\n * bViaReplication denotes if this call in as the result of the\n * flashcount/flashlocation being replicated.\n *\n * Network: ALL\n */\nsimulated function WeaponStoppedFiring(Weapon InWeapon, bool bViaReplication)\n"
p603
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p604
sg23
S'Weapon InWeapon, bool bViaReplication'
p605
sg25
g95
sg27
S'simulated'
p606
sg29
S'WeaponStoppedFiring'
p607
sg31
I1302
sg32
I01
sba(iUnrealScriptIDEData
Function
p608
(dp609
g19
S'/**\nAI Interface for combat\n**/\nfunction bool BotFire(bool bFinished)\n'
p610
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p611
sg23
S'bool bFinished'
p612
sg25
S'bool'
p613
sg27
g95
sg29
S'BotFire'
p614
sg31
I1317
sg32
I01
sba(iUnrealScriptIDEData
Function
p615
(dp616
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p617
sg23
S'Actor Other'
p618
sg25
S'bool'
p619
sg27
g95
sg29
S'CanAttack'
p620
sg31
I1323
sg32
I01
sba(iUnrealScriptIDEData
Function
p621
(dp622
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p623
sg23
S'Actor Other'
p624
sg25
S'bool'
p625
sg27
g95
sg29
S'TooCloseToAttack'
p626
sg31
I1330
sg32
I01
sba(iUnrealScriptIDEData
Function
p627
(dp628
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p629
sg23
g95
sg25
S'bool'
p630
sg27
g95
sg29
S'FireOnRelease'
p631
sg31
I1335
sg32
I01
sba(iUnrealScriptIDEData
Function
p632
(dp633
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p634
sg23
g95
sg25
S'bool'
p635
sg27
g95
sg29
S'HasRangedAttack'
p636
sg31
I1343
sg32
I01
sba(iUnrealScriptIDEData
Function
p637
(dp638
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p639
sg23
g95
sg25
S'bool'
p640
sg27
g95
sg29
S'IsFiring'
p641
sg31
I1348
sg32
I01
sba(iUnrealScriptIDEData
Function
p642
(dp643
g19
S'/** returns whether we need to turn to fire at the specified location */\nfunction bool NeedToTurn(vector targ)\n'
p644
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p645
sg23
S'vector targ'
p646
sg25
S'bool'
p647
sg27
g95
sg29
S'NeedToTurn'
p648
sg31
I1357
sg32
I01
sba(iUnrealScriptIDEData
Function
p649
(dp650
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p651
sg23
g95
sg25
S'String'
p652
sg27
S'simulated'
p653
sg29
S'GetHumanReadableName'
p654
sg31
I1371
sg32
I01
sba(iUnrealScriptIDEData
Function
p655
(dp656
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p657
sg23
S'bool bOut, bool bSound'
p658
sg25
g95
sg27
g95
sg29
S'PlayTeleportEffect'
p659
sg31
I1378
sg32
I01
sba(iUnrealScriptIDEData
Function
p660
(dp661
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p662
sg23
g95
sg25
g95
sg27
S'simulated'
p663
sg29
S'NotifyTeamChanged'
p664
sg31
I1388
sg32
I01
sba(iUnrealScriptIDEData
Function
p665
(dp666
g19
S'/* PossessedBy()\n Pawn is possessed by Controller\n*/\nfunction PossessedBy(Controller C, bool bVehicleTransition)\n'
p667
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p668
sg23
S'Controller C, bool bVehicleTransition'
p669
sg25
g95
sg27
g95
sg29
S'PossessedBy'
p670
sg31
I1393
sg32
I01
sba(iUnrealScriptIDEData
Function
p671
(dp672
g19
S'/* UpdateControllerOnPossess()\nupdate controller - normally, just change its rotation to match pawn rotation\n*/\nfunction UpdateControllerOnPossess(bool bVehicleTransition)\n'
p673
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p674
sg23
S'bool bVehicleTransition'
p675
sg25
g95
sg27
g95
sg29
S'UpdateControllerOnPossess'
p676
sg31
I1438
sg32
I01
sba(iUnrealScriptIDEData
Function
p677
(dp678
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p679
sg23
g95
sg25
g95
sg27
g95
sg29
S'UnPossessed'
p680
sg31
I1448
sg32
I01
sba(iUnrealScriptIDEData
Function
p681
(dp682
g19
S'/**\n * returns default camera mode when viewing this pawn.\n * Mainly called when controller possesses this pawn.\n *\n * @param\tPlayerController requesting the default camera view\n * @return\tdefault camera view player should use when controlling this pawn.\n */\nsimulated function name GetDefaultCameraMode( PlayerController RequestedBy )\n'
p683
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p684
sg23
S'PlayerController RequestedBy'
p685
sg25
S'name'
p686
sg27
S'simulated'
p687
sg29
S'GetDefaultCameraMode'
p688
sg31
I1466
sg32
I01
sba(iUnrealScriptIDEData
Function
p689
(dp690
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p691
sg23
g95
sg25
g95
sg27
g95
sg29
S'DropToGround'
p692
sg31
I1474
sg32
I01
sba(iUnrealScriptIDEData
Function
p693
(dp694
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p695
sg23
g95
sg25
S'bool'
p696
sg27
g95
sg29
S'CanGrabLadder'
p697
sg31
I1486
sg32
I01
sba(iUnrealScriptIDEData
Function
p698
(dp699
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p700
sg23
g95
sg25
S'bool'
p701
sg27
g95
sg29
S'RecommendLongRangedAttack'
p702
sg31
I1494
sg32
I01
sba(iUnrealScriptIDEData
Function
p703
(dp704
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p705
sg23
g95
sg25
S'float'
p706
sg27
g95
sg29
S'RangedAttackTime'
p707
sg31
I1499
sg32
I01
sba(iUnrealScriptIDEData
Function
p708
(dp709
g19
S'/**\n * Called every frame from PlayerInput or PlayerController::MoveAutonomous()\n * Sets bIsWalking flag, which defines if the Pawn is walking or not (affects velocity)\n *\n * @param\tbNewIsWalking, new walking state.\n */\nevent SetWalking( bool bNewIsWalking )\n'
p710
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p711
sg23
S'bool bNewIsWalking'
p712
sg25
g95
sg27
g95
sg29
S'SetWalking'
p713
sg31
I1510
sg32
I00
sba(iUnrealScriptIDEData
Function
p714
(dp715
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p716
sg23
g95
sg25
S'bool'
p717
sg27
S'simulated'
p718
sg29
S'CanSplash'
p719
sg31
I1518
sg32
I01
sba(iUnrealScriptIDEData
Function
p720
(dp721
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p722
sg23
S'LadderVolume OldLadder'
p723
sg25
g95
sg27
g95
sg29
S'EndClimbLadder'
p724
sg31
I1530
sg32
I01
sba(iUnrealScriptIDEData
Function
p725
(dp726
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p727
sg23
S'LadderVolume L'
p728
sg25
g95
sg27
g95
sg29
S'ClimbLadder'
p729
sg31
I1538
sg32
I01
sba(iUnrealScriptIDEData
Function
p730
(dp731
g19
S'/**\n * list important Pawn variables on canvas.\t HUD will call DisplayDebug() on the current ViewTarget when\n * the ShowDebug exec is used\n *\n * @param\tHUD\t\t- HUD with canvas to draw on\n * @input\tout_YL\t\t- Height of the current font\n * @input\tout_YPos\t- Y position on Canvas. out_YPos += out_YL, gives position to draw text for next debug line.\n */\nsimulated function DisplayDebug(HUD HUD, out float out_YL, out float out_YPos)\n'
p732
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p733
sg23
S'HUD HUD, out float out_YL, out float out_YPos'
p734
sg25
g95
sg27
S'simulated'
p735
sg29
S'DisplayDebug'
p736
sg31
I1555
sg32
I01
sba(iUnrealScriptIDEData
Function
p737
(dp738
g19
S"/**\n * IsHumanControlled()\n * @param PawnController - optional parameter so you can pass a controller that is associated with this pawn but is not attached to it\n * @return - true if controlled by a real live human on the local machine.  On client, only local player's pawn returns true\n*/\nsimulated final native function bool IsHumanControlled(optional Controller PawnController);\n"
p739
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p740
sg23
S'optional Controller PawnController'
p741
sg25
S'bool'
p742
sg27
S'simulated final native'
p743
sg29
S'IsHumanControlled'
p744
sg31
I1683
sg32
I01
sba(iUnrealScriptIDEData
Function
p745
(dp746
g19
S'/**\n * @return - true if controlled by local (not network) player\n */\nsimulated native final function bool IsLocallyControlled();\n'
p747
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p748
sg23
g95
sg25
S'bool'
p749
sg27
S'simulated native final'
p750
sg29
S'IsLocallyControlled'
p751
sg31
I1688
sg32
I01
sba(iUnrealScriptIDEData
Function
p752
(dp753
g19
S"/** IsPlayerPawn()\nreturn true if controlled by a Player (AI or human) on local machine (any controller on server, localclient's pawn on client)\n*/\nsimulated native function bool IsPlayerPawn() const;\n"
p754
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p755
sg23
g95
sg25
S'bool'
p756
sg27
S'simulated native'
p757
sg29
S'IsPlayerPawn'
p758
sg31
I1693
sg32
I01
sba(iUnrealScriptIDEData
Function
p759
(dp760
g19
S'// return true if viewing this pawn in first person pov. useful for determining what and where to spawn effects\nsimulated function bool IsFirstPerson()\n'
p761
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p762
sg23
g95
sg25
S'bool'
p763
sg27
S'simulated'
p764
sg29
S'IsFirstPerson'
p765
sg31
I1696
sg32
I01
sba(iUnrealScriptIDEData
Function
p766
(dp767
g19
S"/**\n * Called from PlayerController UpdateRotation() -> ProcessViewRotation() to (pre)process player ViewRotation\n * adds delta rot (player input), applies any limits and post-processing\n * returns the final ViewRotation set on PlayerController\n *\n * @param\tDeltaTime, time since last frame\n * @param\tViewRotation, actual PlayerController view rotation\n * @input\tout_DeltaRot, delta rotation to be applied on ViewRotation. Represents player's input.\n * @return\tprocessed ViewRotation to be set on PlayerController.\n */\nsimulated function ProcessViewRotation( float DeltaTime, out rotator out_ViewRotation, out Rotator out_DeltaRot )\n"
p768
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p769
sg23
S'float DeltaTime, out rotator out_ViewRotation, out Rotator out_DeltaRot'
p770
sg25
g95
sg27
S'simulated'
p771
sg29
S'ProcessViewRotation'
p772
sg31
I1714
sg32
I01
sba(iUnrealScriptIDEData
Function
p773
(dp774
g19
S"/**\n * returns the point of view of the actor.\n * note that this doesn't mean the camera, but the 'eyes' of the actor.\n * For example, for a Pawn, this would define the eye height location,\n * and view rotation (which is different from the pawn rotation which has a zeroed pitch component).\n * A camera first person view will typically use this view point. Most traces (weapon, AI) will be done from this view point.\n *\n * @output\tout_Location, location of view point\n * @output\tout_Rotation, view rotation of actor.\n */\nsimulated event GetActorEyesViewPoint( out vector out_Location, out Rotator out_Rotation )\n"
p775
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p776
sg23
S'out vector out_Location, out Rotator out_Rotation'
p777
sg25
g95
sg27
S'simulated'
p778
sg29
S'GetActorEyesViewPoint'
p779
sg31
I1737
sg32
I00
sba(iUnrealScriptIDEData
Function
p780
(dp781
g19
S'/** @return the rotation the Pawn is looking\n */\nsimulated native event rotator GetViewRotation();\n'
p782
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p783
sg23
g95
sg25
S'rotator'
p784
sg27
S'simulated native'
p785
sg29
S'GetViewRotation'
p786
sg31
I1745
sg32
I00
sba(iUnrealScriptIDEData
Function
p787
(dp788
g19
S"/**\n * returns the Eye location of the Pawn.\n *\n * @return\tPawn's eye location\n */\nsimulated native event vector GetPawnViewLocation();\n"
p789
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p790
sg23
g95
sg25
S'vector'
p791
sg27
S'simulated native'
p792
sg29
S'GetPawnViewLocation'
p793
sg31
I1752
sg32
I00
sba(iUnrealScriptIDEData
Function
p794
(dp795
g19
S'/**\n * Return world location to start a weapon fire trace from.\n *\n * @return\tWorld location where to start weapon fire traces from\n */\nsimulated event Vector GetWeaponStartTraceLocation(optional Weapon CurrentWeapon)\n'
p796
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p797
sg23
S'optional Weapon CurrentWeapon'
p798
sg25
S'Vector'
p799
sg27
S'simulated'
p800
sg29
S'GetWeaponStartTraceLocation'
p801
sg31
I1759
sg32
I00
sba(iUnrealScriptIDEData
Function
p802
(dp803
g19
S'/**\n * returns base Aim Rotation without any adjustment (no aim error, no autolock, no adhesion.. just clean initial aim rotation!)\n *\n * @return\tbase Aim rotation.\n */\nsimulated singular event Rotator GetBaseAimRotation()\n'
p804
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p805
sg23
g95
sg25
S'Rotator'
p806
sg27
S'simulated singular'
p807
sg29
S'GetBaseAimRotation'
p808
sg31
I1782
sg32
I00
sba(iUnrealScriptIDEData
Function
p809
(dp810
g19
S'/** return true if player is viewing this Pawn in FreeCam */\nsimulated event bool InFreeCam()\n'
p811
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p812
sg23
g95
sg25
S'bool'
p813
sg27
S'simulated'
p814
sg29
S'InFreeCam'
p815
sg31
I1808
sg32
I00
sba(iUnrealScriptIDEData
Function
p816
(dp817
g19
S'/**\n * Adjusts weapon aiming direction.\n * Gives Pawn a chance to modify its aiming. For example aim error, auto aiming, adhesion, AI help...\n * Requested by weapon prior to firing.\n *\n * @param\tW, weapon about to fire\n * @param\tStartFireLoc, world location of weapon fire start trace, or projectile spawn loc.\n * @param\tBaseAimRot, original aiming rotation without any modifications.\n */\nsimulated function Rotator GetAdjustedAimFor( Weapon W, vector StartFireLoc )\n'
p818
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p819
sg23
S'Weapon W, vector StartFireLoc'
p820
sg25
S'Rotator'
p821
sg27
S'simulated'
p822
sg29
S'GetAdjustedAimFor'
p823
sg31
I1825
sg32
I01
sba(iUnrealScriptIDEData
Function
p824
(dp825
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p826
sg23
S'rotator NewRotation'
p827
sg25
g95
sg27
S'simulated'
p828
sg29
S'SetViewRotation'
p829
sg31
I1837
sg32
I01
sba(iUnrealScriptIDEData
Function
p830
(dp831
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p832
sg23
g95
sg25
S'bool'
p833
sg27
g95
sg29
S'InGodMode'
p834
sg31
I1849
sg32
I01
sba(iUnrealScriptIDEData
Function
p835
(dp836
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p837
sg23
S'Actor NewTarget'
p838
sg25
g95
sg27
g95
sg29
S'SetMoveTarget'
p839
sg31
I1854
sg32
I01
sba(iUnrealScriptIDEData
Function
p840
(dp841
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p842
sg23
S'actor Other'
p843
sg25
S'bool'
p844
sg27
g95
sg29
S'LineOfSightTo'
p845
sg31
I1860
sg32
I01
sba(iUnrealScriptIDEData
Function
p846
(dp847
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p848
sg23
S'Inventory Inv'
p849
sg25
g95
sg27
g95
sg29
S'HandlePickup'
p850
sg31
I1865
sg32
I01
sba(iUnrealScriptIDEData
Function
p851
(dp852
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p853
sg23
S'coerce string S, optional Name Type'
p854
sg25
g95
sg27
g95
sg29
S'ClientMessage'
p855
sg31
I1872
sg32
I00
sba(iUnrealScriptIDEData
Function
p856
(dp857
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p858
sg23
S'class<DamageType> dmgType'
p859
sg25
g95
sg27
S'simulated'
p860
sg29
S'FellOutOfWorld'
p861
sg31
I1878
sg32
I00
sba(iUnrealScriptIDEData
Function
p862
(dp863
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p864
sg23
g95
sg25
g95
sg27
S'simulated singular'
p865
sg29
S'OutsideWorldBounds'
p866
sg31
I1893
sg32
I00
sba(iUnrealScriptIDEData
Function
p867
(dp868
g19
S'/**\n * Makes sure a Pawn is not crouching, telling it to stand if necessary.\n */\nsimulated function UnCrouch()\n'
p869
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p870
sg23
g95
sg25
g95
sg27
S'simulated'
p871
sg29
S'UnCrouch'
p872
sg31
I1917
sg32
I01
sba(iUnrealScriptIDEData
Function
p873
(dp874
g19
S'/**\n * Controller is requesting that pawn crouches.\n * This is not guaranteed as it depends if crouching collision cylinder can fit when Pawn is located.\n *\n * @param\tbCrouch\t\ttrue if Pawn should crouch.\n */\nfunction ShouldCrouch( bool bCrouch )\n'
p875
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p876
sg23
S'bool bCrouch'
p877
sg25
g95
sg27
g95
sg29
S'ShouldCrouch'
p878
sg31
I1931
sg32
I01
sba(iUnrealScriptIDEData
Function
p879
(dp880
g19
S'/**\n * Event called from native code when Pawn stops crouching.\n * Called on non owned Pawns through bIsCrouched replication.\n * Network: ALL\n *\n * @param\tHeightAdjust\theight difference in unreal units between default collision height, and actual crouched cylinder height.\n */\nsimulated event EndCrouch( float HeightAdjust )\n'
p881
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p882
sg23
S'float HeightAdjust'
p883
sg25
g95
sg27
S'simulated'
p884
sg29
S'EndCrouch'
p885
sg31
I1943
sg32
I00
sba(iUnrealScriptIDEData
Function
p886
(dp887
g19
S'/**\n * Event called from native code when Pawn starts crouching.\n * Called on non owned Pawns through bIsCrouched replication.\n * Network: ALL\n *\n * @param\tHeightAdjust\theight difference in unreal units between default collision height, and actual crouched cylinder height.\n */\nsimulated event StartCrouch( float HeightAdjust )\n'
p888
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p889
sg23
S'float HeightAdjust'
p890
sg25
g95
sg27
S'simulated'
p891
sg29
S'StartCrouch'
p892
sg31
I1956
sg32
I00
sba(iUnrealScriptIDEData
Function
p893
(dp894
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p895
sg23
S'vector Momentum, Vector HitLocation, class<DamageType> DamageType, optional TraceHitInfo HitInfo'
p896
sg25
g95
sg27
g95
sg29
S'HandleMomentum'
p897
sg31
I1962
sg32
I01
sba(iUnrealScriptIDEData
Function
p898
(dp899
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p900
sg23
S'vector NewVelocity, vector HitLocation, class<DamageType> damageType, optional TraceHitInfo HitInfo'
p901
sg25
g95
sg27
g95
sg29
S'AddVelocity'
p902
sg31
I1967
sg32
I01
sba(iUnrealScriptIDEData
Function
p903
(dp904
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p905
sg23
S'pawn EventInstigator'
p906
sg25
g95
sg27
g95
sg29
S'KilledBy'
p907
sg31
I1979
sg32
I01
sba(iUnrealScriptIDEData
Function
p908
(dp909
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p910
sg23
g95
sg25
g95
sg27
g95
sg29
S'TakeFallingDamage'
p911
sg31
I1992
sg32
I01
sba(iUnrealScriptIDEData
Function
p912
(dp913
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p914
sg23
g95
sg25
g95
sg27
g95
sg29
S'Restart'
p915
sg31
I2021
sg32
I01
sba(iUnrealScriptIDEData
Function
p916
(dp917
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p918
sg23
g95
sg25
g95
sg27
S'simulated'
p919
sg29
S'ClientReStart'
p920
sg31
I2023
sg32
I01
sba(iUnrealScriptIDEData
Function
p921
(dp922
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p923
sg23
S'rotator NewRotation'
p924
sg25
g95
sg27
g95
sg29
S'ClientSetRotation'
p925
sg31
I2029
sg32
I01
sba(iUnrealScriptIDEData
Function
p926
(dp927
g19
S"/** Script function callable from C++ to update the Pawn's rotation, and goes through the FaceRotation logic to apply rotation constraints */\nfinal event simulated UpdatePawnRotation(Rotator NewRotation)\n"
p928
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p929
sg23
S'Rotator NewRotation'
p930
sg25
S'simulated'
p931
sg27
S'final'
p932
sg29
S'UpdatePawnRotation'
p933
sg31
I2036
sg32
I00
sba(iUnrealScriptIDEData
Function
p934
(dp935
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p936
sg23
S'rotator NewRotation, float DeltaTime'
p937
sg25
g95
sg27
S'simulated'
p938
sg29
S'FaceRotation'
p939
sg31
I2041
sg32
I01
sba(iUnrealScriptIDEData
Function
p940
(dp941
g19
S'//==============\n// Encroachment\nevent bool EncroachingOn( actor Other )\n'
p942
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p943
sg23
S'actor Other'
p944
sg25
S'bool'
p945
sg27
g95
sg29
S'EncroachingOn'
p946
sg31
I2061
sg32
I00
sba(iUnrealScriptIDEData
Function
p947
(dp948
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p949
sg23
S'actor Other'
p950
sg25
g95
sg27
g95
sg29
S'EncroachedBy'
p951
sg31
I2072
sg32
I00
sba(iUnrealScriptIDEData
Function
p952
(dp953
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p954
sg23
S'actor Other'
p955
sg25
g95
sg27
g95
sg29
S'gibbedBy'
p956
sg31
I2079
sg32
I01
sba(iUnrealScriptIDEData
Function
p957
(dp958
g19
S'//Base change - if new base is pawn or decoration, damage based on relative mass and old velocity\n// Also, non-players will jump off pawns immediately\nfunction JumpOffPawn()\n'
p959
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p960
sg23
g95
sg25
g95
sg27
g95
sg29
S'JumpOffPawn'
p961
sg31
I2091
sg32
I01
sba(iUnrealScriptIDEData
Function
p962
(dp963
g19
S'/** Called when pawn cylinder embedded in another pawn.  (Collision bug that needs to be fixed).\n*/\nevent StuckOnPawn(Pawn OtherPawn);\n'
p964
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p965
sg23
S'Pawn OtherPawn'
p966
sg25
g95
sg27
g95
sg29
S'StuckOnPawn'
p967
sg31
I2104
sg32
I00
sba(iUnrealScriptIDEData
Function
p968
(dp969
g19
S"/**\n  * Event called after actor's base changes.\n*/\nsingular event BaseChange()\n"
p970
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p971
sg23
g95
sg25
g95
sg27
S'singular'
p972
sg29
S'BaseChange'
p973
sg31
I2109
sg32
I00
sba(iUnrealScriptIDEData
Function
p974
(dp975
g19
S'/**\n * Are we allowing this Pawn to be based on us?\n */\nsimulated function bool CanBeBaseForPawn(Pawn APawn)\n'
p976
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p977
sg23
S'Pawn APawn'
p978
sg25
S'bool'
p979
sg27
S'simulated'
p980
sg29
S'CanBeBaseForPawn'
p981
sg31
I2137
sg32
I01
sba(iUnrealScriptIDEData
Function
p982
(dp983
g19
S'/** CrushedBy()\nCalled for pawns that have bCanBeBaseForPawns=false when another pawn becomes based on them\n*/\nfunction CrushedBy(Pawn OtherPawn)\n'
p984
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p985
sg23
S'Pawn OtherPawn'
p986
sg25
g95
sg27
g95
sg29
S'CrushedBy'
p987
sg31
I2145
sg32
I01
sba(iUnrealScriptIDEData
Function
p988
(dp989
g19
S'/**\n * Call this function to detach safely pawn from its controller\n *\n * @param\tbDestroyController\tif true, then destroy controller. (only AI Controllers, not players)\n */\nfunction DetachFromController( optional bool bDestroyController )\n'
p990
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p991
sg23
S'optional bool bDestroyController'
p992
sg25
g95
sg27
g95
sg29
S'DetachFromController'
p993
sg31
I2157
sg32
I01
sba(iUnrealScriptIDEData
Function
p994
(dp995
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p996
sg23
g95
sg25
g95
sg27
S'simulated'
p997
sg29
S'Destroyed'
p998
sg31
I2180
sg32
I00
sba(iUnrealScriptIDEData
Function
p999
(dp1000
g19
S'//=============================================================================\n//\n// Called immediately before gameplay begins.\n//\nsimulated event PreBeginPlay()\n'
p1001
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1002
sg23
g95
sg25
g95
sg27
S'simulated'
p1003
sg29
S'PreBeginPlay'
p1004
sg31
I2205
sg32
I00
sba(iUnrealScriptIDEData
Function
p1005
(dp1006
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1007
sg23
g95
sg25
g95
sg27
g95
sg29
S'PostBeginPlay'
p1008
sg31
I2220
sg32
I00
sba(iUnrealScriptIDEData
Function
p1009
(dp1010
g19
S'/**\n * Spawn default controller for this Pawn, get possessed by it.\n */\nfunction SpawnDefaultController()\n'
p1011
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1012
sg23
g95
sg25
g95
sg27
g95
sg29
S'SpawnDefaultController'
p1013
sg31
I2258
sg32
I01
sba(iUnrealScriptIDEData
Function
p1014
(dp1015
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1016
sg23
S'SequenceEvent Evt'
p1017
sg25
g95
sg27
S'simulated'
p1018
sg29
S'ReceivedNewEvent'
p1019
sg31
I2277
sg32
I00
sba(iUnrealScriptIDEData
Function
p1020
(dp1021
g19
S'/**\n * Deletes the current controller if it exists and creates a new one\n * using the specified class.\n * Event called from Kismet.\n *\n * @param\t\tinAction - scripted action that was activated\n */\nfunction OnAssignController(SeqAct_AssignController inAction)\n'
p1022
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1023
sg23
S'SeqAct_AssignController inAction'
p1024
sg25
g95
sg27
g95
sg29
S'OnAssignController'
p1025
sg31
I2293
sg32
I01
sba(iUnrealScriptIDEData
Function
p1026
(dp1027
g19
S"/**\n * Iterates through the list of item classes specified in the action\n * and creates instances that are addeed to this Pawn's inventory.\n *\n * @param\t\tinAction - scripted action that was activated\n */\nsimulated function OnGiveInventory(SeqAct_GiveInventory InAction)\n"
p1028
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1029
sg23
S'SeqAct_GiveInventory InAction'
p1030
sg25
g95
sg27
S'simulated'
p1031
sg29
S'OnGiveInventory'
p1032
sg31
I2324
sg32
I01
sba(iUnrealScriptIDEData
Function
p1033
(dp1034
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1035
sg23
g95
sg25
g95
sg27
g95
sg29
S'Gasp'
p1036
sg31
I2359
sg32
I01
sba(iUnrealScriptIDEData
Function
p1037
(dp1038
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1039
sg23
g95
sg25
g95
sg27
g95
sg29
S'SetMovementPhysics'
p1040
sg31
I2361
sg32
I01
sba(iUnrealScriptIDEData
Function
p1041
(dp1042
g19
S'/* AdjustDamage()\nadjust damage based on inventory, other attributes\n*/\nfunction AdjustDamage(out int InDamage, out vector Momentum, Controller InstigatedBy, vector HitLocation, class<DamageType> DamageType, TraceHitInfo HitInfo, Actor DamageCauser);\n'
p1043
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1044
sg23
S'out int InDamage, out vector Momentum, Controller InstigatedBy, vector HitLocation, class<DamageType> DamageType, TraceHitInfo HitInfo, Actor DamageCauser'
p1045
sg25
g95
sg27
g95
sg29
S'AdjustDamage'
p1046
sg31
I2377
sg32
I01
sba(iUnrealScriptIDEData
Function
p1047
(dp1048
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1049
sg23
S'int Amount, Controller Healer, class<DamageType> DamageType'
p1050
sg25
S'bool'
p1051
sg27
g95
sg29
S'HealDamage'
p1052
sg31
I2379
sg32
I00
sba(iUnrealScriptIDEData
Function
p1053
(dp1054
g19
S"/** Take a list of bones passed to TakeRadiusDamageOnBones and remove the ones that don't matter */\nfunction PruneDamagedBoneList( out array<Name> Bones );\n"
p1055
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1056
sg23
S'out array<Name> Bones'
p1057
sg25
g95
sg27
g95
sg29
S'PruneDamagedBoneList'
p1058
sg31
I2394
sg32
I01
sba(iUnrealScriptIDEData
Function
p1059
(dp1060
g19
S'/**\n *\tDamage radius applied to specific bones on the skeletal mesh\n */\nevent bool TakeRadiusDamageOnBones\n(\n Controller\t\t\tInstigatedBy,\n float\t\t\t\tBaseDamage,\n float\t\t\t\tDamageRadius,\nclass<DamageType>\tDamageType,\n\tfloat\t\t\t\tMomentum,\n\tvector\t\t\t\tHurtOrigin,\n\tbool\t\t\t\tbFullDamage,\n\tActor\t\t\t\tDamageCauser,\n\tarray<Name>\t\t\tBones\n\t)\n'
p1061
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1062
sg23
S'Controller InstigatedBy, float BaseDamage, float DamageRadius, class<DamageType> DamageType, float Momentum, vector HurtOrigin, bool bFullDamage, Actor DamageCauser, array<Name> Bones'
p1063
sg25
S'bool'
p1064
sg27
g95
sg29
S'TakeRadiusDamageOnBones'
p1065
sg31
I2410
sg32
I00
sba(iUnrealScriptIDEData
Function
p1066
(dp1067
g19
S'/** sends any notifications to anything that needs to know this pawn has taken damage */\nfunction NotifyTakeHit(Controller InstigatedBy, vector HitLocation, int Damage, class<DamageType> DamageType, vector Momentum, Actor DamageCauser)\n'
p1068
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1069
sg23
S'Controller InstigatedBy, vector HitLocation, int Damage, class<DamageType> DamageType, vector Momentum, Actor DamageCauser'
p1070
sg25
g95
sg27
g95
sg29
S'NotifyTakeHit'
p1071
sg31
I2460
sg32
I01
sba(iUnrealScriptIDEData
Function
p1072
(dp1073
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1074
sg23
S'Controller InstigatedBy, class<DamageType> DamageType'
p1075
sg25
S'controller'
p1076
sg27
g95
sg29
S'SetKillInstigator'
p1077
sg31
I2468
sg32
I01
sba(iUnrealScriptIDEData
Function
p1078
(dp1079
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1080
sg23
S'int Damage, Controller InstigatedBy, vector HitLocation, vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser'
p1081
sg25
g95
sg27
g95
sg29
S'TakeDamage'
p1082
sg31
I2481
sg32
I00
sba(iUnrealScriptIDEData
Function
p1083
(dp1084
g19
S'/*\n * Queries the PRI and returns our current team index.\n */\nsimulated native function byte GetTeamNum();\n'
p1085
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1086
sg23
g95
sg25
S'byte'
p1087
sg27
S'simulated native'
p1088
sg29
S'GetTeamNum'
p1089
sg31
I2564
sg32
I01
sba(iUnrealScriptIDEData
Function
p1090
(dp1091
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1092
sg23
g95
sg25
S'TeamInfo'
p1093
sg27
S'simulated'
p1094
sg29
S'GetTeam'
p1095
sg31
I2567
sg32
I01
sba(iUnrealScriptIDEData
Function
p1096
(dp1097
g19
S'/** Returns true of pawns are on the same team, false otherwise */\nsimulated event bool IsSameTeam( Pawn Other )\n'
p1098
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1099
sg23
S'Pawn Other'
p1100
sg25
S'bool'
p1101
sg27
S'simulated'
p1102
sg29
S'IsSameTeam'
p1103
sg31
I2588
sg32
I00
sba(iUnrealScriptIDEData
Function
p1104
(dp1105
g19
S'/** called to throw any weapon(s) that should be thrown on death */\nfunction ThrowWeaponOnDeath()\n'
p1106
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1107
sg23
g95
sg25
g95
sg27
g95
sg29
S'ThrowWeaponOnDeath'
p1108
sg31
I2596
sg32
I01
sba(iUnrealScriptIDEData
Function
p1109
(dp1110
g19
S'/**\n * This pawn has died.\n *\n * @param\tKiller\t\t\tWho killed this pawn\n * @param\tDamageType\t\tWhat killed it\n * @param\tHitLocation\t\tWhere did the hit occur\n *\n * @returns true if allowed\n */\nfunction bool Died(Controller Killer, class<DamageType> DamageType, vector HitLocation)\n'
p1111
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1112
sg23
S'Controller Killer, class<DamageType> DamageType, vector HitLocation'
p1113
sg25
S'bool'
p1114
sg27
g95
sg29
S'Died'
p1115
sg31
I2610
sg32
I01
sba(iUnrealScriptIDEData
Function
p1116
(dp1117
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1118
sg23
g95
sg25
g95
sg27
g95
sg29
S'DelayTriggerDeath'
p1119
sg31
I2694
sg32
I01
sba(iUnrealScriptIDEData
Function
p1120
(dp1121
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1122
sg23
g95
sg25
g95
sg27
g95
sg29
S'Falling'
p1123
sg31
I2699
sg32
I00
sba(iUnrealScriptIDEData
Function
p1124
(dp1125
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1126
sg23
S'vector HitNormal, Actor FloorActor'
p1127
sg25
g95
sg27
g95
sg29
S'Landed'
p1128
sg31
I2701
sg32
I00
sba(iUnrealScriptIDEData
Function
p1129
(dp1130
g19
S'/** \n  *  Called if bScriptTickSpecial is set\n  *  This tick function is called after physics has executed\n  */\nevent TickSpecial( float DeltaTime );\n'
p1131
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1132
sg23
S'float DeltaTime'
p1133
sg25
g95
sg27
g95
sg29
S'TickSpecial'
p1134
sg31
I2713
sg32
I00
sba(iUnrealScriptIDEData
Function
p1135
(dp1136
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1137
sg23
S'PhysicsVolume newHeadVolume'
p1138
sg25
g95
sg27
g95
sg29
S'HeadVolumeChange'
p1139
sg31
I2715
sg32
I00
sba(iUnrealScriptIDEData
Function
p1140
(dp1141
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1142
sg23
g95
sg25
S'bool'
p1143
sg27
g95
sg29
S'TouchingWaterVolume'
p1144
sg31
I2734
sg32
I01
sba(iUnrealScriptIDEData
Function
p1145
(dp1146
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1147
sg23
g95
sg25
g95
sg27
g95
sg29
S'BreathTimer'
p1148
sg31
I2745
sg32
I00
sba(iUnrealScriptIDEData
Function
p1149
(dp1150
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1151
sg23
g95
sg25
g95
sg27
g95
sg29
S'TakeDrowningDamage'
p1152
sg31
I2761
sg32
I01
sba(iUnrealScriptIDEData
Function
p1153
(dp1154
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1155
sg23
S'out vector WallNormal'
p1156
sg25
S'bool'
p1157
sg27
g95
sg29
S'CheckWaterJump'
p1158
sg31
I2763
sg32
I01
sba(iUnrealScriptIDEData
Function
p1159
(dp1160
g19
S'//Player Jumped\nfunction bool DoJump( bool bUpdating )\n'
p1161
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1162
sg23
S'bool bUpdating'
p1163
sg25
S'bool'
p1164
sg27
g95
sg29
S'DoJump'
p1165
sg31
I2806
sg32
I01
sba(iUnrealScriptIDEData
Function
p1166
(dp1167
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1168
sg23
g95
sg25
g95
sg27
g95
sg29
S'PlayDyingSound'
p1169
sg31
I2828
sg32
I01
sba(iUnrealScriptIDEData
Function
p1170
(dp1171
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1172
sg23
S'float Damage, Controller InstigatedBy, vector HitLocation, class<DamageType> damageType, vector Momentum, TraceHitInfo HitInfo'
p1173
sg25
g95
sg27
g95
sg29
S'PlayHit'
p1174
sg31
I2830
sg32
I01
sba(iUnrealScriptIDEData
Function
p1175
(dp1176
g19
S'/** TurnOff()\nFreeze pawn - stop sounds, animations, physics, weapon firing\n*/\nsimulated function TurnOff()\n'
p1177
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1178
sg23
g95
sg25
g95
sg27
S'simulated'
p1179
sg29
S'TurnOff'
p1180
sg31
I2841
sg32
I01
sba(iUnrealScriptIDEData
Function
p1181
(dp1182
g19
S'/**\n  * Set physics for dying pawn\n  * Always set to falling, unless already a ragdoll\n  */\nfunction SetDyingPhysics()\n'
p1183
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1184
sg23
g95
sg25
g95
sg27
g95
sg29
S'SetDyingPhysics'
p1185
sg31
I2872
sg32
I01
sba(iUnrealScriptIDEData
Function
p1186
(dp1187
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1188
sg23
S'Weapon OldWeapon, Weapon NewWeapon'
p1189
sg25
g95
sg27
S'simulated'
p1190
sg29
S'PlayWeaponSwitch'
p1191
sg31
I2884
sg32
I01
sba(iUnrealScriptIDEData
Function
p1192
(dp1193
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1194
sg23
g95
sg25
g95
sg27
S'simulated'
p1195
sg29
S'PlayNextAnimation'
p1196
sg31
I2885
sg32
I01
sba(iUnrealScriptIDEData
Function
p1197
(dp1198
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1199
sg23
g95
sg25
g95
sg27
S'singular'
p1200
sg29
S'BaseChange'
p1201
sg31
I2886
sg32
I00
sba(iUnrealScriptIDEData
Function
p1202
(dp1203
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1204
sg23
S'vector HitNormal, Actor FloorActor'
p1205
sg25
g95
sg27
g95
sg29
S'Landed'
p1206
sg31
I2887
sg32
I00
sba(iUnrealScriptIDEData
Function
p1207
(dp1208
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1209
sg23
S'Controller Killer, class<DamageType> damageType, vector HitLocation'
p1210
sg25
S'bool'
p1211
sg27
g95
sg29
S'Died'
p1212
sg31
I2889
sg32
I01
sba(iUnrealScriptIDEData
Function
p1213
(dp1214
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1215
sg23
g95
sg25
g95
sg27
S'simulated singular'
p1216
sg29
S'OutsideWorldBounds'
p1217
sg31
I2891
sg32
I00
sba(iUnrealScriptIDEData
Function
p1218
(dp1219
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1220
sg23
g95
sg25
g95
sg27
g95
sg29
S'Timer'
p1221
sg31
I2898
sg32
I00
sba(iUnrealScriptIDEData
Function
p1222
(dp1223
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1224
sg23
S'int Damage, Controller EventInstigator, vector HitLocation, vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser'
p1225
sg25
g95
sg27
g95
sg29
S'TakeDamage'
p1226
sg31
I2910
sg32
I00
sba(iUnrealScriptIDEData
Function
p1227
(dp1228
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1229
sg23
S'Name PreviousStateName'
p1230
sg25
g95
sg27
g95
sg29
S'BeginState'
p1231
sg31
I2928
sg32
I00
sba(iUnrealScriptIDEData
Function
p1232
(dp1233
g19
S'/* PlayDying() is called on server/standalone game when killed\nand also on net client when pawn gets bTearOff set to true (and bPlayedDeath is false)\n*/\nsimulated function PlayDying(class<DamageType> DamageType, vector HitLoc)\n'
p1234
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1235
sg23
S'class<DamageType> DamageType, vector HitLoc'
p1236
sg25
g95
sg27
S'simulated'
p1237
sg29
S'PlayDying'
p1238
sg31
I2992
sg32
I01
sba(iUnrealScriptIDEData
Function
p1239
(dp1240
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1241
sg23
g95
sg25
g95
sg27
S'simulated'
p1242
sg29
S'TornOff'
p1243
sg31
I3004
sg32
I00
sba(iUnrealScriptIDEData
Function
p1244
(dp1245
g19
S'/**\n * PlayFootStepSound()\n * called by AnimNotify_Footstep\n *\n * FootDown specifies which foot hit\n */\nevent PlayFootStepSound(int FootDown);\n'
p1246
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1247
sg23
S'int FootDown'
p1248
sg25
g95
sg27
g95
sg29
S'PlayFootStepSound'
p1249
sg31
I3019
sg32
I00
sba(iUnrealScriptIDEData
Function
p1250
(dp1251
g19
S'// Animation group checks (usually implemented in subclass)\nfunction bool CannotJumpNow()\n'
p1252
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1253
sg23
g95
sg25
S'bool'
p1254
sg27
g95
sg29
S'CannotJumpNow'
p1255
sg31
I3025
sg32
I01
sba(iUnrealScriptIDEData
Function
p1256
(dp1257
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1258
sg23
S'float impactVel'
p1259
sg25
g95
sg27
g95
sg29
S'PlayLanded'
p1260
sg31
I3030
sg32
I01
sba(iUnrealScriptIDEData
Function
p1261
(dp1262
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1263
sg23
g95
sg25
S'Vehicle'
p1264
sg27
S'native'
p1265
sg29
S'GetVehicleBase'
p1266
sg31
I3032
sg32
I01
sba(iUnrealScriptIDEData
Function
p1267
(dp1268
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1269
sg23
g95
sg25
g95
sg27
g95
sg29
S'Suicide'
p1270
sg31
I3034
sg32
I01
sba(iUnrealScriptIDEData
Function
p1271
(dp1272
g19
S'// toss out a weapon\n// check before throwing\nsimulated function bool CanThrowWeapon()\n'
p1273
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1274
sg23
g95
sg25
S'bool'
p1275
sg27
S'simulated'
p1276
sg29
S'CanThrowWeapon'
p1277
sg31
I3041
sg32
I01
sba(iUnrealScriptIDEData
Function
p1278
(dp1279
g19
S'/**\n * StartDriving() and StopDriving() also called on clients\n * on transitions of DrivenVehicle variable.\n * Network: ALL\n */\nsimulated event StartDriving(Vehicle V)\n'
p1280
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1281
sg23
S'Vehicle V'
p1282
sg25
g95
sg27
S'simulated'
p1283
sg29
S'StartDriving'
p1284
sg31
I3056
sg32
I00
sba(iUnrealScriptIDEData
Function
p1285
(dp1286
g19
S'/**\n * StartDriving() and StopDriving() also called on clients\n * on transitions of DrivenVehicle variable.\n * Network: ALL\n */\nsimulated event StopDriving(Vehicle V)\n'
p1287
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1288
sg23
S'Vehicle V'
p1289
sg25
g95
sg27
S'simulated'
p1290
sg29
S'StopDriving'
p1291
sg31
I3078
sg32
I00
sba(iUnrealScriptIDEData
Function
p1292
(dp1293
g19
S'/* AddDefaultInventory:\n\tAdd Pawn default Inventory.\n\tCalled from GameInfo.AddDefaultInventory()\n*/\nfunction AddDefaultInventory();\n'
p1294
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1295
sg23
g95
sg25
g95
sg27
g95
sg29
S'AddDefaultInventory'
p1296
sg31
I3132
sg32
I01
sba(iUnrealScriptIDEData
Function
p1297
(dp1298
g19
S"/* epic ===============================================\n* ::CreateInventory\n*\n* Create Inventory Item, adds it to the Pawn's Inventory\n* And returns it for post processing.\n*\n* =====================================================\n*/\nevent final Inventory CreateInventory( class<Inventory> NewInvClass, optional bool bDoNotActivate )\n{\n\tif ( InvManager != None )\n"
p1299
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1300
sg23
S'class<Inventory> NewInvClass, optional bool bDoNotActivate ) {'
p1301
sg25
S'Inventory'
p1302
sg27
g95
sg29
S'CreateInventory'
p1303
sg31
I3144
sg32
I00
sba(iUnrealScriptIDEData
Function
p1304
(dp1305
g19
S"/* FindInventoryType:\n\treturns the inventory item of the requested class if it exists in this Pawn's inventory\n*/\nsimulated final function Inventory FindInventoryType(class<Inventory> DesiredClass, optional bool bAllowSubclass)\n"
p1306
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1307
sg23
S'class<Inventory> DesiredClass, optional bool bAllowSubclass'
p1308
sg25
S'Inventory'
p1309
sg27
S'simulated final'
p1310
sg29
S'FindInventoryType'
p1311
sg31
I3153
sg32
I01
sba(iUnrealScriptIDEData
Function
p1312
(dp1313
g19
S'/** Hook called from HUD actor. Gives access to HUD and Canvas */\nsimulated function DrawHUD( HUD H )\n'
p1314
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1315
sg23
S'HUD H'
p1316
sg25
g95
sg27
S'simulated'
p1317
sg29
S'DrawHUD'
p1318
sg31
I3159
sg32
I01
sba(iUnrealScriptIDEData
Function
p1319
(dp1320
g19
S'/**\n * Toss active weapon using default settings (location+velocity).\n *\n * @param DamageType  allows this function to do different behaviors based on the damage type\n */\nfunction ThrowActiveWeapon( optional bool bDestroyWeap )\n'
p1321
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1322
sg23
S'optional bool bDestroyWeap'
p1323
sg25
g95
sg27
g95
sg29
S'ThrowActiveWeapon'
p1324
sg31
I3172
sg32
I01
sba(iUnrealScriptIDEData
Function
p1325
(dp1326
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1327
sg23
S'Inventory Inv, optional vector ForceVelocity'
p1328
sg25
g95
sg27
g95
sg29
S'TossInventory'
p1329
sg31
I3180
sg32
I01
sba(iUnrealScriptIDEData
Function
p1330
(dp1331
g19
S"/* SetActiveWeapon\n\tSet this weapon as the Pawn's active weapon\n*/\nsimulated function SetActiveWeapon( Weapon NewWeapon )\n"
p1332
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1333
sg23
S'Weapon NewWeapon'
p1334
sg25
g95
sg27
S'simulated'
p1335
sg29
S'SetActiveWeapon'
p1336
sg31
I3204
sg32
I01
sba(iUnrealScriptIDEData
Function
p1337
(dp1338
g19
S'/**\n * Player just changed weapon. Called from InventoryManager::ChangedWeapon().\n * Network: Local Player and Server.\n *\n * @param\tOldWeapon\tOld weapon held by Pawn.\n * @param\tNewWeapon\tNew weapon held by Pawn.\n */\nsimulated function PlayWeaponSwitch(Weapon OldWeapon, Weapon NewWeapon);\n'
p1339
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1340
sg23
S'Weapon OldWeapon, Weapon NewWeapon'
p1341
sg25
g95
sg27
S'simulated'
p1342
sg29
S'PlayWeaponSwitch'
p1343
sg31
I3220
sg32
I01
sba(iUnrealScriptIDEData
Function
p1344
(dp1345
g19
S'// Cheats - invoked by CheatManager\nfunction bool CheatWalk()\n'
p1346
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1347
sg23
g95
sg25
S'bool'
p1348
sg27
g95
sg29
S'CheatWalk'
p1349
sg31
I3223
sg32
I01
sba(iUnrealScriptIDEData
Function
p1350
(dp1351
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1352
sg23
g95
sg25
S'bool'
p1353
sg27
g95
sg29
S'CheatGhost'
p1354
sg31
I3233
sg32
I01
sba(iUnrealScriptIDEData
Function
p1355
(dp1356
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1357
sg23
g95
sg25
S'bool'
p1358
sg27
g95
sg29
S'CheatFly'
p1359
sg31
I3242
sg32
I01
sba(iUnrealScriptIDEData
Function
p1360
(dp1361
g19
S'/**\n * Returns the collision radius of our cylinder\n * collision component.\n *\n * @return\tthe collision radius of our pawn\n */\nsimulated function float GetCollisionRadius()\n'
p1362
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1363
sg23
g95
sg25
S'float'
p1364
sg27
S'simulated'
p1365
sg29
S'GetCollisionRadius'
p1366
sg31
I3256
sg32
I01
sba(iUnrealScriptIDEData
Function
p1367
(dp1368
g19
S'/**\n * Returns the collision height of our cylinder\n * collision component.\n *\n * @return\tcollision height of our pawn\n */\nsimulated function float GetCollisionHeight()\n'
p1369
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1370
sg23
g95
sg25
S'float'
p1371
sg27
S'simulated'
p1372
sg29
S'GetCollisionHeight'
p1373
sg31
I3267
sg32
I01
sba(iUnrealScriptIDEData
Function
p1374
(dp1375
g19
S"/** @return a vector representing the box around this pawn's cylinder collision component, for use with traces */\nsimulated final function vector GetCollisionExtent()\n"
p1376
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1377
sg23
g95
sg25
S'vector'
p1378
sg27
S'simulated final'
p1379
sg29
S'GetCollisionExtent'
p1380
sg31
I3273
sg32
I01
sba(iUnrealScriptIDEData
Function
p1381
(dp1382
g19
S'/**\n * Pawns by nature are not stationary.\tOverride if you want exact findings\n */\nfunction bool IsStationary()\n'
p1383
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1384
sg23
g95
sg25
S'bool'
p1385
sg27
g95
sg29
S'IsStationary'
p1386
sg31
I3285
sg32
I01
sba(iUnrealScriptIDEData
Function
p1387
(dp1388
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1389
sg23
g95
sg25
g95
sg27
g95
sg29
S'SpawnedByKismet'
p1390
sg31
I3290
sg32
I00
sba(iUnrealScriptIDEData
Function
p1391
(dp1392
g19
S'/** Performs actual attachment. Can be subclassed for class specific behaviors. */\nfunction DoKismetAttachment(Actor Attachment, SeqAct_AttachToActor Action)\n'
p1393
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1394
sg23
S'Actor Attachment, SeqAct_AttachToActor Action'
p1395
sg25
g95
sg27
g95
sg29
S'DoKismetAttachment'
p1396
sg31
I3301
sg32
I01
sba(iUnrealScriptIDEData
Function
p1397
(dp1398
g19
S"/** returns the amount this pawn's damage should be scaled by */\nfunction float GetDamageScaling()\n"
p1399
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1400
sg23
g95
sg25
S'float'
p1401
sg27
g95
sg29
S'GetDamageScaling'
p1402
sg31
I3370
sg32
I01
sba(iUnrealScriptIDEData
Function
p1403
(dp1404
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1405
sg23
S'SeqAct_SetMaterial Action'
p1406
sg25
g95
sg27
g95
sg29
S'OnSetMaterial'
p1407
sg31
I3375
sg32
I01
sba(iUnrealScriptIDEData
Function
p1408
(dp1409
g19
S'/** Kismet teleport handler, overridden so that updating rotation properly updates our Controller as well */\nsimulated function OnTeleport(SeqAct_Teleport Action)\n'
p1410
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1411
sg23
S'SeqAct_Teleport Action'
p1412
sg25
g95
sg27
S'simulated'
p1413
sg29
S'OnTeleport'
p1414
sg31
I3384
sg32
I01
sba(iUnrealScriptIDEData
Function
p1415
(dp1416
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1417
sg23
S'array<Object> DestList, bool bUpdateRotation, bool bCheckOverlap, optional float TeleportDistance, optional array<Volume> TeleportVolumes, optional int PreferredDestIndex'
p1418
sg25
S'bool'
p1419
sg27
S'simulated'
p1420
sg29
S'HandleTeleport'
p1421
sg31
I3396
sg32
I01
sba(iUnrealScriptIDEData
Function
p1422
(dp1423
g19
S'/**\n  * For debugging.  Causes a string to be displayed on the HUD.\n  */\nfinal event MessagePlayer( coerce String Msg )\n'
p1424
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1425
sg23
S'coerce String Msg'
p1426
sg25
g95
sg27
S'final'
p1427
sg29
S'MessagePlayer'
p1428
sg31
I3513
sg32
I00
sba(iUnrealScriptIDEData
Function
p1429
(dp1430
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1431
sg23
S'PlayerController PC'
p1432
sg25
g95
sg27
S'simulated'
p1433
sg29
S'BecomeViewTarget'
p1434
sg31
I3525
sg32
I00
sba(iUnrealScriptIDEData
Function
p1435
(dp1436
g19
S'/** For AI debugging */\nevent SoakPause()\n'
p1437
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1438
sg23
g95
sg25
g95
sg27
g95
sg29
S'SoakPause'
p1439
sg31
I3540
sg32
I00
sba(iUnrealScriptIDEData
Function
p1440
(dp1441
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1442
sg23
g95
sg25
g95
sg27
S'native'
p1443
sg29
S'ClearConstraints'
p1444
sg31
I3551
sg32
I01
sba(iUnrealScriptIDEData
Function
p1445
(dp1446
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1447
sg23
S'PathConstraint Constraint'
p1448
sg25
g95
sg27
S'native'
p1449
sg29
S'AddPathConstraint'
p1450
sg31
I3552
sg32
I01
sba(iUnrealScriptIDEData
Function
p1451
(dp1452
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1453
sg23
S'PathGoalEvaluator Evaluator'
p1454
sg25
g95
sg27
S'native'
p1455
sg29
S'AddGoalEvaluator'
p1456
sg31
I3553
sg32
I01
sba(iUnrealScriptIDEData
Function
p1457
(dp1458
g19
S'/**\n * Path shaping creation functions...\n * these functions by default will just new the class, but this offers a handy\n * interface to override for to do things like pool the constraints\n */\nfunction PathConstraint CreatePathConstraint( class<PathConstraint> ConstraintClass )\n'
p1459
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1460
sg23
S'class<PathConstraint> ConstraintClass'
p1461
sg25
S'PathConstraint'
p1462
sg27
g95
sg29
S'CreatePathConstraint'
p1463
sg31
I3560
sg32
I01
sba(iUnrealScriptIDEData
Function
p1464
(dp1465
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1466
sg23
S'class<PathGoalEvaluator> GoalEvalClass'
p1467
sg25
S'PathGoalEvaluator'
p1468
sg27
g95
sg29
S'CreatePathGoalEvaluator'
p1469
sg31
I3564
sg32
I01
sba(iUnrealScriptIDEData
Function
p1470
(dp1471
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1472
sg23
S'int Cnt, Canvas C'
p1473
sg25
g95
sg27
S'native'
p1474
sg29
S'IncrementPathStep'
p1475
sg31
I3569
sg32
I01
sba(iUnrealScriptIDEData
Function
p1476
(dp1477
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1478
sg23
S'int Cnt, Canvas C'
p1479
sg25
g95
sg27
S'native'
p1480
sg29
S'IncrementPathChild'
p1481
sg31
I3570
sg32
I01
sba(iUnrealScriptIDEData
Function
p1482
(dp1483
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1484
sg23
S'Canvas C'
p1485
sg25
g95
sg27
S'native'
p1486
sg29
S'DrawPathStep'
p1487
sg31
I3571
sg32
I01
sba(iUnrealScriptIDEData
Function
p1488
(dp1489
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1490
sg23
g95
sg25
g95
sg27
S'native'
p1491
sg29
S'ClearPathStep'
p1492
sg31
I3572
sg32
I01
sba(iUnrealScriptIDEData
Function
p1493
(dp1494
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1495
sg23
g95
sg25
g95
sg27
S'simulated'
p1496
sg29
S'ZeroMovementVariables'
p1497
sg31
I3574
sg32
I01
sba(iUnrealScriptIDEData
Function
p1498
(dp1499
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1500
sg23
S'bool bInCinematicMode'
p1501
sg25
g95
sg27
S'simulated'
p1502
sg29
S'SetCinematicMode'
p1503
sg31
I3580
sg32
I01
sba(iUnrealScriptIDEData
Function
p1504
(dp1505
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1506
sg23
S'float inTime, optional float DeltaTime, optional bool bUpdateSkelPose'
p1507
sg25
g95
sg27
S'native'
p1508
sg29
S'SetRootMotionInterpCurrentTime'
p1509
sg31
I3582
sg32
I01
sba(iUnrealScriptIDEData
Function
p1510
(dp1511
g19
S'/** Set a ScalarParameter to Interpolate */\nfinal simulated native function SetScalarParameterInterp(const out ScalarParameterInterpStruct ScalarParameterInterp);\n'
p1512
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1513
sg23
S'const out ScalarParameterInterpStruct ScalarParameterInterp'
p1514
sg25
g95
sg27
S'final simulated native'
p1515
sg29
S'SetScalarParameterInterp'
p1516
sg31
I3585
sg32
I01
sba(iUnrealScriptIDEData
Function
p1517
(dp1518
g19
S'/** Simple interface for handling pawn dialogue. */\nsimulated event Speak(SoundCue Cue)\n'
p1519
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1520
sg23
S'SoundCue Cue'
p1521
sg25
g95
sg27
S'simulated'
p1522
sg29
S'Speak'
p1523
sg31
I3588
sg32
I00
sba(iUnrealScriptIDEData
Function
p1524
(dp1525
g19
S'/**\n *\tHandler for the SeqAct_SetVelocity action. Allows level designer to impart a velocity on the actor.\n */\nsimulated function OnSetVelocity( SeqAct_SetVelocity Action )\n'
p1526
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1527
sg23
S'SeqAct_SetVelocity Action'
p1528
sg25
g95
sg27
S'simulated'
p1529
sg29
S'OnSetVelocity'
p1530
sg31
I3604
sg32
I01
sbasS'_parent_class_name'
p1531
S'actor'
p1532
sg19
S'//=============================================================================\n// Pawn, the base class of all actors that can be controlled by players or AI.\n//\n// Pawns are the physical representations of players and creatures in a level.\n// Pawns have a mesh, collision, and physics.  Pawns can take damage, make sounds,\n// and hold weapons and other inventory.  In short, they are responsible for all\n// physical interaction between the player or AI and the world.\n//\n// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\n//=============================================================================\nclass Pawn extends Actor\n'
p1533
sS'_child_classes'
p1534
(lp1535
sS'_name'
p1536
VPawn
p1537
sS'_consts'
p1538
(lp1539
sS'_structs'
p1540
(lp1541
(iUnrealScriptIDEData
Struct
p1542
(dp1543
S'_struct_line'
p1544
S'struct native ScalarParameterInterpStruct\n'
p1545
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1546
sg19
g95
sg1536
S'ScalarParameterInterpStruct'
p1547
sg82
(lp1548
(iUnrealScriptIDEData
Variable
p1549
(dp1550
g19
S'\t/** Name of parameter to change */\n\tvar() Name ParameterName;\n'
p1551
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1552
sS'_comment'
p1553
g95
sS'_variable_modifiers'
p1554
(lp1555
S'var()'
p1556
aS'Name'
p1557
asg1536
S'ParameterName'
p1558
sg31
I325
sba(iUnrealScriptIDEData
Variable
p1559
(dp1560
g19
S'\t/** Desired Parameter Value */\n\tvar() float ParameterValue;\n'
p1561
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1562
sg1553
g95
sg1554
(lp1563
S'var()'
p1564
aS'float'
p1565
asg1536
S'ParameterValue'
p1566
sg31
I327
sba(iUnrealScriptIDEData
Variable
p1567
(dp1568
g19
S'\t/** Desired Interpolation Time */\n\tvar() float InterpTime;\n'
p1569
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1570
sg1553
g95
sg1554
(lp1571
S'var()'
p1572
aS'float'
p1573
asg1536
S'InterpTime'
p1574
sg31
I329
sba(iUnrealScriptIDEData
Variable
p1575
(dp1576
g19
S'\t/** Time before interpolation starts */\n\tvar() float WarmUpTime;\n'
p1577
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1578
sg1553
g95
sg1554
(lp1579
S'var()'
p1580
aS'float'
p1581
asg1536
S'WarmUpTime'
p1582
sg31
I331
sbasg31
I322
sbasg82
(lp1583
(iUnrealScriptIDEData
Variable
p1584
(dp1585
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1586
sg1553
g95
sg1554
(lp1587
S'var'
p1588
aS'const'
p1589
aS'float'
p1590
asg1536
S'MaxStepHeight,'
p1591
sg31
I20
sba(iUnrealScriptIDEData
Variable
p1592
(dp1593
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1594
sg1553
S' minimum z value for floor normal (if less, not a walkable floor for this pawn) */'
p1595
sg1554
(lp1596
S'var'
p1597
aS'const'
p1598
aS'float'
p1599
asg1536
S'WalkableFloorZ'
p1600
sg31
I22
sba(iUnrealScriptIDEData
Variable
p1601
(dp1602
g19
S'/** Used in determining if pawn is going off ledge.  If the ledge is "shorter" than this value then the pawn will be able to walk off it. **/\nvar const float     LedgeCheckThreshold;\n'
p1603
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1604
sg1553
g95
sg1554
(lp1605
S'var'
p1606
aS'const'
p1607
aS'float'
p1608
asg1536
S'LedgeCheckThreshold'
p1609
sg31
I25
sba(iUnrealScriptIDEData
Variable
p1610
(dp1611
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1612
sg1553
g95
sg1554
(lp1613
S'var'
p1614
aS'const'
p1615
aS'Vector'
p1616
asg1536
S'PartialLedgeMoveDir'
p1617
sg31
I26
sba(iUnrealScriptIDEData
Variable
p1618
(dp1619
g19
S'/** Controller currently possessing this Pawn */\nvar editinline repnotify Controller Controller;\n'
p1620
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1621
sg1553
g95
sg1554
(lp1622
S'var'
p1623
aS'editinline'
p1624
aS'repnotify'
p1625
aS'Controller'
p1626
asg1536
S'Controller'
p1627
sg31
I29
sba(iUnrealScriptIDEData
Variable
p1628
(dp1629
g19
S'/** Chained pawn list */\nvar const Pawn NextPawn;\n'
p1630
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1631
sg1553
g95
sg1554
(lp1632
S'var'
p1633
aS'const'
p1634
aS'Pawn'
p1635
asg1536
S'NextPawn'
p1636
sg31
I32
sba(iUnrealScriptIDEData
Variable
p1637
(dp1638
g19
S'/** Used for cacheing net relevancy test */\nvar float\t\t\t\tNetRelevancyTime;\n'
p1639
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1640
sg1553
g95
sg1554
(lp1641
S'var'
p1642
aS'float'
p1643
asg1536
S'NetRelevancyTime'
p1644
sg31
I35
sba(iUnrealScriptIDEData
Variable
p1645
(dp1646
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1647
sg1553
g95
sg1554
(lp1648
S'var'
p1649
aS'playerController'
p1650
asg1536
S'LastRealViewer'
p1651
sg31
I36
sba(iUnrealScriptIDEData
Variable
p1652
(dp1653
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1654
sg1553
g95
sg1554
(lp1655
S'var'
p1656
aS'actor'
p1657
asg1536
S'LastViewer'
p1658
sg31
I37
sba(iUnrealScriptIDEData
Variable
p1659
(dp1660
g19
S'/** If true, call the script TickSpecial() event. */\nvar bool bScriptTickSpecial;\n'
p1661
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1662
sg1553
g95
sg1554
(lp1663
S'var'
p1664
aS'bool'
p1665
asg1536
S'bScriptTickSpecial'
p1666
sg31
I40
sba(iUnrealScriptIDEData
Variable
p1667
(dp1668
g19
S'// Physics related flags.\nvar bool\t\tbUpAndOut;\t\t\t// used by swimming\n'
p1669
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1670
sg1553
S' used by swimming'
p1671
sg1554
(lp1672
S'var'
p1673
aS'bool'
p1674
asg1536
S'bUpAndOut'
p1675
sg31
I43
sba(iUnrealScriptIDEData
Variable
p1676
(dp1677
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1678
sg1553
S" currently walking (can't jump, affects animations)"
p1679
sg1554
(lp1680
S'var'
p1681
aS'bool'
p1682
asg1536
S'bIsWalking'
p1683
sg31
I44
sba(iUnrealScriptIDEData
Variable
p1684
(dp1685
g19
S'/** Physics to use when walking. Typically set to PHYS_Walking or PHYS_NavMeshWalking */\nvar(Movement) EPhysics  WalkingPhysics;\n'
p1686
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1687
sg1553
g95
sg1554
(lp1688
S'var(Movement)'
p1689
aS'EPhysics'
p1690
asg1536
S'WalkingPhysics'
p1691
sg31
I47
sba(iUnrealScriptIDEData
Variable
p1692
(dp1693
g19
S'// Crouching\nvar\t\t\t\tbool\tbWantsToCrouch;\t\t// if true crouched (physics will automatically reduce collision height to CrouchHeight)\n'
p1694
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1695
sg1553
S' if true crouched (physics will automatically reduce collision height to CrouchHeight)'
p1696
sg1554
(lp1697
S'var'
p1698
aS'bool'
p1699
asg1536
S'bWantsToCrouch'
p1700
sg31
I50
sba(iUnrealScriptIDEData
Variable
p1701
(dp1702
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1703
sg1553
S' set by physics to specify that pawn is currently crouched'
p1704
sg1554
(lp1705
S'var'
p1706
aS'const'
p1707
aS'bool'
p1708
asg1536
S'bIsCrouched'
p1709
sg31
I51
sba(iUnrealScriptIDEData
Variable
p1710
(dp1711
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1712
sg1553
S' when auto-crouch during movement, continually try to uncrouch'
p1713
sg1554
(lp1714
S'var'
p1715
aS'const'
p1716
aS'bool'
p1717
asg1536
S'bTryToUncrouch'
p1718
sg31
I52
sba(iUnrealScriptIDEData
Variable
p1719
(dp1720
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1721
sg1553
S' if true, this pawn is capable of crouching'
p1722
sg1554
(lp1723
S'var()'
p1724
aS'bool'
p1725
asg1536
S'bCanCrouch'
p1726
sg31
I53
sba(iUnrealScriptIDEData
Variable
p1727
(dp1728
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1729
sg1553
S' when auto-crouch during movement, continually try to uncrouch once this decrements to zero'
p1730
sg1554
(lp1731
S'var'
p1732
aS'const'
p1733
aS'float'
p1734
asg1536
S'UncrouchTime'
p1735
sg31
I54
sba(iUnrealScriptIDEData
Variable
p1736
(dp1737
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1738
sg1553
S' CollisionHeight when crouching'
p1739
sg1554
(lp1740
S'var'
p1741
aS'float'
p1742
asg1536
S'CrouchHeight'
p1743
sg31
I55
sba(iUnrealScriptIDEData
Variable
p1744
(dp1745
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1746
sg1553
S' CollisionRadius when crouching'
p1747
sg1554
(lp1748
S'var'
p1749
aS'float'
p1750
asg1536
S'CrouchRadius'
p1751
sg31
I56
sba(iUnrealScriptIDEData
Variable
p1752
(dp1753
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1754
sg1553
S' cached for pathfinding'
p1755
sg1554
(lp1756
S'var'
p1757
aS'const'
p1758
aS'int'
p1759
asg1536
S'FullHeight'
p1760
sg31
I57
sba(iUnrealScriptIDEData
Variable
p1761
(dp1762
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1763
sg1553
S' crawling - pitch and roll based on surface pawn is on'
p1764
sg1554
(lp1765
S'var'
p1766
aS'bool'
p1767
asg1536
S'bCrawler'
p1768
sg31
I59
sba(iUnrealScriptIDEData
Variable
p1769
(dp1770
g19
S'/** Used by movement natives to slow pawn as it reaches its destination to prevent overshooting */\nvar const bool\tbReducedSpeed;\n'
p1771
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1772
sg1553
g95
sg1554
(lp1773
S'var'
p1774
aS'const'
p1775
aS'bool'
p1776
asg1536
S'bReducedSpeed'
p1777
sg31
I62
sba(iUnrealScriptIDEData
Variable
p1778
(dp1779
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1780
sg1553
g95
sg1554
(lp1781
S'var'
p1782
aS'bool'
p1783
asg1536
S'bJumpCapable'
p1784
sg31
I64
sba(iUnrealScriptIDEData
Variable
p1785
(dp1786
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1787
sg1553
S' movement capabilities - used by AI'
p1788
sg1554
(lp1789
S'var'
p1790
aS'bool'
p1791
asg1536
S'bCanJump'
p1792
sg31
I65
sba(iUnrealScriptIDEData
Variable
p1793
(dp1794
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1795
sg1553
g95
sg1554
(lp1796
S'var'
p1797
aS'bool'
p1798
asg1536
S'bCanWalk'
p1799
sg31
I66
sba(iUnrealScriptIDEData
Variable
p1800
(dp1801
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1802
sg1553
g95
sg1554
(lp1803
S'var'
p1804
aS'bool'
p1805
asg1536
S'bCanSwim'
p1806
sg31
I67
sba(iUnrealScriptIDEData
Variable
p1807
(dp1808
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1809
sg1553
g95
sg1554
(lp1810
S'var'
p1811
aS'bool'
p1812
asg1536
S'bCanFly'
p1813
sg31
I68
sba(iUnrealScriptIDEData
Variable
p1814
(dp1815
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1816
sg1553
g95
sg1554
(lp1817
S'var'
p1818
aS'bool'
p1819
asg1536
S'bCanClimbLadders'
p1820
sg31
I69
sba(iUnrealScriptIDEData
Variable
p1821
(dp1822
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1823
sg1553
g95
sg1554
(lp1824
S'var'
p1825
aS'bool'
p1826
asg1536
S'bCanStrafe'
p1827
sg31
I70
sba(iUnrealScriptIDEData
Variable
p1828
(dp1829
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1830
sg1553
S" don't get too close to ledges"
p1831
sg1554
(lp1832
S'var'
p1833
aS'bool'
p1834
asg1536
S'bAvoidLedges'
p1835
sg31
I71
sba(iUnrealScriptIDEData
Variable
p1836
(dp1837
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1838
sg1553
S" if bAvoidLedges and bStopAtLedges, Pawn doesn't try to walk along the edge at all"
p1839
sg1554
(lp1840
S'var'
p1841
aS'bool'
p1842
asg1536
S'bStopAtLedges'
p1843
sg31
I72
sba(iUnrealScriptIDEData
Variable
p1844
(dp1845
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1846
sg1553
S' if TRUE then allow the pawn to hang off ledges based on the cylinder extent'
p1847
sg1554
(lp1848
S'var'
p1849
aS'bool'
p1850
asg1536
S'bAllowLedgeOverhang'
p1851
sg31
I73
sba(iUnrealScriptIDEData
Variable
p1852
(dp1853
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1854
sg1553
S' if TRUE pawn was over a ledge without falling, allows us to handle case if player stops'
p1855
sg1554
(lp1856
S'var'
p1857
aS'const'
p1858
aS'bool'
p1859
asg1536
S'bPartiallyOverLedge'
p1860
sg31
I74
sba(iUnrealScriptIDEData
Variable
p1861
(dp1862
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1863
sg1553
S' simulate gravity for this pawn on network clients when predicting position (true if pawn is walking or falling)'
p1864
sg1554
(lp1865
S'var'
p1866
aS'const'
p1867
aS'bool'
p1868
asg1536
S'bSimulateGravity'
p1869
sg31
I75
sba(iUnrealScriptIDEData
Variable
p1870
(dp1871
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1872
sg1553
S' if true, not affected by external forces'
p1873
sg1554
(lp1874
S'var'
p1875
aS'bool'
p1876
asg1536
S'bIgnoreForces'
p1877
sg31
I76
sba(iUnrealScriptIDEData
Variable
p1878
(dp1879
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1880
sg1553
S' Can still fall off ledges, even when walking (for Player Controlled pawns)'
p1881
sg1554
(lp1882
S'var'
p1883
aS'bool'
p1884
asg1536
S'bCanWalkOffLedges'
p1885
sg31
I77
sba(iUnrealScriptIDEData
Variable
p1886
(dp1887
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1888
sg1553
S" all your 'base', are belong to us"
p1889
sg1554
(lp1890
S'var'
p1891
aS'bool'
p1892
asg1536
S'bCanBeBaseForPawns'
p1893
sg31
I78
sba(iUnrealScriptIDEData
Variable
p1894
(dp1895
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1896
sg1553
S' used on network clients'
p1897
sg1554
(lp1898
S'var'
p1899
aS'const'
p1900
aS'bool'
p1901
asg1536
S'bSimGravityDisabled'
p1902
sg31
I79
sba(iUnrealScriptIDEData
Variable
p1903
(dp1904
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1905
sg1553
S' always call pawn hitwall directly (no controller notifyhitwall)'
p1906
sg1554
(lp1907
S'var'
p1908
aS'bool'
p1909
asg1536
S'bDirectHitWall'
p1910
sg31
I80
sba(iUnrealScriptIDEData
Variable
p1911
(dp1912
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1913
sg1553
S" Will do a check to find nearby PHYS_RigidBody actors and will give them a 'soft' push."
p1914
sg1554
(lp1915
S'var'
p1916
aS'const'
p1917
aS'bool'
p1918
asg1536
S'bPushesRigidBodies'
p1919
sg31
I81
sba(iUnrealScriptIDEData
Variable
p1920
(dp1921
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1922
sg1553
S" force the pawn in PHYS_Walking to do a check for a valid floor even if he hasn't moved.\tCleared after next floor check."
p1923
sg1554
(lp1924
S'var'
p1925
aS'bool'
p1926
asg1536
S'bForceFloorCheck'
p1927
sg31
I82
sba(iUnrealScriptIDEData
Variable
p1928
(dp1929
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1930
sg1553
S' Force ValidAnchor function to accept any non-NULL anchor as valid (used to override when we want to set anchor for path finding)'
p1931
sg1554
(lp1932
S'var'
p1933
aS'bool'
p1934
asg1536
S'bForceKeepAnchor'
p1935
sg31
I83
sba(iUnrealScriptIDEData
Variable
p1936
(dp1937
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1938
sg1553
S' can this pawn mantle over cover'
p1939
sg1554
(lp1940
S'var'
p1941
aS'config'
p1942
aS'bool'
p1943
asg1536
S'bCanMantle'
p1944
sg31
I85
sba(iUnrealScriptIDEData
Variable
p1945
(dp1946
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1947
sg1553
S' can this pawn climb up cover wall'
p1948
sg1554
(lp1949
S'var'
p1950
aS'config'
p1951
aS'bool'
p1952
asg1536
S'bCanClimbUp'
p1953
sg31
I86
sba(iUnrealScriptIDEData
Variable
p1954
(dp1955
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1956
sg1553
S' can this pawn climb ceiling nodes'
p1957
sg1554
(lp1958
S'var'
p1959
aS'bool'
p1960
asg1536
S'bCanClimbCeilings'
p1961
sg31
I87
sba(iUnrealScriptIDEData
Variable
p1962
(dp1963
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1964
sg1553
S' can this pawn swat turn between cover'
p1965
sg1554
(lp1966
S'var'
p1967
aS'config'
p1968
aS'bool'
p1969
asg1536
S'bCanSwatTurn'
p1970
sg31
I88
sba(iUnrealScriptIDEData
Variable
p1971
(dp1972
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1973
sg1553
S' can this pawn use LeapReachSpec'
p1974
sg1554
(lp1975
S'var'
p1976
aS'config'
p1977
aS'bool'
p1978
asg1536
S'bCanLeap'
p1979
sg31
I89
sba(iUnrealScriptIDEData
Variable
p1980
(dp1981
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1982
sg1553
S' can this pawn coverslip'
p1983
sg1554
(lp1984
S'var'
p1985
aS'config'
p1986
aS'bool'
p1987
asg1536
S'bCanCoverSlip'
p1988
sg31
I90
sba(iUnrealScriptIDEData
Variable
p1989
(dp1990
g19
S'/** if set, display "MAP HAS PATHING ERRORS" and message in the log when a Pawn fails a full path search */\nvar globalconfig bool bDisplayPathErrors;\n'
p1991
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p1992
sg1553
g95
sg1554
(lp1993
S'var'
p1994
aS'globalconfig'
p1995
aS'bool'
p1996
asg1536
S'bDisplayPathErrors'
p1997
sg31
I93
sba(iUnrealScriptIDEData
Variable
p1998
(dp1999
g19
S'// AI related flags\nvar\t\tbool\tbCanPickupInventory;\t// if true, will pickup inventory when touching pickup actors\n'
p2000
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2001
sg1553
S' if true, will pickup inventory when touching pickup actors'
p2002
sg1554
(lp2003
S'var'
p2004
aS'bool'
p2005
asg1536
S'bCanPickupInventory'
p2006
sg31
I96
sba(iUnrealScriptIDEData
Variable
p2007
(dp2008
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2009
sg1553
S' AIs will ignore me'
p2010
sg1554
(lp2011
S'var'
p2012
aS'bool'
p2013
asg1536
S'bAmbientCreature'
p2014
sg31
I97
sba(iUnrealScriptIDEData
Variable
p2015
(dp2016
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2017
sg1553
S' can hear sounds from line-of-sight sources (which are close enough to hear)'
p2018
sg1554
(lp2019
S'var(AI)'
p2020
aS'bool'
p2021
asg1536
S'bLOSHearing'
p2022
sg31
I98
sba(iUnrealScriptIDEData
Variable
p2023
(dp2024
g19
S'\t\t\t\t\t\t\t\t\t\t// bLOSHearing=true is like UT/Unreal hearing\nvar(AI) bool\tbMuffledHearing;\t\t// can hear sounds through walls (but muffled - sound distance increased to double plus 4x the distance through walls\n'
p2025
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2026
sg1553
S' can hear sounds through walls (but muffled - sound distance increased to double plus 4x the distance through walls'
p2027
sg1554
(lp2028
S'var(AI)'
p2029
aS'bool'
p2030
asg1536
S'bMuffledHearing'
p2031
sg31
I100
sba(iUnrealScriptIDEData
Variable
p2032
(dp2033
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2034
sg1553
S" if true, Pawn won't be possessed at game start"
p2035
sg1554
(lp2036
S'var(AI)'
p2037
aS'bool'
p2038
asg1536
S'bDontPossess'
p2039
sg31
I101
sba(iUnrealScriptIDEData
Variable
p2040
(dp2041
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2042
sg1553
S' Update roll when turning to desired rotation (normally false)'
p2043
sg1554
(lp2044
S'var'
p2045
aS'bool'
p2046
asg1536
S'bRollToDesired'
p2047
sg31
I102
sba(iUnrealScriptIDEData
Variable
p2048
(dp2049
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2050
sg1553
S" pawn can't move"
p2051
sg1554
(lp2052
S'var'
p2053
aS'bool'
p2054
asg1536
S'bStationary'
p2055
sg31
I103
sba(iUnrealScriptIDEData
Variable
p2056
(dp2057
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2058
sg1553
S' network relevancy caching flag'
p2059
sg1554
(lp2060
S'var'
p2061
aS'bool'
p2062
asg1536
S'bCachedRelevant'
p2063
sg31
I105
sba(iUnrealScriptIDEData
Variable
p2064
(dp2065
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2066
sg1553
S' TRUE indicates that weapon firing is disabled for this pawn'
p2067
sg1554
(lp2068
S'var'
p2069
aS'bool'
p2070
asg1536
S'bNoWeaponFiring'
p2071
sg31
I106
sba(iUnrealScriptIDEData
Variable
p2072
(dp2073
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2074
sg1553
S' pawn should call virtual function to modify reach spec costs'
p2075
sg1554
(lp2076
S'var'
p2077
aS'bool'
p2078
asg1536
S'bModifyReachSpecCost'
p2079
sg31
I107
sba(iUnrealScriptIDEData
Variable
p2080
(dp2081
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2082
sg1553
S' pawn should call virtual function to modify destination location when moving to nav point'
p2083
sg1554
(lp2084
S'var'
p2085
aS'bool'
p2086
asg1536
S'bModifyNavPointDest'
p2087
sg31
I108
sba(iUnrealScriptIDEData
Variable
p2088
(dp2089
g19
S"/** set if Pawn counts as a vehicle for pathfinding checks (so don't use bBlockedForVehicles nodes, etc) */\nvar bool bPathfindsAsVehicle;\n"
p2090
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2091
sg1553
g95
sg1554
(lp2092
S'var'
p2093
aS'bool'
p2094
asg1536
S'bPathfindsAsVehicle'
p2095
sg31
I110
sba(iUnrealScriptIDEData
Variable
p2096
(dp2097
g19
S"/** Pawn multiplies cost of NavigationPoints that don't have bPreferredVehiclePath set by this number */\nvar float NonPreferredVehiclePathMultiplier;\n"
p2098
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2099
sg1553
g95
sg1554
(lp2100
S'var'
p2101
aS'float'
p2102
asg1536
S'NonPreferredVehiclePathMultiplier'
p2103
sg31
I112
sba(iUnrealScriptIDEData
Variable
p2104
(dp2105
g19
S'/** Previously used ShouldBypassSimulatedClientPhysics flag **/\nvar bool bPrevBypassSimulatedClientPhysics;\n'
p2106
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2107
sg1553
g95
sg1554
(lp2108
S'var'
p2109
aS'bool'
p2110
asg1536
S'bPrevBypassSimulatedClientPhysics'
p2111
sg31
I115
sba(iUnrealScriptIDEData
Variable
p2112
(dp2113
g19
S'// AI basics.\nenum EPathSearchType\n{\n\tPST_Default,\n\tPST_Breadth,\n\tPST_NewBestPathTo,\n\tPST_Constraint,\n};\nvar EPathSearchType\tPathSearchType;\n'
p2114
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2115
sg1553
g95
sg1554
(lp2116
S'var'
p2117
aS'EPathSearchType'
p2118
asg1536
S'PathSearchType'
p2119
sg31
I125
sba(iUnrealScriptIDEData
Variable
p2120
(dp2121
g19
S'/** List of search constraints for pathing */\nvar PathConstraint\t\tPathConstraintList;\n'
p2122
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2123
sg1553
g95
sg1554
(lp2124
S'var'
p2125
aS'PathConstraint'
p2126
asg1536
S'PathConstraintList'
p2127
sg31
I128
sba(iUnrealScriptIDEData
Variable
p2128
(dp2129
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2130
sg1553
g95
sg1554
(lp2131
S'var'
p2132
aS'PathGoalEvaluator'
p2133
asg1536
S'PathGoalList'
p2134
sg31
I129
sba(iUnrealScriptIDEData
Variable
p2135
(dp2136
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2137
sg1553
g95
sg1554
(lp2138
S'var'
p2139
aS'float'
p2140
asg1536
S'DesiredSpeed'
p2141
sg31
I131
sba(iUnrealScriptIDEData
Variable
p2142
(dp2143
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2144
sg1553
g95
sg1554
(lp2145
S'var'
p2146
aS'float'
p2147
asg1536
S'MaxDesiredSpeed'
p2148
sg31
I132
sba(iUnrealScriptIDEData
Variable
p2149
(dp2150
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2151
sg1553
S' max distance at which a makenoise(1.0) loudness sound can be heard'
p2152
sg1554
(lp2153
S'var(AI)'
p2154
aS'float'
p2155
asg1536
S'HearingThreshold'
p2156
sg31
I133
sba(iUnrealScriptIDEData
Variable
p2157
(dp2158
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2159
sg1553
S' -1 to 1 ->Used within specific states for varying reaction to stimuli'
p2160
sg1554
(lp2161
S'var(AI)'
p2162
aS'float'
p2163
asg1536
S'Alertness'
p2164
sg31
I134
sba(iUnrealScriptIDEData
Variable
p2165
(dp2166
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2167
sg1553
S' Maximum seeing distance.'
p2168
sg1554
(lp2169
S'var(AI)'
p2170
aS'float'
p2171
asg1536
S'SightRadius'
p2172
sg31
I135
sba(iUnrealScriptIDEData
Variable
p2173
(dp2174
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2175
sg1553
S' Cosine of limits of peripheral vision.'
p2176
sg1554
(lp2177
S'var(AI)'
p2178
aS'float'
p2179
asg1536
S'PeripheralVision'
p2180
sg31
I136
sba(iUnrealScriptIDEData
Variable
p2181
(dp2182
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2183
sg1553
S' Physics updating time monitoring (for AI monitoring reaching destinations)'
p2184
sg1554
(lp2185
S'var'
p2186
aS'const'
p2187
aS'float'
p2188
asg1536
S'AvgPhysicsTime'
p2189
sg31
I137
sba(iUnrealScriptIDEData
Variable
p2190
(dp2191
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2192
sg1553
S' Mass of this pawn.'
p2193
sg1554
(lp2194
S'var'
p2195
aS'float'
p2196
asg1536
S'Mass'
p2197
sg31
I138
sba(iUnrealScriptIDEData
Variable
p2198
(dp2199
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2200
sg1553
S' Water buoyancy. A ratio (1.0 = neutral buoyancy, 0.0 = no buoyancy)'
p2201
sg1554
(lp2202
S'var'
p2203
aS'float'
p2204
asg1536
S'Buoyancy'
p2205
sg31
I139
sba(iUnrealScriptIDEData
Variable
p2206
(dp2207
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2208
sg1553
S' Max range for melee attack (not including collision radii)'
p2209
sg1554
(lp2210
S'var'
p2211
aS'float'
p2212
asg1536
S'MeleeRange'
p2213
sg31
I140
sba(iUnrealScriptIDEData
Variable
p2214
(dp2215
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2216
sg1553
S' current nearest path;'
p2217
sg1554
(lp2218
S'var'
p2219
aS'const'
p2220
aS'NavigationPoint'
p2221
asg1536
S'Anchor'
p2222
sg31
I141
sba(iUnrealScriptIDEData
Variable
p2223
(dp2224
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2225
sg1553
S' Used to index into nav mesh polys'
p2226
sg1554
(lp2227
S'var'
p2228
aS'const'
p2229
aS'int'
p2230
asg1536
S'AnchorItem'
p2231
sg31
I142
sba(iUnrealScriptIDEData
Variable
p2232
(dp2233
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2234
sg1553
S' recent nearest path'
p2235
sg1554
(lp2236
S'var'
p2237
aS'const'
p2238
aS'NavigationPoint'
p2239
asg1536
S'LastAnchor'
p2240
sg31
I143
sba(iUnrealScriptIDEData
Variable
p2241
(dp2242
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2243
sg1553
S' last time a FindPath() attempt failed to find an anchor.'
p2244
sg1554
(lp2245
S'var'
p2246
aS'float'
p2247
asg1536
S'FindAnchorFailedTime'
p2248
sg31
I144
sba(iUnrealScriptIDEData
Variable
p2249
(dp2250
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2251
sg1553
S' last time a valid anchor was found'
p2252
sg1554
(lp2253
S'var'
p2254
aS'float'
p2255
asg1536
S'LastValidAnchorTime'
p2256
sg31
I145
sba(iUnrealScriptIDEData
Variable
p2257
(dp2258
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2259
sg1553
S' used to vary destination over NavigationPoints'
p2260
sg1554
(lp2261
S'var'
p2262
aS'float'
p2263
asg1536
S'DestinationOffset'
p2264
sg31
I146
sba(iUnrealScriptIDEData
Variable
p2265
(dp2266
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2267
sg1553
S' radius of next path in route'
p2268
sg1554
(lp2269
S'var'
p2270
aS'float'
p2271
asg1536
S'NextPathRadius'
p2272
sg31
I147
sba(iUnrealScriptIDEData
Variable
p2273
(dp2274
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2275
sg1553
S' serpentine direction'
p2276
sg1554
(lp2277
S'var'
p2278
aS'vector'
p2279
asg1536
S'SerpentineDir'
p2280
sg31
I148
sba(iUnrealScriptIDEData
Variable
p2281
(dp2282
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2283
sg1553
g95
sg1554
(lp2284
S'var'
p2285
aS'float'
p2286
asg1536
S'SerpentineDist'
p2287
sg31
I149
sba(iUnrealScriptIDEData
Variable
p2288
(dp2289
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2290
sg1553
S' how long to stay straight before strafing again'
p2291
sg1554
(lp2292
S'var'
p2293
aS'float'
p2294
asg1536
S'SerpentineTime'
p2295
sg31
I150
sba(iUnrealScriptIDEData
Variable
p2296
(dp2297
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2298
sg1553
S' worldinfo time when this pawn was spawned'
p2299
sg1554
(lp2300
S'var'
p2301
aS'float'
p2302
asg1536
S'SpawnTime'
p2303
sg31
I151
sba(iUnrealScriptIDEData
Variable
p2304
(dp2305
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2306
sg1553
S' limit on view pitching'
p2307
sg1554
(lp2308
S'var'
p2309
aS'int'
p2310
asg1536
S'MaxPitchLimit'
p2311
sg31
I152
sba(iUnrealScriptIDEData
Variable
p2312
(dp2313
g19
S'// Movement.\nvar\tbool\tbRunPhysicsWithNoController;\t// When there is no Controller, Walking Physics abort and force a velocity and acceleration of 0. Set this to TRUE to override.\n'
p2314
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2315
sg1553
S' When there is no Controller, Walking Physics abort and force a velocity and acceleration of 0. Set this to TRUE to override.'
p2316
sg1554
(lp2317
S'var'
p2318
aS'bool'
p2319
asg1536
S'bRunPhysicsWithNoController'
p2320
sg31
I155
sba(iUnrealScriptIDEData
Variable
p2321
(dp2322
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2323
sg1553
S' ignores Acceleration component, and forces max AccelRate to drive Pawn at full velocity.'
p2324
sg1554
(lp2325
S'var'
p2326
aS'bool'
p2327
asg1536
S'bForceMaxAccel'
p2328
sg31
I156
sba(iUnrealScriptIDEData
Variable
p2329
(dp2330
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2331
sg1553
S' The maximum ground speed.'
p2332
sg1554
(lp2333
S'var'
p2334
aS'float'
p2335
asg1536
S'GroundSpeed'
p2336
sg31
I157
sba(iUnrealScriptIDEData
Variable
p2337
(dp2338
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2339
sg1553
S' The maximum swimming speed.'
p2340
sg1554
(lp2341
S'var'
p2342
aS'float'
p2343
asg1536
S'WaterSpeed'
p2344
sg31
I158
sba(iUnrealScriptIDEData
Variable
p2345
(dp2346
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2347
sg1553
S' The maximum flying speed.'
p2348
sg1554
(lp2349
S'var'
p2350
aS'float'
p2351
asg1536
S'AirSpeed'
p2352
sg31
I159
sba(iUnrealScriptIDEData
Variable
p2353
(dp2354
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2355
sg1553
S' Ladder climbing speed'
p2356
sg1554
(lp2357
S'var'
p2358
aS'float'
p2359
asg1536
S'LadderSpeed'
p2360
sg31
I160
sba(iUnrealScriptIDEData
Variable
p2361
(dp2362
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2363
sg1553
S' max acceleration rate'
p2364
sg1554
(lp2365
S'var'
p2366
aS'float'
p2367
asg1536
S'AccelRate'
p2368
sg31
I161
sba(iUnrealScriptIDEData
Variable
p2369
(dp2370
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2371
sg1553
S' vertical acceleration w/ jump'
p2372
sg1554
(lp2373
S'var'
p2374
aS'float'
p2375
asg1536
S'JumpZ'
p2376
sg31
I162
sba(iUnrealScriptIDEData
Variable
p2377
(dp2378
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2379
sg1553
S' z velocity applied when pawn tries to get out of water */'
p2380
sg1554
(lp2381
S'var'
p2382
aS'float'
p2383
asg1536
S'OutofWaterZ'
p2384
sg31
I163
sba(iUnrealScriptIDEData
Variable
p2385
(dp2386
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2387
sg1553
S' Maximum step height for getting out of water */'
p2388
sg1554
(lp2389
S'var'
p2390
aS'float'
p2391
asg1536
S'MaxOutOfWaterStepHeight'
p2392
sg31
I164
sba(iUnrealScriptIDEData
Variable
p2393
(dp2394
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2395
sg1553
S' should acceleration be limited (by a factor of GroundSpeed and AirControl) when in PHYS_Falling?'
p2396
sg1554
(lp2397
S'var'
p2398
aS'bool'
p2399
asg1536
S'bLimitFallAccel'
p2400
sg31
I165
sba(iUnrealScriptIDEData
Variable
p2401
(dp2402
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2403
sg1553
S' amount of AirControl available to the pawn'
p2404
sg1554
(lp2405
S'var'
p2406
aS'float'
p2407
asg1536
S'AirControl'
p2408
sg31
I166
sba(iUnrealScriptIDEData
Variable
p2409
(dp2410
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2411
sg1553
S' pct. of running speed that walking speed is'
p2412
sg1554
(lp2413
S'var'
p2414
aS'float'
p2415
asg1536
S'WalkingPct'
p2416
sg31
I167
sba(iUnrealScriptIDEData
Variable
p2417
(dp2418
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2419
sg1553
S' a modifier that can be used to override the movement speed.'
p2420
sg1554
(lp2421
S'var'
p2422
aS'float'
p2423
asg1536
S'MovementSpeedModifier'
p2424
sg31
I168
sba(iUnrealScriptIDEData
Variable
p2425
(dp2426
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2427
sg1553
S' pct. of running speed that crouched walking speed is'
p2428
sg1554
(lp2429
S'var'
p2430
aS'float'
p2431
asg1536
S'CrouchedPct'
p2432
sg31
I169
sba(iUnrealScriptIDEData
Variable
p2433
(dp2434
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2435
sg1553
S' max speed pawn can land without taking damage'
p2436
sg1554
(lp2437
S'var'
p2438
aS'float'
p2439
asg1536
S'MaxFallSpeed'
p2440
sg31
I170
sba(iUnrealScriptIDEData
Variable
p2441
(dp2442
g19
S'/** AI will take paths that require a landing velocity less than (MaxFallSpeed * AIMaxFallSpeedFactor) */\nvar float AIMaxFallSpeedFactor;\n'
p2443
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2444
sg1553
g95
sg1554
(lp2445
S'var'
p2446
aS'float'
p2447
asg1536
S'AIMaxFallSpeedFactor'
p2448
sg31
I173
sba(iUnrealScriptIDEData
Variable
p2449
(dp2450
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2451
sg1553
S' Base eye height above collision center.'
p2452
sg1554
(lp2453
S'var(Camera)'
p2454
aS'float'
p2455
asg1536
S'BaseEyeHeight'
p2456
sg31
I175
sba(iUnrealScriptIDEData
Variable
p2457
(dp2458
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2459
sg1553
S' Current eye height, adjusted for bobbing and stairs.'
p2460
sg1554
(lp2461
S'var(Camera)'
p2462
aS'float'
p2463
asg1536
S'EyeHeight'
p2464
sg31
I176
sba(iUnrealScriptIDEData
Variable
p2465
(dp2466
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2467
sg1553
S' Normal of floor pawn is standing on (only used by PHYS_Spider and PHYS_Walking)'
p2468
sg1554
(lp2469
S'var'
p2470
aS'vector'
p2471
asg1536
S'Floor'
p2472
sg31
I177
sba(iUnrealScriptIDEData
Variable
p2473
(dp2474
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2475
sg1553
S' time of last splash'
p2476
sg1554
(lp2477
S'var'
p2478
aS'float'
p2479
asg1536
S'SplashTime'
p2480
sg31
I178
sba(iUnrealScriptIDEData
Variable
p2481
(dp2482
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2483
sg1553
S' physics volume of head'
p2484
sg1554
(lp2485
S'var'
p2486
aS'transient'
p2487
aS'PhysicsVolume'
p2488
asg1536
S'HeadVolume'
p2489
sg31
I179
sba(iUnrealScriptIDEData
Variable
p2490
(dp2491
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2492
sg1553
S' amount of health this Pawn has */'
p2493
sg1554
(lp2494
S'var()'
p2495
aS'int'
p2496
asg1536
S'Health'
p2497
sg31
I180
sba(iUnrealScriptIDEData
Variable
p2498
(dp2499
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2500
sg1553
S' normal maximum health of Pawn - defaults to default.Health unless explicitly set otherwise */'
p2501
sg1554
(lp2502
S'var()'
p2503
aS'int'
p2504
asg1536
S'HealthMax'
p2505
sg31
I181
sba(iUnrealScriptIDEData
Variable
p2506
(dp2507
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2508
sg1553
S" if true, replicate this Pawn's health to all clients; otherwise, only if owned by or ViewTarget of a client */"
p2509
sg1554
(lp2510
S'var'
p2511
aS'bool'
p2512
asg1536
S'bReplicateHealthToAll'
p2513
sg31
I182
sba(iUnrealScriptIDEData
Variable
p2514
(dp2515
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2516
sg1553
S' used for getting BreathTimer() messages (for no air, etc.)'
p2517
sg1554
(lp2518
S'var'
p2519
aS'float'
p2520
asg1536
S'BreathTime'
p2521
sg31
I183
sba(iUnrealScriptIDEData
Variable
p2522
(dp2523
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2524
sg1553
S' how much time pawn can go without air (in seconds)'
p2525
sg1554
(lp2526
S'var'
p2527
aS'float'
p2528
asg1536
S'UnderWaterTime'
p2529
sg31
I184
sba(iUnrealScriptIDEData
Variable
p2530
(dp2531
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2532
sg1553
S' last time pawn played a takehit animation (updated in PlayHit())'
p2533
sg1554
(lp2534
S'var'
p2535
aS'float'
p2536
asg1536
S'LastPainTime'
p2537
sg31
I185
sba(iUnrealScriptIDEData
Variable
p2538
(dp2539
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2540
sg1553
g95
sg1554
(lp2541
S'var'
p2542
aS'float'
p2543
asg1536
S'KismetDeathDelayTime'
p2544
sg31
I186
sba(iUnrealScriptIDEData
Variable
p2545
(dp2546
g19
S"/** RootMotion derived velocity calculated by APawn::CalcVelocity() (used when replaying client moves in net games (since can't rely on animation when replaying moves)) */\nvar vector RMVelocity;\n"
p2547
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2548
sg1553
g95
sg1554
(lp2549
S'var'
p2550
aS'vector'
p2551
asg1536
S'RMVelocity'
p2552
sg31
I189
sba(iUnrealScriptIDEData
Variable
p2553
(dp2554
g19
S'/** this flag forces APawn::CalcVelocity() to just use RMVelocity directly */\nvar bool bForceRMVelocity;\n'
p2555
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2556
sg1553
g95
sg1554
(lp2557
S'var'
p2558
aS'bool'
p2559
asg1536
S'bForceRMVelocity'
p2560
sg31
I192
sba(iUnrealScriptIDEData
Variable
p2561
(dp2562
g19
S'/** this flag forces APawn::CalcVelocity() to never use root motion derived velocity */\nvar bool bForceRegularVelocity;\n'
p2563
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2564
sg1553
g95
sg1554
(lp2565
S'var'
p2566
aS'bool'
p2567
asg1536
S'bForceRegularVelocity'
p2568
sg31
I195
sba(iUnrealScriptIDEData
Variable
p2569
(dp2570
g19
S'// Sound and noise management\n// remember location and position of last noises propagated\nvar const\tvector\t\tnoise1spot;\n'
p2571
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2572
sg1553
g95
sg1554
(lp2573
S'var'
p2574
aS'const'
p2575
aS'vector'
p2576
asg1536
S'noise1spot'
p2577
sg31
I199
sba(iUnrealScriptIDEData
Variable
p2578
(dp2579
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2580
sg1553
g95
sg1554
(lp2581
S'var'
p2582
aS'const'
p2583
aS'float'
p2584
asg1536
S'noise1time'
p2585
sg31
I200
sba(iUnrealScriptIDEData
Variable
p2586
(dp2587
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2588
sg1553
g95
sg1554
(lp2589
S'var'
p2590
aS'const'
p2591
aS'pawn'
p2592
asg1536
S'noise1other'
p2593
sg31
I201
sba(iUnrealScriptIDEData
Variable
p2594
(dp2595
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2596
sg1553
g95
sg1554
(lp2597
S'var'
p2598
aS'const'
p2599
aS'float'
p2600
asg1536
S'noise1loudness'
p2601
sg31
I202
sba(iUnrealScriptIDEData
Variable
p2602
(dp2603
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2604
sg1553
g95
sg1554
(lp2605
S'var'
p2606
aS'const'
p2607
aS'vector'
p2608
asg1536
S'noise2spot'
p2609
sg31
I203
sba(iUnrealScriptIDEData
Variable
p2610
(dp2611
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2612
sg1553
g95
sg1554
(lp2613
S'var'
p2614
aS'const'
p2615
aS'float'
p2616
asg1536
S'noise2time'
p2617
sg31
I204
sba(iUnrealScriptIDEData
Variable
p2618
(dp2619
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2620
sg1553
g95
sg1554
(lp2621
S'var'
p2622
aS'const'
p2623
aS'pawn'
p2624
asg1536
S'noise2other'
p2625
sg31
I205
sba(iUnrealScriptIDEData
Variable
p2626
(dp2627
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2628
sg1553
g95
sg1554
(lp2629
S'var'
p2630
aS'const'
p2631
aS'float'
p2632
asg1536
S'noise2loudness'
p2633
sg31
I206
sba(iUnrealScriptIDEData
Variable
p2634
(dp2635
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2636
sg1553
g95
sg1554
(lp2637
S'var'
p2638
aS'float'
p2639
asg1536
S'SoundDampening'
p2640
sg31
I208
sba(iUnrealScriptIDEData
Variable
p2641
(dp2642
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2643
sg1553
g95
sg1554
(lp2644
S'var'
p2645
aS'float'
p2646
asg1536
S'DamageScaling'
p2647
sg31
I209
sba(iUnrealScriptIDEData
Variable
p2648
(dp2649
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2650
sg1553
S' Name used for this pawn type in menus (e.g. player selection)'
p2651
sg1554
(lp2652
S'var'
p2653
aS'localized'
p2654
aS'string'
p2655
asg1536
S'MenuName'
p2656
sg31
I211
sba(iUnrealScriptIDEData
Variable
p2657
(dp2658
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2659
sg1553
S' default class to use when pawn is controlled by AI'
p2660
sg1554
(lp2661
S'var'
p2662
aS'class<AIController>'
p2663
asg1536
S'ControllerClass'
p2664
sg31
I213
sba(iUnrealScriptIDEData
Variable
p2665
(dp2666
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2667
sg1553
g95
sg1554
(lp2668
S'var'
p2669
aS'editinline'
p2670
aS'RepNotify'
p2671
aS'PlayerReplicationInfo'
p2672
asg1536
S'PlayerReplicationInfo'
p2673
sg31
I215
sba(iUnrealScriptIDEData
Variable
p2674
(dp2675
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2676
sg1553
S' ladder currently being climbed'
p2677
sg1554
(lp2678
S'var'
p2679
aS'LadderVolume'
p2680
asg1536
S'OnLadder'
p2681
sg31
I217
sba(iUnrealScriptIDEData
Variable
p2682
(dp2683
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2684
sg1553
S' PlayerControllerState to use when moving on land or air'
p2685
sg1554
(lp2686
S'var'
p2687
aS'name'
p2688
asg1536
S'LandMovementState'
p2689
sg31
I219
sba(iUnrealScriptIDEData
Variable
p2690
(dp2691
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2692
sg1553
S' PlayerControllerState to use when moving in water'
p2693
sg1554
(lp2694
S'var'
p2695
aS'name'
p2696
asg1536
S'WaterMovementState'
p2697
sg31
I220
sba(iUnrealScriptIDEData
Variable
p2698
(dp2699
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2700
sg1553
S' used to avoid spawn camping'
p2701
sg1554
(lp2702
S'var'
p2703
aS'PlayerStart'
p2704
asg1536
S'LastStartSpot'
p2705
sg31
I222
sba(iUnrealScriptIDEData
Variable
p2706
(dp2707
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2708
sg1553
g95
sg1554
(lp2709
S'var'
p2710
aS'float'
p2711
asg1536
S'LastStartTime'
p2712
sg31
I223
sba(iUnrealScriptIDEData
Variable
p2713
(dp2714
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2715
sg1553
S' location of last hit (for playing hit/death anims)'
p2716
sg1554
(lp2717
S'var'
p2718
aS'vector'
p2719
asg1536
S'TakeHitLocation'
p2720
sg31
I225
sba(iUnrealScriptIDEData
Variable
p2721
(dp2722
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2723
sg1553
S' damage type of last hit (for playing hit/death anims)'
p2724
sg1554
(lp2725
S'var'
p2726
aS'class<DamageType>'
p2727
asg1536
S'HitDamageType'
p2728
sg31
I226
sba(iUnrealScriptIDEData
Variable
p2729
(dp2730
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2731
sg1553
S' momentum to apply when torn off (bTearOff == true)'
p2732
sg1554
(lp2733
S'var'
p2734
aS'vector'
p2735
asg1536
S'TearOffMomentum'
p2736
sg31
I227
sba(iUnrealScriptIDEData
Variable
p2737
(dp2738
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2739
sg1553
S' set when death animation has been played (used in network games)'
p2740
sg1554
(lp2741
S'var'
p2742
aS'bool'
p2743
asg1536
S'bPlayedDeath'
p2744
sg31
I228
sba(iUnrealScriptIDEData
Variable
p2745
(dp2746
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2747
sg1553
g95
sg1554
(lp2748
S'var()'
p2749
aS'SkeletalMeshComponent'
p2750
asg1536
S'Mesh'
p2751
sg31
I230
sba(iUnrealScriptIDEData
Variable
p2752
(dp2753
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2754
sg1553
g95
sg1554
(lp2755
S'var'
p2756
aS'CylinderComponent'
p2757
asg1536
S'CylinderComponent'
p2758
sg31
I232
sba(iUnrealScriptIDEData
Variable
p2759
(dp2760
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2761
sg1553
S' Unreal units'
p2762
sg1554
(lp2763
S'var()'
p2764
aS'float'
p2765
asg1536
S'RBPushRadius'
p2766
sg31
I234
sba(iUnrealScriptIDEData
Variable
p2767
(dp2768
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2769
sg1553
g95
sg1554
(lp2770
S'var()'
p2771
aS'float'
p2772
asg1536
S'RBPushStrength'
p2773
sg31
I235
sba(iUnrealScriptIDEData
Variable
p2774
(dp2775
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2776
sg1553
g95
sg1554
(lp2777
S'var'
p2778
aS'repnotify'
p2779
aS'Vehicle'
p2780
asg1536
S'DrivenVehicle'
p2781
sg31
I237
sba(iUnrealScriptIDEData
Variable
p2782
(dp2783
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2784
sg1553
S' always relevant to other clients if closer than this distance to viewer, and have controller'
p2785
sg1554
(lp2786
S'var'
p2787
aS'float'
p2788
asg1536
S'AlwaysRelevantDistanceSquared'
p2789
sg31
I239
sba(iUnrealScriptIDEData
Variable
p2790
(dp2791
g19
S'/** replicated to we can see where remote clients are looking */\nvar\t\tconst\tbyte\tRemoteViewPitch;\n'
p2792
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2793
sg1553
g95
sg1554
(lp2794
S'var'
p2795
aS'const'
p2796
aS'byte'
p2797
asg1536
S'RemoteViewPitch'
p2798
sg31
I242
sba(iUnrealScriptIDEData
Variable
p2799
(dp2800
g19
S'/** Radius that is checked for nearby vehicles when pressing use */\nvar() float\tVehicleCheckRadius;\n'
p2801
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2802
sg1553
g95
sg1554
(lp2803
S'var()'
p2804
aS'float'
p2805
asg1536
S'VehicleCheckRadius'
p2806
sg31
I245
sba(iUnrealScriptIDEData
Variable
p2807
(dp2808
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2809
sg1553
S'give kill credit to this guy if hit momentum causes pawn to fall to his death'
p2810
sg1554
(lp2811
S'var'
p2812
aS'Controller'
p2813
asg1536
S'LastHitBy'
p2814
sg31
I247
sba(iUnrealScriptIDEData
Variable
p2815
(dp2816
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2817
sg1553
g95
sg1554
(lp2818
S'var()'
p2819
aS'float'
p2820
asg1536
S'ViewPitchMin'
p2821
sg31
I249
sba(iUnrealScriptIDEData
Variable
p2822
(dp2823
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2824
sg1553
g95
sg1554
(lp2825
S'var()'
p2826
aS'float'
p2827
asg1536
S'ViewPitchMax'
p2828
sg31
I250
sba(iUnrealScriptIDEData
Variable
p2829
(dp2830
g19
S"/** Max difference between pawn's Rotation.Yaw and DesiredRotation.Yaw for pawn to be considered as having reached its desired rotation */\nvar\t\tint\t\tAllowedYawError;\n"
p2831
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2832
sg1553
g95
sg1554
(lp2833
S'var'
p2834
aS'int'
p2835
asg1536
S'AllowedYawError'
p2836
sg31
I253
sba(iUnrealScriptIDEData
Variable
p2837
(dp2838
g19
S'/** In future I will uncomment this change. Currently Actor has the variable.**/\nvar(Movement)\tconst rotator     DesiredRotation;\n'
p2839
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2840
sg1553
g95
sg1554
(lp2841
S'var(Movement)'
p2842
aS'const'
p2843
aS'rotator'
p2844
asg1536
S'DesiredRotation'
p2845
sg31
I256
sba(iUnrealScriptIDEData
Variable
p2846
(dp2847
g19
S"/** DesiredRotation is set by somebody - Pawn's default behavior (using direction for desiredrotation) does not work **/\nvar\t\t\t\tconst private{private} bool\t\tbDesiredRotationSet;\n"
p2848
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2849
sg1553
g95
sg1554
(lp2850
S'var'
p2851
aS'const'
p2852
aS'private{private}'
p2853
aS'bool'
p2854
asg1536
S'bDesiredRotationSet'
p2855
sg31
I258
sba(iUnrealScriptIDEData
Variable
p2856
(dp2857
g19
S'/** Do not overwrite current DesiredRotation **/\nvar\t\t\t\tconst private{private} bool\t\tbLockDesiredRotation;\n'
p2858
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2859
sg1553
g95
sg1554
(lp2860
S'var'
p2861
aS'const'
p2862
aS'private{private}'
p2863
aS'bool'
p2864
asg1536
S'bLockDesiredRotation'
p2865
sg31
I260
sba(iUnrealScriptIDEData
Variable
p2866
(dp2867
g19
S'/** Unlock DesiredRotation when Reached to the destination\n  * This is used when bLockDesiredRotation=TRUE\n  * This will set bLockDesiredRotation = FALSE when reached to DesiredRotation\n  */\nvar\t\t\t\tconst private{private} bool\t\tbUnlockWhenReached;\n'
p2868
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2869
sg1553
g95
sg1554
(lp2870
S'var'
p2871
aS'const'
p2872
aS'private{private}'
p2873
aS'bool'
p2874
asg1536
S'bUnlockWhenReached'
p2875
sg31
I265
sba(iUnrealScriptIDEData
Variable
p2876
(dp2877
g19
S'/** Inventory Manager */\nvar class<InventoryManager>\t\tInventoryManagerClass;\n'
p2878
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2879
sg1553
g95
sg1554
(lp2880
S'var'
p2881
aS'class<InventoryManager>'
p2882
asg1536
S'InventoryManagerClass'
p2883
sg31
I267
sba(iUnrealScriptIDEData
Variable
p2884
(dp2885
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2886
sg1553
g95
sg1554
(lp2887
S'var'
p2888
aS'repnotify'
p2889
aS'InventoryManager'
p2890
asg1536
S'InvManager'
p2891
sg31
I268
sba(iUnrealScriptIDEData
Variable
p2892
(dp2893
g19
S'/** Weapon currently held by Pawn */\nvar\t\tWeapon\t\t\t\t\tWeapon;\n'
p2894
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2895
sg1553
g95
sg1554
(lp2896
S'var'
p2897
aS'Weapon'
p2898
asg1536
S'Weapon'
p2899
sg31
I271
sba(iUnrealScriptIDEData
Variable
p2900
(dp2901
g19
S'/** Hit Location of instant hit weapons. vect(0,0,0) = not firing. */\nvar repnotify\tvector\tFlashLocation;\n'
p2902
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2903
sg1553
g95
sg1554
(lp2904
S'var'
p2905
aS'repnotify'
p2906
aS'vector'
p2907
asg1536
S'FlashLocation'
p2908
sg31
I280
sba(iUnrealScriptIDEData
Variable
p2909
(dp2910
g19
S'/** last FlashLocation that was an actual shot, i.e. not counting clears to (0,0,0)\n * this is used to make sure we set unique values to FlashLocation for consecutive shots even when there was a clear in between,\n * so that if a client missed the clear due to low net update rate, it still gets the new firing location\n */\nvar vector LastFiringFlashLocation;\n'
p2911
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2912
sg1553
g95
sg1554
(lp2913
S'var'
p2914
aS'vector'
p2915
asg1536
S'LastFiringFlashLocation'
p2916
sg31
I285
sba(iUnrealScriptIDEData
Variable
p2917
(dp2918
g19
S'/** increased when weapon fires. 0 = not firing. 1 - 255 = firing */\nvar repnotify\tbyte\tFlashCount;\n'
p2919
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2920
sg1553
g95
sg1554
(lp2921
S'var'
p2922
aS'repnotify'
p2923
aS'byte'
p2924
asg1536
S'FlashCount'
p2925
sg31
I287
sba(iUnrealScriptIDEData
Variable
p2926
(dp2927
g19
S'/** firing mode used when firing */\nvar\trepnotify\tbyte\tFiringMode;\n'
p2928
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2929
sg1553
g95
sg1554
(lp2930
S'var'
p2931
aS'repnotify'
p2932
aS'byte'
p2933
asg1536
S'FiringMode'
p2934
sg31
I289
sba(iUnrealScriptIDEData
Variable
p2935
(dp2936
g19
S"/** tracks the number of consecutive shots. Note that this is not replicated, so it's not correct on remote clients. It's only updated when the pawn is relevant. */\nvar\t\t\t\tint\t\tShotCount;\n"
p2937
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2938
sg1553
g95
sg1554
(lp2939
S'var'
p2940
aS'int'
p2941
asg1536
S'ShotCount'
p2942
sg31
I291
sba(iUnrealScriptIDEData
Variable
p2943
(dp2944
g19
S'/** set in InitRagdoll() to old CollisionComponent (since it must be Mesh for ragdolls) so that TermRagdoll() can restore it */\nvar PrimitiveComponent PreRagdollCollisionComponent;\n'
p2945
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2946
sg1553
g95
sg1554
(lp2947
S'var'
p2948
aS'PrimitiveComponent'
p2949
asg1536
S'PreRagdollCollisionComponent'
p2950
sg31
I294
sba(iUnrealScriptIDEData
Variable
p2951
(dp2952
g19
S'/** Physics object created to create contacts with physics objects, used to push them around. */\nvar\tRB_BodyInstance\t\tPhysicsPushBody;\n'
p2953
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2954
sg1553
g95
sg1554
(lp2955
S'var'
p2956
aS'RB_BodyInstance'
p2957
asg1536
S'PhysicsPushBody'
p2958
sg31
I297
sba(iUnrealScriptIDEData
Variable
p2959
(dp2960
g19
S'/** @HACK: count of times processLanded() was called but it failed without changing physics for some reason\n * so we can detect and avoid a rare case where Pawns get stuck in that state\n */\nvar int FailedLandingCount;\n'
p2961
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2962
sg1553
g95
sg1554
(lp2963
S'var'
p2964
aS'int'
p2965
asg1536
S'FailedLandingCount'
p2966
sg31
I302
sba(iUnrealScriptIDEData
Variable
p2967
(dp2968
g19
S'/** Controls whether the pawn needs the base ticked before this one can be ticked */\nvar bool bNeedsBaseTickedFirst;\n'
p2969
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2970
sg1553
g95
sg1554
(lp2971
S'var'
p2972
aS'bool'
p2973
asg1536
S'bNeedsBaseTickedFirst'
p2974
sg31
I305
sba(iUnrealScriptIDEData
Variable
p2975
(dp2976
g19
S'/** Array of Slots */\nvar transient Array<AnimNodeSlot>\tSlotNodes;\n'
p2977
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2978
sg1553
g95
sg1554
(lp2979
S'var'
p2980
aS'transient'
p2981
aS'Array<AnimNodeSlot>'
p2982
asg1536
S'SlotNodes'
p2983
sg31
I308
sba(iUnrealScriptIDEData
Variable
p2984
(dp2985
g19
S'/** List of Matinee InterpGroup controlling this actor. */\nvar transient Array<InterpGroup>\tInterpGroupList;\n'
p2986
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2987
sg1553
g95
sg1554
(lp2988
S'var'
p2989
aS'transient'
p2990
aS'Array<InterpGroup>'
p2991
asg1536
S'InterpGroupList'
p2992
sg31
I310
sba(iUnrealScriptIDEData
Variable
p2993
(dp2994
g19
S'/** AudioComponent used by FaceFX */\nvar\ttransient protected AudioComponent\t\t\t\tFacialAudioComp;\n'
p2995
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p2996
sg1553
g95
sg1554
(lp2997
S'var'
p2998
aS'transient'
p2999
aS'protected'
p3000
aS'AudioComponent'
p3001
asg1536
S'FacialAudioComp'
p3002
sg31
I313
sba(iUnrealScriptIDEData
Variable
p3003
(dp3004
g19
S'/** General material used to control common pawn material parameters (e.g. burning) */\nvar protected transient MaterialInstanceConstant MIC_PawnMat;\n'
p3005
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3006
sg1553
g95
sg1554
(lp3007
S'var'
p3008
aS'protected'
p3009
aS'transient'
p3010
aS'MaterialInstanceConstant'
p3011
asg1536
S'MIC_PawnMat'
p3012
sg31
I316
sba(iUnrealScriptIDEData
Variable
p3013
(dp3014
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3015
sg1553
g95
sg1554
(lp3016
S'var'
p3017
aS'protected'
p3018
aS'transient'
p3019
aS'MaterialInstanceConstant'
p3020
asg1536
S'MIC_PawnHair'
p3021
sg31
I317
sba(iUnrealScriptIDEData
Variable
p3022
(dp3023
g19
S'/** If TRUE, translation of mesh is updated to match desired floor translation (0 unless special move desired floor conforming) */\nvar transient repnotify bool\t\tbUsedByMatinee;\n'
p3024
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3025
sg1553
g95
sg1554
(lp3026
S'var'
p3027
aS'transient'
p3028
aS'repnotify'
p3029
aS'bool'
p3030
asg1536
S'bUsedByMatinee'
p3031
sg31
I320
sba(iUnrealScriptIDEData
Variable
p3032
(dp3033
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3034
sg1553
g95
sg1554
(lp3035
S'var()'
p3036
aS'Array<ScalarParameterInterpStruct>'
p3037
asg1536
S'ScalarParameterInterpArray'
p3038
sg31
I333
sba(iUnrealScriptIDEData
Variable
p3039
(dp3040
g19
S"/** NOTE: Currently assumes blending isn't altering the root bone */\nvar bool\t\t\t\t\tbRootMotionFromInterpCurve;\n"
p3041
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3042
sg1553
g95
sg1554
(lp3043
S'var'
p3044
aS'bool'
p3045
asg1536
S'bRootMotionFromInterpCurve'
p3046
sg31
I337
sba(iUnrealScriptIDEData
Variable
p3047
(dp3048
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3049
sg1553
g95
sg1554
(lp3050
S'var'
p3051
aS'RootMotionCurve'
p3052
asg1536
S'RootMotionInterpCurve'
p3053
sg31
I338
sba(iUnrealScriptIDEData
Variable
p3054
(dp3055
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3056
sg1553
g95
sg1554
(lp3057
S'var'
p3058
aS'float'
p3059
asg1536
S'RootMotionInterpRate'
p3060
sg31
I339
sba(iUnrealScriptIDEData
Variable
p3061
(dp3062
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3063
sg1553
g95
sg1554
(lp3064
S'var'
p3065
aS'float'
p3066
asg1536
S'RootMotionInterpCurrentTime'
p3067
sg31
I340
sba(iUnrealScriptIDEData
Variable
p3068
(dp3069
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3070
sg1553
g95
sg1554
(lp3071
S'var'
p3072
aS'Vector'
p3073
asg1536
S'RootMotionInterpCurveLastValue'
p3074
sg31
I341
sba(iUnrealScriptIDEData
Variable
p3075
(dp3076
g19
S'//debug\nvar(Debug) bool bDebugShowCameraLocation;\n'
p3077
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3078
sg1553
g95
sg1554
(lp3079
S'var(Debug)'
p3080
aS'bool'
p3081
asg1536
S'bDebugShowCameraLocation'
p3082
sg31
I344
sba(iUnrealScriptIDEData
Variable
p3083
(dp3084
g19
S"/** \n *  Set this to TRUE if riding on a moving base that you know is clear from non-moving world obstructions.\n *  This can solve move-order dependencies when riding a mover, and it's faster.\n */\nvar() bool bFastAttachedMove;\n"
p3085
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPawn.uc
p3086
sg1553
g95
sg1554
(lp3087
S'var()'
p3088
aS'bool'
p3089
asg1536
S'bFastAttachedMove'
p3090
sg31
I350
sbasbsS'_collector_reference'
p3091
g12
sS'_b_was_parsed'
p3092
I01
sS'_description'
p3093
S' /* Victor Macho\n    Clase PAWN del Objeto Calabaza\nDefine Modelo - Animaciones - Afecta Luz o no\n */\n\nclass CalabazaPawn extends Pawn\n'
p3094
sS'_functions'
p3095
(lp3096
(iUnrealScriptIDEData
Function
p3097
(dp3098
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaPawn.uc
p3099
sg23
g95
sg25
g95
sg27
S'simulated'
p3100
sg29
S'PostBeginPlay'
p3101
sg31
I14
sg32
I00
sba(iUnrealScriptIDEData
Function
p3102
(dp3103
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaPawn.uc
p3104
sg23
S'float DeltaTime'
p3105
sg25
g95
sg27
g95
sg29
S'Tick'
p3106
sg31
I19
sg32
I00
sba(iUnrealScriptIDEData
Function
p3107
(dp3108
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaPawn.uc
p3109
sg23
S'Actor Other, PrimitiveComponent OtherComp, vector HitLocation, vector HitNormal'
p3110
sg25
g95
sg27
g95
sg29
S'Touch'
p3111
sg31
I36
sg32
I00
sbasS'_parent_class_name'
p3112
S'pawn'
p3113
sS'_file_name'
p3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaPawn.uc
p3115
sS'_child_classes'
p3116
(lp3117
sS'_name'
p3118
VcalabazaPawn
p3119
sS'_consts'
p3120
(lp3121
sS'_structs'
p3122
(lp3123
sS'_variables'
p3124
(lp3125
(iUnrealScriptIDEData
Variable
p3126
(dp3127
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaPawn.uc
p3128
sg1553
g95
sg1554
(lp3129
S'var'
p3130
aS'(calabaza)'
p3131
aS'int'
p3132
asg1536
S'life'
p3133
sg31
I9
sba(iUnrealScriptIDEData
Variable
p3134
(dp3135
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaPawn.uc
p3136
sg1553
g95
sg1554
(lp3137
S'var'
p3138
aS'(calabaza)'
p3139
aS'int'
p3140
asg1536
S'speed'
p3141
sg31
I10
sba(iUnrealScriptIDEData
Variable
p3142
(dp3143
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaPawn.uc
p3144
sg1553
g95
sg1554
(lp3145
S'var'
p3146
aS'(calabaza)'
p3147
aS'int'
p3148
asg1536
S'speedRotator'
p3149
sg31
I11
sba(iUnrealScriptIDEData
Variable
p3150
(dp3151
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaPawn.uc
p3152
sg1553
g95
sg1554
(lp3153
S'var'
p3154
aS'(calabaza)'
p3155
aS'float'
p3156
asg1536
S'amplitude'
p3157
sg31
I12
sbasba(iUnrealScriptIDEData
ClassReference
p3158
(dp3159
g3
Nsg3091
g12
sg3092
I00
sg3093
S'class EsnePlayerInput extends PlayerInput\n'
p3160
sg3095
(lp3161
sg3112
S'playerinput'
p3162
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cEsnePlayerInput.uc
p3163
sg3116
(lp3164
sg3118
VEsnePlayerInput
p3165
sg3120
(lp3166
sg3122
(lp3167
sg3124
(lp3168
sba(iUnrealScriptIDEData
ClassReference
p3169
(dp3170
g3
Nsg3091
g12
sg3092
I01
sg3093
S'class Compass extends actor \n'
p3171
sg3095
(lp3172
(iUnrealScriptIDEData
Function
p3173
(dp3174
g19
S'// Return the yaw of the actor\nfunction int GetYaw()\n'
p3175
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cCompass.uc
p3176
sg23
g95
sg25
S'int'
p3177
sg27
g95
sg29
S'GetYaw'
p3178
sg31
I5
sg32
I01
sba(iUnrealScriptIDEData
Function
p3179
(dp3180
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cCompass.uc
p3181
sg23
g95
sg25
S'Rotator'
p3182
sg27
g95
sg29
S'GetRotator'
p3183
sg31
I10
sg32
I01
sba(iUnrealScriptIDEData
Function
p3184
(dp3185
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cCompass.uc
p3186
sg23
g95
sg25
S'vector'
p3187
sg27
g95
sg29
S'GetVectorizedRotator'
p3188
sg31
I15
sg32
I01
sba(iUnrealScriptIDEData
Function
p3189
(dp3190
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cCompass.uc
p3191
sg23
g95
sg25
S'float'
p3192
sg27
g95
sg29
S'GetRadianHeading'
p3193
sg31
I20
sg32
I01
sba(iUnrealScriptIDEData
Function
p3194
(dp3195
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cCompass.uc
p3196
sg23
g95
sg25
S'float'
p3197
sg27
g95
sg29
S'GetDegreeHeading'
p3198
sg31
I36
sg32
I01
sba(iUnrealScriptIDEData
Function
p3199
(dp3200
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cCompass.uc
p3201
sg23
g95
sg25
g95
sg27
g95
sg29
S'PostBeginPlay'
p3202
sg31
I47
sg32
I00
sbasg3112
S'actor'
p3203
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cCompass.uc
p3204
sg3116
(lp3205
(iUnrealScriptIDEData
ClassReference
p3206
(dp3207
g3
g3169
sg3091
g12
sg3092
I00
sg3093
S'class MU_Minimap extends Compass;\n'
p3208
sg3095
(lp3209
sg3112
S'compass'
p3210
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMU_Minimap.uc
p3211
sg3116
(lp3212
sg3118
VMU_Minimap
p3213
sg3120
(lp3214
sg3122
(lp3215
sg3124
(lp3216
sbasg3118
VCompass
p3217
sg3120
(lp3218
sg3122
(lp3219
sg3124
(lp3220
sba(iUnrealScriptIDEData
ClassReference
p3221
(dp3222
g3
Nsg3091
g12
sg3092
I01
sg3093
S'class GatoBot extends AIController;\n'
p3223
sg3095
(lp3224
(iUnrealScriptIDEData
Function
p3225
(dp3226
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoBot.uc
p3227
sg23
S'Pawn inPawn, bool bVehicleTransition'
p3228
sg25
g95
sg27
g95
sg29
S'Possess'
p3229
sg31
I7
sg32
I00
sba(iUnrealScriptIDEData
Function
p3230
(dp3231
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoBot.uc
p3232
sg23
S'Pawn Seen'
p3233
sg25
g95
sg27
g95
sg29
S'SeePlayer'
p3234
sg31
I14
sg32
I00
sba(iUnrealScriptIDEData
Function
p3235
(dp3236
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoBot.uc
p3237
sg23
g95
sg25
S'bool'
p3238
sg27
g95
sg29
S'FindNavMeshPath'
p3239
sg31
I27
sg32
I01
sbasg3112
S'aicontroller'
p3240
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoBot.uc
p3241
sg3116
(lp3242
sg3118
VGatoBot
p3243
sg3120
(lp3244
sg3122
(lp3245
sg3124
(lp3246
(iUnrealScriptIDEData
Variable
p3247
(dp3248
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoBot.uc
p3249
sg1553
g95
sg1554
(lp3250
S'var'
p3251
aS'Actor'
p3252
asg1536
S'target'
p3253
sg31
I3
sba(iUnrealScriptIDEData
Variable
p3254
(dp3255
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoBot.uc
p3256
sg1553
g95
sg1554
(lp3257
S'var()'
p3258
aS'Vector'
p3259
asg1536
S'TempDest'
p3260
sg31
I4
sba(iUnrealScriptIDEData
Variable
p3261
(dp3262
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoBot.uc
p3263
sg1553
g95
sg1554
(lp3264
S'var'
p3265
aS'int'
p3266
asg1536
S'distanceFollow'
p3267
sg31
I5
sbasba(iUnrealScriptIDEData
ClassReference
p3268
(dp3269
g3
Nsg3091
g12
sg3092
I01
sg3093
S' /* Victor Macho\n    Clase PAWN del Gato\nDefine Modelo - Animaciones - Afecta Luz o no\n */\n\nclass GatoPawn extends Pawn\n'
p3270
sg3095
(lp3271
(iUnrealScriptIDEData
Function
p3272
(dp3273
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoPawn.uc
p3274
sg23
g95
sg25
g95
sg27
g95
sg29
S'AddDefaultInventory'
p3275
sg31
I12
sg32
I01
sba(iUnrealScriptIDEData
Function
p3276
(dp3277
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoPawn.uc
p3278
sg23
g95
sg25
g95
sg27
S'simulated'
p3279
sg29
S'PostBeginPlay'
p3280
sg31
I19
sg32
I00
sba(iUnrealScriptIDEData
Function
p3281
(dp3282
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoPawn.uc
p3283
sg23
S'Actor Other, PrimitiveComponent OtherComp, vector HitLocation, vector HitNormal'
p3284
sg25
g95
sg27
g95
sg29
S'Touch'
p3285
sg31
I25
sg32
I00
sbasg3112
S'pawn'
p3286
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoPawn.uc
p3287
sg3116
(lp3288
sg3118
VGatoPawn
p3289
sg3120
(lp3290
sg3122
(lp3291
sg3124
(lp3292
(iUnrealScriptIDEData
Variable
p3293
(dp3294
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoPawn.uc
p3295
sg1553
g95
sg1554
(lp3296
S'var(Gato)'
p3297
aS'SkeletalMeshComponent'
p3298
asg1536
S'NPCMesh'
p3299
sg31
I9
sba(iUnrealScriptIDEData
Variable
p3300
(dp3301
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cGatoPawn.uc
p3302
sg1553
g95
sg1554
(lp3303
S'var(Gato)'
p3304
aS'class<AIController>'
p3305
asg1536
S'NPCController'
p3306
sg31
I10
sbasba(iUnrealScriptIDEData
ClassReference
p3307
(dp3308
g3
Nsg3091
g12
sg3092
I00
sg3093
S'class MeshMouseCursor extends Actor;\n'
p3309
sg3095
(lp3310
sg3112
S'actor'
p3311
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMeshMouseCursor.uc
p3312
sg3116
(lp3313
sg3118
VMeshMouseCursor
p3314
sg3120
(lp3315
sg3122
(lp3316
sg3124
(lp3317
sbag3206
a(iUnrealScriptIDEData
ClassReference
p3318
(dp3319
g3
Nsg3091
g12
sg3092
I01
sg3093
S' /* Victor Macho\n    Clase HUD en unreal\nPosicion del raton y debug de variables\n */\n\nclass MyHud extends UTHUD;\n'
p3320
sg3095
(lp3321
(iUnrealScriptIDEData
Function
p3322
(dp3323
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3324
sg23
g95
sg25
g95
sg27
S'simulated'
p3325
sg29
S'PostBeginPlay'
p3326
sg31
I19
sg32
I00
sba(iUnrealScriptIDEData
Function
p3327
(dp3328
g19
S'//Activa o desactiva ver los rayos en debug\nexec function ToggleIsometricDebug()\n'
p3329
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3330
sg23
g95
sg25
g95
sg27
S'exec'
p3331
sg29
S'ToggleIsometricDebug'
p3332
sg31
I32
sg32
I01
sba(iUnrealScriptIDEData
Function
p3333
(dp3334
g19
S'//Define la posicion del raton con Scaleform\nfunction vector2D GetMouseCoordinates()\n'
p3335
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3336
sg23
g95
sg25
S'vector2D'
p3337
sg27
g95
sg29
S'GetMouseCoordinates'
p3338
sg31
I46
sg32
I01
sba(iUnrealScriptIDEData
Function
p3339
(dp3340
g19
S'//Despues del render define la posicion de la camara\nevent PostRender()\n'
p3341
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3342
sg23
g95
sg25
g95
sg27
g95
sg29
S'PostRender'
p3343
sg31
I52
sg32
I00
sba(iUnrealScriptIDEData
Function
p3344
(dp3345
g19
S'//Ajustamos la resolucion del HUD con la de la pantalla\nfunction vector2d AjustResolutionCoordinate(vector2d mouseCoordinates)\n'
p3346
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3347
sg23
S'vector2d mouseCoordinates'
p3348
sg25
S'vector2d'
p3349
sg27
g95
sg29
S'AjustResolutionCoordinate'
p3350
sg31
I181
sg32
I01
sba(iUnrealScriptIDEData
Function
p3351
(dp3352
g19
S'//Se dibujan los rayos de la camara\nfunction DrawTraceDebugRays()\n'
p3353
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3354
sg23
g95
sg25
g95
sg27
g95
sg29
S'DrawTraceDebugRays'
p3355
sg31
I196
sg32
I01
sba(iUnrealScriptIDEData
Function
p3356
(dp3357
g19
S'//Dibuja variables despues del postrender\nfunction DrawHUD()\n'
p3358
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3359
sg23
g95
sg25
g95
sg27
g95
sg29
S'DrawHUD'
p3360
sg31
I209
sg32
I01
sba(iUnrealScriptIDEData
Function
p3361
(dp3362
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3363
sg23
g95
sg25
g95
sg27
g95
sg29
S'PreCalcValues'
p3364
sg31
I269
sg32
I01
sba(iUnrealScriptIDEData
Function
p3365
(dp3366
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3367
sg23
g95
sg25
S'float'
p3368
sg27
g95
sg29
S'GetPlayerHeading'
p3369
sg31
I281
sg32
I01
sba(iUnrealScriptIDEData
Function
p3370
(dp3371
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3372
sg23
g95
sg25
g95
sg27
g95
sg29
S'DrawMap'
p3373
sg31
I298
sg32
I01
sbasg3112
S'uthud'
p3374
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3375
sg3116
(lp3376
sg3118
VMyHud
p3377
sg3120
(lp3378
sg3122
(lp3379
sg3124
(lp3380
(iUnrealScriptIDEData
Variable
p3381
(dp3382
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3383
sg1553
S'Dibuja o no los rayos en el debug'
p3384
sg1554
(lp3385
S'var'
p3386
aS'bool'
p3387
asg1536
S'bDrawTraces'
p3388
sg31
I8
sba(iUnrealScriptIDEData
Variable
p3389
(dp3390
g19
S'//var FontRenderInfo  TextRenderInfo;         //letra para poner en el debug de texto\nvar DoorOfLiesHud MyHudHealth;\n'
p3391
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3392
sg1553
g95
sg1554
(lp3393
S'var'
p3394
aS'DoorOfLiesHud'
p3395
asg1536
S'MyHudHealth'
p3396
sg31
I10
sba(iUnrealScriptIDEData
Variable
p3397
(dp3398
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3399
sg1553
g95
sg1554
(lp3400
S'var'
p3401
aS'MU_Minimap'
p3402
asg1536
S'GameMinimap'
p3403
sg31
I12
sba(iUnrealScriptIDEData
Variable
p3404
(dp3405
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3406
sg1553
g95
sg1554
(lp3407
S'var'
p3408
aS'Float'
p3409
asg1536
S'TileSize'
p3410
sg31
I13
sba(iUnrealScriptIDEData
Variable
p3411
(dp3412
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3413
sg1553
g95
sg1554
(lp3414
S'var'
p3415
aS'Int'
p3416
asg1536
S'MapDim'
p3417
sg31
I14
sba(iUnrealScriptIDEData
Variable
p3418
(dp3419
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3420
sg1553
g95
sg1554
(lp3421
S'var'
p3422
aS'Int'
p3423
asg1536
S'BoxSize'
p3424
sg31
I15
sba(iUnrealScriptIDEData
Variable
p3425
(dp3426
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cMyHud.uc
p3427
sg1553
g95
sg1554
(lp3428
S'var'
p3429
aS'Color'
p3430
asg1536
S'PlayerColors[2]'
p3431
sg31
I16
sbasba(iUnrealScriptIDEData
ClassReference
p3432
(dp3433
g3
Nsg3091
g12
sg3092
I00
sg3093
S'class SampleGame extends GameInfo;\n'
p3434
sg3095
(lp3435
sg3112
S'gameinfo'
p3436
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSampleGame.uc
p3437
sg3116
(lp3438
sg3118
VSampleGame
p3439
sg3120
(lp3440
sg3122
(lp3441
sg3124
(lp3442
sba(iUnrealScriptIDEData
ClassReference
p3443
(dp3444
g3
Nsg3091
g12
sg3092
I01
sg3093
S' /* Victor Macho\n    Clase PAWN \nDefine Modelo - Animaciones - Afecta Luz o no\n */\n\nclass SamplePawn extends Pawn;\n'
p3445
sg3095
(lp3446
(iUnrealScriptIDEData
Function
p3447
(dp3448
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3449
sg23
g95
sg25
g95
sg27
S'simulated'
p3450
sg29
S'PostBeginPlay'
p3451
sg31
I22
sg32
I00
sba(iUnrealScriptIDEData
Function
p3452
(dp3453
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3454
sg23
S'PlayerController RequestedBy'
p3455
sg25
S'name'
p3456
sg27
S'simulated'
p3457
sg29
S'GetDefaultCameraMode'
p3458
sg31
I28
sg32
I01
sba(iUnrealScriptIDEData
Function
p3459
(dp3460
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3461
sg23
S'bool mode'
p3462
sg25
g95
sg27
S'exec'
p3463
sg29
S'SetFlashlight'
p3464
sg31
I34
sg32
I01
sba(iUnrealScriptIDEData
Function
p3465
(dp3466
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3467
sg23
S'bool mode'
p3468
sg25
g95
sg27
S'exec'
p3469
sg29
S'SetParticles'
p3470
sg31
I39
sg32
I01
sba(iUnrealScriptIDEData
Function
p3471
(dp3472
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3473
sg23
S'EAnimState eState'
p3474
sg25
g95
sg27
g95
sg29
S'SetAnimationState'
p3475
sg31
I44
sg32
I01
sba(iUnrealScriptIDEData
Function
p3476
(dp3477
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3478
sg23
S'AnimNodeSequence SeqNode, float PlayerTime, float ExcessTime'
p3479
sg25
g95
sg27
g95
sg29
S'OnAnimEnd'
p3480
sg31
I58
sg32
I00
sba(iUnrealScriptIDEData
Function
p3481
(dp3482
g19
S'/* \n * Called after initializing the AnimTree for the given SkeletalMeshComponent that has this Actor as its Owner\n * this is a good place to cache references to skeletal controllers, etc that the Actor modifies\n */\nsimulated event PostInitAnimTree(SkeletalMeshComponent SkelComp)\n'
p3483
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3484
sg23
S'SkeletalMeshComponent SkelComp'
p3485
sg25
g95
sg27
S'simulated'
p3486
sg29
S'PostInitAnimTree'
p3487
sg31
I74
sg32
I00
sba(iUnrealScriptIDEData
Function
p3488
(dp3489
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3490
sg23
g95
sg25
g95
sg27
S'simulated'
p3491
sg29
S'Destroyed'
p3492
sg31
I79
sg32
I00
sba(iUnrealScriptIDEData
Function
p3493
(dp3494
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3495
sg23
S'Actor Other, PrimitiveComponent OtherComp, vector HitLocation, vector HitNormal'
p3496
sg25
g95
sg27
g95
sg29
S'Touch'
p3497
sg31
I86
sg32
I00
sbasg3112
S'pawn'
p3498
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3499
sg3116
(lp3500
sg3118
VSamplePawn
p3501
sg3120
(lp3502
sg3122
(lp3503
sg3124
(lp3504
(iUnrealScriptIDEData
Variable
p3505
(dp3506
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3507
sg1553
g95
sg1554
(lp3508
S'var'
p3509
aS'SpotLightComponent'
p3510
asg1536
S'flashlight'
p3511
sg31
I8
sba(iUnrealScriptIDEData
Variable
p3512
(dp3513
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3514
sg1553
g95
sg1554
(lp3515
S'var'
p3516
aS'ParticleSystemComponent'
p3517
asg1536
S'ParticlesFollowUs'
p3518
sg31
I9
sba(iUnrealScriptIDEData
Variable
p3519
(dp3520
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3521
sg1553
g95
sg1554
(lp3522
S'var'
p3523
aS'AnimNodeBlendList'
p3524
asg1536
S'AnimNodeBlendList'
p3525
sg31
I10
sba(iUnrealScriptIDEData
Variable
p3526
(dp3527
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3528
sg1553
g95
sg1554
(lp3529
S'var'
p3530
aS'int'
p3531
asg1536
S'maxCalabazas'
p3532
sg31
I11
sba(iUnrealScriptIDEData
Variable
p3533
(dp3534
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePawn.uc
p3535
sg1553
g95
sg1554
(lp3536
S'var'
p3537
aS'int'
p3538
asg1536
S'nCalabazas'
p3539
sg31
I12
sbasba(iUnrealScriptIDEData
ClassReference
p3540
(dp3541
g3
Nsg3091
g12
sg3092
I01
sg3093
S'class SamplePlayerCamera extends Camera;\n'
p3542
sg3095
(lp3543
(iUnrealScriptIDEData
Function
p3544
(dp3545
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerCamera.uc
p3546
sg23
g95
sg25
g95
sg27
S'simulated'
p3547
sg29
S'PostBeginPlay'
p3548
sg31
I3
sg32
I00
sba(iUnrealScriptIDEData
Function
p3549
(dp3550
g19
S"/*****************************************************************\n *\n *  TUTORIAL FUNCTION\n *\n *  This function was extended from camera. Your pawn will request\n *  a camera type when its created with function GetDefaultCameraMode,\n *  Force it to 'Isometric'. This change is small and doesnt hinder the\n *  in-game use of other buil-in camera types.\n *  \n *  This is a skeletal function provided to be simple and to the point\n *  to get an iso camera, add more or extend from another parent class\n *  if you miss anything from GameCamera.\n *\n *\n *****************************************************************/\nfunction UpdateViewTarget(out TViewTarget OutVT, float DeltaTime)\n"
p3551
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerCamera.uc
p3552
sg23
S'out TViewTarget OutVT, float DeltaTime'
p3553
sg25
g95
sg27
g95
sg29
S'UpdateViewTarget'
p3554
sg31
I24
sg32
I01
sbasg3112
S'camera'
p3555
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerCamera.uc
p3556
sg3116
(lp3557
sg3118
VSamplePlayerCamera
p3558
sg3120
(lp3559
sg3122
(lp3560
sg3124
(lp3561
sba(iUnrealScriptIDEData
ClassReference
p3562
(dp3563
g3
Nsg3091
g12
sg3092
I01
sg3093
S' /* Victor Macho\n    Clase del control del player\n\n */\n\nclass SamplePlayerController extends PlayerController;\n'
p3564
sg3095
(lp3565
(iUnrealScriptIDEData
Function
p3566
(dp3567
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3568
sg23
g95
sg25
g95
sg27
S'simulated'
p3569
sg29
S'PostBeginPlay'
p3570
sg31
I52
sg32
I00
sba(iUnrealScriptIDEData
Function
p3571
(dp3572
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3573
sg23
S'float DeltaTime'
p3574
sg25
g95
sg27
g95
sg29
S'UpdateRotation'
p3575
sg31
I58
sg32
I01
sba(iUnrealScriptIDEData
Function
p3576
(dp3577
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3578
sg23
S'float DeltaTime, out Rotator out_ViewRotation, Rotator DeltaRot'
p3579
sg25
g95
sg27
g95
sg29
S'ProcessViewRotation'
p3580
sg31
I63
sg32
I01
sba(iUnrealScriptIDEData
Function
p3581
(dp3582
g19
S'//Cada frame\nevent PlayerTick( float DeltaTime )\n'
p3583
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3584
sg23
S'float DeltaTime'
p3585
sg25
g95
sg27
g95
sg29
S'PlayerTick'
p3586
sg31
I69
sg32
I00
sba(iUnrealScriptIDEData
Function
p3587
(dp3588
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3589
sg23
g95
sg25
g95
sg27
S'exec'
p3590
sg29
S'NextWeapon'
p3591
sg31
I141
sg32
I01
sba(iUnrealScriptIDEData
Function
p3592
(dp3593
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3594
sg23
g95
sg25
g95
sg27
S'exec'
p3595
sg29
S'PrevWeapon'
p3596
sg31
I146
sg32
I01
sba(iUnrealScriptIDEData
Function
p3597
(dp3598
g19
S'/******************************************************************\n *\n *  TUTORIAL FUNCTION\n *\n *  StartFire is called on mouse pressed, here to calculate a mouse click we\n *  set the timer to 0, then initialize mouseButtons according to function \n *  parameter and set the initial destination of the mouse press. Real\n *  process is in PlayerTick function.\n *\n ******************************************************************/\nexec function StartFire(optional byte FireModeNum)\n'
p3599
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3600
sg23
S'optional byte FireModeNum'
p3601
sg25
g95
sg27
S'exec'
p3602
sg29
S'StartFire'
p3603
sg31
I162
sg32
I01
sba(iUnrealScriptIDEData
Function
p3604
(dp3605
g19
S'/******************************************************************\n *\n *  TUTORIAL FUNCTION\n *\n *  StopFire is called on mouse release, here check the time the buttons have\n *  been pressed (this should be enhanced, but it was kept simple for the tutorial).\n *  if DeltaAccumulated < 0.1300 (medium time mouse click) then we calculate it as\n *  a mouse click, else simply stop any state running. EDIT: You must understand only\n *  a single timer has been kept for all mouse button, you should duplicate a timer\n *  for each individual mouse button if you want to support thing like auto-fire while\n *  walking in a direction.\n *\n ******************************************************************/\nsimulated function StopFire(optional byte FireModeNum )\n'
p3606
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3607
sg23
S'optional byte FireModeNum'
p3608
sg25
g95
sg27
S'simulated'
p3609
sg29
S'StopFire'
p3610
sg31
I198
sg32
I01
sba(iUnrealScriptIDEData
Function
p3611
(dp3612
g19
S'/******************************************************************\n *\n *  TUTORIAL FUNCTION\n *\n *  MovePawnToDestination will push a MoveMouseClick state that will make\n *  the pawn go to a single destination with a mouse click and then\n *  stop near the destination.\n *\n ******************************************************************/\nfunction MovePawnToDestination()\n'
p3613
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3614
sg23
g95
sg25
g95
sg27
g95
sg29
S'MovePawnToDestination'
p3615
sg31
I249
sg32
I01
sba(iUnrealScriptIDEData
Function
p3616
(dp3617
g19
S'/******************************************************************\n *\n *  TUTORIAL FUNCTION\n *\n *  This is a timer function, it prevents the MoveMouseClick state from\n *  looking to get stuck in an obstacle. After a set of seconds it\n *  pushes the entire state stack so the pawn revert to PlayerMove\n *  automatic state.\n *\n ******************************************************************/\nfunction StopLingering()\n'
p3618
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3619
sg23
g95
sg25
g95
sg27
g95
sg29
S'StopLingering'
p3620
sg31
I266
sg32
I01
sba(iUnrealScriptIDEData
Function
p3621
(dp3622
g19
S'/******************************************************************\n *\n *  TUTORIAL FUNCTION\n *\n *  PlayerMove is called each frame, we declare it here inside the\n *  PlayerController so its general to all states. It can be possible\n *  to declare this function in each single state, having multiple\n *  PlayerMove scenario, but for the simplicity of the tutorial\n *  we have put it here in the class. It controls the player in that\n *  it does a distance check when moving. It calculates the remaining\n *  distance to the target. If target is within 2D(X,Y) offset, then\n *  set the var bPawnNearDestination for state control.\n *  \n *  Rotation\n *  \n *  This function overrides the controller rotation of the pawn. Depending\n *  on the situation (state) the pawn will either face a direction or rotate\n *  to face the destination.\n *\n ******************************************************************/\nfunction PlayerMove(float DeltaTime)\n'
p3623
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3624
sg23
S'float DeltaTime'
p3625
sg25
g95
sg27
g95
sg29
S'PlayerMove'
p3626
sg31
I293
sg32
I01
sba(iUnrealScriptIDEData
Function
p3627
(dp3628
g19
S'/******************************************************************\n *\n *  TUTORIAL STATE (MoveMouseClick)\n *\n *  MoveMouseClick is the state when a mouse button is pressed\n *  once (simple click). Simply go to a set destination.\n *\n *\n ******************************************************************/\nstate MoveMouseClick\n{\n\tevent PoppedState()\n'
p3629
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3630
sg23
g95
sg25
g95
sg27
g95
sg29
S'PoppedState'
p3631
sg31
I341
sg32
I00
sba(iUnrealScriptIDEData
Function
p3632
(dp3633
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3634
sg23
g95
sg25
g95
sg27
g95
sg29
S'PushedState'
p3635
sg31
I351
sg32
I00
sba(iUnrealScriptIDEData
Function
p3636
(dp3637
g19
S'/******** ESTADO ATACAR *************/\nstate AttackEnemy\n{\n\tevent PoppedState()\n'
p3638
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3639
sg23
g95
sg25
g95
sg27
g95
sg29
S'PoppedState'
p3640
sg31
I378
sg32
I00
sba(iUnrealScriptIDEData
Function
p3641
(dp3642
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3643
sg23
g95
sg25
g95
sg27
g95
sg29
S'PushedState'
p3644
sg31
I389
sg32
I00
sba(iUnrealScriptIDEData
Function
p3645
(dp3646
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3647
sg23
S'Controller InstigatedBy, vector HitLocation, int Damage, class<DamageType> damageType, vector Momentum'
p3648
sg25
g95
sg27
S'simulated'
p3649
sg29
S'NotifyTakeHit'
p3650
sg31
I431
sg32
I01
sbasg3112
S'playercontroller'
p3651
sg3114
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3652
sg3116
(lp3653
sg3118
VSamplePlayerController
p3654
sg3120
(lp3655
sg3122
(lp3656
sg3124
(lp3657
(iUnrealScriptIDEData
Variable
p3658
(dp3659
g19
S'/*****************************************************************/\nvar Vector2D    PlayerMouse;                //Hold calculated mouse position (this is calculated in HUD)\n'
p3660
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3661
sg1553
S'Hold calculated mouse position (this is calculated in HUD)'
p3662
sg1554
(lp3663
S'var'
p3664
aS'Vector2D'
p3665
asg1536
S'PlayerMouse'
p3666
sg31
I9
sba(iUnrealScriptIDEData
Variable
p3667
(dp3668
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3669
sg1553
S'Hold where the ray casted from the mouse in 3d coordinate intersect with world geometry. We will'
p3670
sg1554
(lp3671
S'var'
p3672
aS'Vector'
p3673
asg1536
S'MouseHitWorldLocation'
p3674
sg31
I11
sba(iUnrealScriptIDEData
Variable
p3675
(dp3676
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3677
sg1553
S'Hold the normalized vector of world location to get direction to MouseHitWorldLocation (calculated in HUD, not used)'
p3678
sg1554
(lp3679
S'var'
p3680
aS'Vector'
p3681
asg1536
S'MouseHitWorldNormal'
p3682
sg31
I14
sba(iUnrealScriptIDEData
Variable
p3683
(dp3684
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3685
sg1553
S'Hold deprojected mouse location in 3d world coordinates. (calculated in HUD, not used)'
p3686
sg1554
(lp3687
S'var'
p3688
aS'Vector'
p3689
asg1536
S'MousePosWorldLocation'
p3690
sg31
I15
sba(iUnrealScriptIDEData
Variable
p3691
(dp3692
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3693
sg1553
S'Hold deprojected mouse location normal. (calculated in HUD, used for camera ray from above)'
p3694
sg1554
(lp3695
S'var'
p3696
aS'Vector'
p3697
asg1536
S'MousePosWorldNormal'
p3698
sg31
I16
sba(iUnrealScriptIDEData
Variable
p3699
(dp3700
g19
S'/***************************************************************** \n *  Calculated in Hud after mouse deprojection, uses MousePosWorldNormal as direction vector \n *  This is what calculated MouseHitWorldLocation and MouseHitWorldNormal.\n *  \n *  See Hud.PostRender, Mouse deprojection needs Canvas variable.\n *  \n *  **/\nvar vector      StartTrace;                 //Hold calculated start of ray from camera\n'
p3701
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3702
sg1553
S'Hold calculated start of ray from camera'
p3703
sg1554
(lp3704
S'var'
p3705
aS'vector'
p3706
asg1536
S'StartTrace'
p3707
sg31
I25
sba(iUnrealScriptIDEData
Variable
p3708
(dp3709
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3710
sg1553
S'Hold calculated end of ray from camera to ground'
p3711
sg1554
(lp3712
S'var'
p3713
aS'Vector'
p3714
asg1536
S'EndTrace'
p3715
sg31
I26
sba(iUnrealScriptIDEData
Variable
p3716
(dp3717
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3718
sg1553
S'Hold the direction for the ray query.'
p3719
sg1554
(lp3720
S'var'
p3721
aS'vector'
p3722
asg1536
S'RayDir'
p3723
sg31
I27
sba(iUnrealScriptIDEData
Variable
p3724
(dp3725
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3726
sg1553
S'Hold location of pawn eye for rays that query if an obstacle exist to destination to pathfind.'
p3727
sg1554
(lp3728
S'var'
p3729
aS'Vector'
p3730
asg1536
S'PawnEyeLocation'
p3731
sg31
I28
sba(iUnrealScriptIDEData
Variable
p3732
(dp3733
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3734
sg1553
S'If an actor is found under mouse cursor when mouse moves, its going to end up here.'
p3735
sg1554
(lp3736
S'var'
p3737
aS'Actor'
p3738
asg1536
S'TraceActor'
p3739
sg31
I29
sba(iUnrealScriptIDEData
Variable
p3740
(dp3741
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3742
sg1553
S'Initialize this function in StartFire and off in StopFire'
p3743
sg1554
(lp3744
S'var'
p3745
aS'bool'
p3746
asg1536
S'bLeftMousePressed'
p3747
sg31
I39
sba(iUnrealScriptIDEData
Variable
p3748
(dp3749
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3750
sg1553
S'Initialize this function in StartFire and off in StopFire'
p3751
sg1554
(lp3752
S'var'
p3753
aS'bool'
p3754
asg1536
S'bRightMousePressed'
p3755
sg31
I40
sba(iUnrealScriptIDEData
Variable
p3756
(dp3757
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3758
sg1553
S'Accumulate time to check for mouse clicks'
p3759
sg1554
(lp3760
S'var'
p3761
aS'float'
p3762
asg1536
S'DeltaTimeAccumulated'
p3763
sg31
I41
sba(iUnrealScriptIDEData
Variable
p3764
(dp3765
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3766
sg1553
S'This is the calculated distance the pawn has left to get to MouseHitWorldLocation.'
p3767
sg1554
(lp3768
S'var'
p3769
aS'float'
p3770
asg1536
S'DistanceRemaining'
p3771
sg31
I45
sba(iUnrealScriptIDEData
Variable
p3772
(dp3773
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3774
sg1553
S'This indicates if pawn is within acceptable offset of destination to stop moving.'
p3775
sg1554
(lp3776
S'var'
p3777
aS'bool'
p3778
asg1536
S'bPawnNearDestination'
p3779
sg31
I46
sba(iUnrealScriptIDEData
Variable
p3780
(dp3781
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3782
sg1553
g95
sg1554
(lp3783
S'var'
p3784
aS'vector'
p3785
asg1536
S'targetTogo'
p3786
sg31
I48
sba(iUnrealScriptIDEData
Variable
p3787
(dp3788
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cSamplePlayerController.uc
p3789
sg1553
g95
sg1554
(lp3790
S'var'
p3791
aS'(DoorOfLies)'
p3792
aS'float'
p3793
asg1536
S'RotationSpeed'
p3794
sg31
I50
sbasba(iUnrealScriptIDEData
ClassReference
p3795
(dp3796
g3
Nsg3091
g12
sg3092
I01
sg3093
S"/**\n * HiddenFunctions\n * ______________\n *\n * All stuff that is somehow a hidden UnrealScript feature.\n * \n * This is a non-existent class. You can't extend it.\n */\nclass HiddenFunctions\n"
p3797
sg3095
(lp3798
g17
ag33
ag41
ag49
ag57
ag65
asg3112
g95
sg3114
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cHiddenFunctions.uc
p3799
sg3116
(lp3800
sg3118
VHiddenFunctions
p3801
sg3120
(lp3802
sg3122
(lp3803
sg3124
(lp3804
sba(iUnrealScriptIDEData
ClassReference
p3805
(dp3806
g3
Nsg3091
g12
sg3092
I00
sg3093
S'/**\n * Class\n * _____\n * In Unreal, classes are objects just like actors, textures, and sounds are objects. Class objects belong to the class named "class".\n * Now, there will often be cases where you\'ll want to store a reference to a class object, so that you can spawn an actor belonging to that class\n * (without knowing what the class is at compile-time). For example:\n * \t\tvar() class C;\n * \t\tvar actor A;\n * \t\tA = Spawn( C ); // Spawn an actor belonging to some arbitrary class C.\n * \t\t\n * When declaring variables that reference class objects,\n * you can optionally use the syntax class<metaclass> to limit the classes that can be referenced by the variable to classes of type metaclass (and its child classes).\n * For example, in the declaration:\n * \t\tvar class<Actor> ActorClass;\n * The variable ActorClass may only reference a class that extends the "actor" class.\n'
p3807
sg3095
(lp3808
sg3112
S'the'
p3809
sg3114
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cClass.uc
p3810
sg3116
(lp3811
sg3118
VClass
p3812
sg3120
(lp3813
sg3122
(lp3814
sg3124
(lp3815
sba(iUnrealScriptIDEData
ClassReference
p3816
(dp3817
g3
Nsg3091
g12
sg3092
I00
sg3093
S"/**\n * Dynamic Arrays\n * ______________\n * Dynamic arrays provide various ways for reading and manipulating the content and length of the array.\n * All of these must be done through variables or struct members,\n * dynamic arrays returned from functions must be assigned to a variable first.\n *\n * Declaration: var array<type> MyArray;\n *\n * NOTE: array<bool> is not a supported type!\n *\n * Dynamic arrays now support the foreach command to allow simple iterations. The basic syntax is:\n * \tforeach ArrayVariable(out ArrayItem, optional out ItemIndex) { ... }\n * \n * This is a non-existent class. You can't extend it.\n */\nclass Array\n"
p3818
sg3095
(lp3819
sg3112
g95
sg3114
VG:\u005cSublimeText\u005cData\u005cPackages\u005cUnrealScriptIDE\u005cInbuiltClasses\u005cArray.uc
p3820
sg3116
(lp3821
sg3118
VArray
p3822
sg3120
(lp3823
sg3122
(lp3824
sg3124
(lp3825
sbag4
a(iUnrealScriptIDEData
ClassReference
p3826
(dp3827
g6
Nsg7
g12
sg90
I01
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3828
sg74
(lp3829
(iUnrealScriptIDEData
Function
p3830
(dp3831
g19
S'/**\n * Flags all components as dirty and then calls UpdateComponents().\n *\n * @param\tbCollisionUpdate\t[opt] As per UpdateComponents; defaults to FALSE.\n * @param\tbTransformOnly\t\t[opt] TRUE to update only the component transforms, FALSE to update the entire component.\n */\nnative function ForceUpdateComponents(optional bool bCollisionUpdate = FALSE, optional bool bTransformOnly = TRUE);\n'
p3832
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3833
sg23
S'optional bool bCollisionUpdate = FALSE, optional bool bTransformOnly = TRUE'
p3834
sg25
g95
sg27
S'native'
p3835
sg29
S'ForceUpdateComponents'
p3836
sg31
I1531
sg32
I01
sba(iUnrealScriptIDEData
Function
p3837
(dp3838
g19
S'// Execute a console command in the context of the current level and game engine.\nnative function string ConsoleCommand(string Command, optional bool bWriteToLog = true);\n'
p3839
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3840
sg23
S'string Command, optional bool bWriteToLog = true'
p3841
sg25
S'string'
p3842
sg27
S'native'
p3843
sg29
S'ConsoleCommand'
p3844
sg31
I1534
sg32
I01
sba(iUnrealScriptIDEData
Function
p3845
(dp3846
g19
S'// Latent functions.\nnative(256) final latent function Sleep( float Seconds );\n'
p3847
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3848
sg23
S'float Seconds'
p3849
sg25
g95
sg27
S'native(256) final latent'
p3850
sg29
S'Sleep'
p3851
sg31
I1540
sg32
I01
sba(iUnrealScriptIDEData
Function
p3852
(dp3853
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3854
sg23
S'AnimNodeSequence SeqNode, optional bool bFinishOnBlendOut'
p3855
sg25
g95
sg27
S'native(261) final latent'
p3856
sg29
S'FinishAnim'
p3857
sg31
I1541
sg32
I01
sba(iUnrealScriptIDEData
Function
p3858
(dp3859
g19
S'// Collision.\nnative(262) final noexport function SetCollision( optional bool bNewColActors, optional bool bNewBlockActors, optional bool bNewIgnoreEncroachers );\n'
p3860
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3861
sg23
S'optional bool bNewColActors, optional bool bNewBlockActors, optional bool bNewIgnoreEncroachers'
p3862
sg25
g95
sg27
S'native(262) final noexport'
p3863
sg29
S'SetCollision'
p3864
sg31
I1544
sg32
I01
sba(iUnrealScriptIDEData
Function
p3865
(dp3866
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3867
sg23
S'float NewRadius, float NewHeight'
p3868
sg25
g95
sg27
S'native(283) final'
p3869
sg29
S'SetCollisionSize'
p3870
sg31
I1545
sg32
I01
sba(iUnrealScriptIDEData
Function
p3871
(dp3872
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3873
sg23
S'ECollisionType NewCollisionType'
p3874
sg25
g95
sg27
S'native final'
p3875
sg29
S'SetCollisionType'
p3876
sg31
I1546
sg32
I01
sba(iUnrealScriptIDEData
Function
p3877
(dp3878
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3879
sg23
S'float NewScale'
p3880
sg25
g95
sg27
S'native final'
p3881
sg29
S'SetDrawScale'
p3882
sg31
I1547
sg32
I01
sba(iUnrealScriptIDEData
Function
p3883
(dp3884
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3885
sg23
S'vector NewScale3D'
p3886
sg25
g95
sg27
S'native final'
p3887
sg29
S'SetDrawScale3D'
p3888
sg31
I1548
sg32
I01
sba(iUnrealScriptIDEData
Function
p3889
(dp3890
g19
S'// Movement.\nnative(266) final function bool Move( vector Delta );\n'
p3891
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3892
sg23
S'vector Delta'
p3893
sg25
S'bool'
p3894
sg27
S'native(266) final'
p3895
sg29
S'Move'
p3896
sg31
I1551
sg32
I01
sba(iUnrealScriptIDEData
Function
p3897
(dp3898
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3899
sg23
S'vector NewLocation'
p3900
sg25
S'bool'
p3901
sg27
S'native(267) final'
p3902
sg29
S'SetLocation'
p3903
sg31
I1552
sg32
I01
sba(iUnrealScriptIDEData
Function
p3904
(dp3905
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3906
sg23
S'rotator NewRotation'
p3907
sg25
S'bool'
p3908
sg27
S'native(299) final'
p3909
sg29
S'SetRotation'
p3910
sg31
I1553
sg32
I01
sba(iUnrealScriptIDEData
Function
p3911
(dp3912
g19
S'/** This will return the direction in LocalSpace that that actor is moving.  This is useful for firing off effects based on which way the actor is moving. **/\nnative function EMoveDir MovingWhichWay( out float Amount );\n'
p3913
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3914
sg23
S'out float Amount'
p3915
sg25
S'EMoveDir'
p3916
sg27
S'native'
p3917
sg29
S'MovingWhichWay'
p3918
sg31
I1555
sg32
I01
sba(iUnrealScriptIDEData
Function
p3919
(dp3920
g19
S'/** updates the zone/PhysicsVolume of this Actor\n * @param bForceRefresh - forces the code to do a full collision check instead of exiting early if the current info is valid\n */\nnative final noexport function SetZone(bool bForceRefresh);\n'
p3921
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3922
sg23
S'bool bForceRefresh'
p3923
sg25
g95
sg27
S'native final noexport'
p3924
sg29
S'SetZone'
p3925
sg31
I1560
sg32
I01
sba(iUnrealScriptIDEData
Function
p3926
(dp3927
g19
S"// SetRelativeRotation() sets the rotation relative to the actor's base\nnative final function bool SetRelativeRotation( rotator NewRotation );\n"
p3928
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3929
sg23
S'rotator NewRotation'
p3930
sg25
S'bool'
p3931
sg27
S'native final'
p3932
sg29
S'SetRelativeRotation'
p3933
sg31
I1563
sg32
I01
sba(iUnrealScriptIDEData
Function
p3934
(dp3935
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3936
sg23
S'vector NewLocation'
p3937
sg25
S'bool'
p3938
sg27
S'native final'
p3939
sg29
S'SetRelativeLocation'
p3940
sg31
I1564
sg32
I01
sba(iUnrealScriptIDEData
Function
p3941
(dp3942
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3943
sg23
S'optional bool bNewHardAttach'
p3944
sg25
S'noexport'
p3945
sg27
S'native final'
p3946
sg29
S'SetHardAttach'
p3947
sg31
I1565
sg32
I01
sba(iUnrealScriptIDEData
Function
p3948
(dp3949
g19
S'/**\n * This will look over the set of all attached of components that are SetBased on this Actor\n * and then ShadowParent them to our MyPrimComp and use MyLightEnv.\n **/\nnative simulated function SetShadowParentOnAllAttachedComponents(PrimitiveComponent MyPrimComp, LightEnvironmentComponent MyLightEnv);\n'
p3950
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3951
sg23
S'PrimitiveComponent MyPrimComp, LightEnvironmentComponent MyLightEnv'
p3952
sg25
g95
sg27
S'native simulated'
p3953
sg29
S'SetShadowParentOnAllAttachedComponents'
p3954
sg31
I1571
sg32
I01
sba(iUnrealScriptIDEData
Function
p3955
(dp3956
g19
S'/** Returns a new rotation component value\n  * @PARAM Current is the current rotation value\n  * @PARAM Desired is the desired rotation value\n  * @PARAM DeltaRate is the rotation amount to apply\n  */\nnative final function int fixedTurn(int Current, int Desired, int DeltaRate);\n'
p3957
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3958
sg23
S'int Current, int Desired, int DeltaRate'
p3959
sg25
S'int'
p3960
sg27
S'native final'
p3961
sg29
S'fixedTurn'
p3962
sg31
I1578
sg32
I01
sba(iUnrealScriptIDEData
Function
p3963
(dp3964
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3965
sg23
S'vector Delta'
p3966
sg25
S'bool'
p3967
sg27
S'native(3969) noexport final'
p3968
sg29
S'MoveSmooth'
p3969
sg31
I1580
sg32
I01
sba(iUnrealScriptIDEData
Function
p3970
(dp3971
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3972
sg23
S'float DeltaSeconds'
p3973
sg25
g95
sg27
S'native(3971) final'
p3974
sg29
S'AutonomousPhysics'
p3975
sg31
I1581
sg32
I01
sba(iUnrealScriptIDEData
Function
p3976
(dp3977
g19
S'/** returns terminal velocity (max speed while falling) for this actor.  Unless overridden, it returns the TerminalVelocity of the PhysicsVolume in which this actor is located.\n*/\nnative function float GetTerminalVelocity();\n'
p3978
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3979
sg23
g95
sg25
S'float'
p3980
sg27
S'native'
p3981
sg29
S'GetTerminalVelocity'
p3982
sg31
I1585
sg32
I01
sba(iUnrealScriptIDEData
Function
p3983
(dp3984
g19
S'// Relations.\nnative(298) noexport final function SetBase( actor NewBase, optional vector NewFloor, optional SkeletalMeshComponent SkelComp, optional name AttachName );\n'
p3985
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3986
sg23
S'actor NewBase, optional vector NewFloor, optional SkeletalMeshComponent SkelComp, optional name AttachName'
p3987
sg25
g95
sg27
S'native(298) noexport final'
p3988
sg29
S'SetBase'
p3989
sg31
I1588
sg32
I01
sba(iUnrealScriptIDEData
Function
p3990
(dp3991
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3992
sg23
S'actor NewOwner'
p3993
sg25
g95
sg27
S'native(272) final'
p3994
sg29
S'SetOwner'
p3995
sg31
I1589
sg32
I01
sba(iUnrealScriptIDEData
Function
p3996
(dp3997
g19
S'/** Attempts to find a valid base for this actor and sets it as the current base if found */\nnative function FindBase();\n'
p3998
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p3999
sg23
g95
sg25
g95
sg27
S'native'
p4000
sg29
S'FindBase'
p4001
sg31
I1592
sg32
I01
sba(iUnrealScriptIDEData
Function
p4002
(dp4003
g19
S"/** Attempts to find a base for this actor; does not modify the actor's base.  HeightBelow is the number of units below center to trace (FindBase uses 8) */\nnative function SearchForBaseBelow(float HeightBelow, out Actor NewBase, out vector HitNormal);\n"
p4004
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4005
sg23
S'float HeightBelow, out Actor NewBase, out vector HitNormal'
p4006
sg25
g95
sg27
S'native'
p4007
sg29
S'SearchForBaseBelow'
p4008
sg31
I1595
sg32
I01
sba(iUnrealScriptIDEData
Function
p4009
(dp4010
g19
S'/** iterates up the Base chain to see whether or not this Actor is based on the given Actor\n * @param TestActor the Actor to test for\n * @return whether or not this Actor is based on TestActor\n */\nnative noexport final function bool IsBasedOn(Actor TestActor);\n'
p4011
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4012
sg23
S'Actor TestActor'
p4013
sg25
S'bool'
p4014
sg27
S'native noexport final'
p4015
sg29
S'IsBasedOn'
p4016
sg31
I1601
sg32
I01
sba(iUnrealScriptIDEData
Function
p4017
(dp4018
g19
S'/** Walks up the Base chain from this Actor and returns the Actor at the top (the eventual Base). this->Base is NULL, returns this. */\nnative function Actor GetBaseMost();\n'
p4019
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4020
sg23
g95
sg25
S'Actor'
p4021
sg27
S'native'
p4022
sg29
S'GetBaseMost'
p4023
sg31
I1604
sg32
I01
sba(iUnrealScriptIDEData
Function
p4024
(dp4025
g19
S'/** iterates up the Owner chain to see whether or not this Actor is owned by the given Actor\n * @param TestActor the Actor to test for\n * @return whether or not this Actor is owned by TestActor\n */\nnative noexport final function bool IsOwnedBy(Actor TestActor);\n'
p4026
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4027
sg23
S'Actor TestActor'
p4028
sg25
S'bool'
p4029
sg27
S'native noexport final'
p4030
sg29
S'IsOwnedBy'
p4031
sg31
I1610
sg32
I01
sba(iUnrealScriptIDEData
Function
p4032
(dp4033
g19
S'/** This will compute the aggregate velocity all the way up the Base chain */\nnative final function Vector GetAggregateBaseVelocity( optional Actor TestBase );\n'
p4034
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4035
sg23
S'optional Actor TestBase'
p4036
sg25
S'Vector'
p4037
sg27
S'native final'
p4038
sg29
S'GetAggregateBaseVelocity'
p4039
sg31
I1613
sg32
I01
sba(iUnrealScriptIDEData
Function
p4040
(dp4041
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4042
sg23
S'name VarName'
p4043
sg25
g95
sg27
S'simulated'
p4044
sg29
S'ReplicatedEvent'
p4045
sg31
I1615
sg32
I00
sba(iUnrealScriptIDEData
Function
p4046
(dp4047
g19
S"/** adds/removes a property from a list of properties that will always be replicated when this Actor is bNetInitial, even if the code thinks\n * the client has the same value the server already does\n * This is a workaround to the problem where an LD places an Actor in the level, changes a replicated variable away from the defaults,\n * then at runtime the variable is changed back to the default but it doesn't replicate because initial replication is based on class defaults\n * Only has an effect when called on bStatic or bNoDelete Actors\n * Only properties already in the owning class's replication block may be specified\n * @param PropToReplicate the property to add or remove to the list\n * @param bAdd true to add the property, false to remove the property\n */\nnative final function SetForcedInitialReplicatedProperty(Property PropToReplicate, bool bAdd);\n"
p4048
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4049
sg23
S'Property PropToReplicate, bool bAdd'
p4050
sg25
g95
sg27
S'native final'
p4051
sg29
S'SetForcedInitialReplicatedProperty'
p4052
sg31
I1626
sg32
I01
sba(iUnrealScriptIDEData
Function
p4053
(dp4054
g19
S'/** This will calculate and then set the passed in BasedPosition.  This is just modifying the passed in BasedPosition. */\nnative static final function Vect2BP( out BasedPosition BP, Vector Pos, optional Actor ForcedBase ) const;\n'
p4055
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4056
sg23
S'out BasedPosition BP, Vector Pos, optional Actor ForcedBase'
p4057
sg25
g95
sg27
S'native static final'
p4058
sg29
S'Vect2BP'
p4059
sg31
I1630
sg32
I01
sba(iUnrealScriptIDEData
Function
p4060
(dp4061
g19
S'/** This will take the BasedPosition passed and return a Vector for it **/\nnative static final function Vector BP2Vect( BasedPosition BP ) const;\n'
p4062
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4063
sg23
S'BasedPosition BP'
p4064
sg25
S'Vector'
p4065
sg27
S'native static final'
p4066
sg29
S'BP2Vect'
p4067
sg31
I1632
sg32
I01
sba(iUnrealScriptIDEData
Function
p4068
(dp4069
g19
S'/** This will calculate and then set the passed in BasedPosition.  This is just modifying the passed in BasedPosition. */\nnative static final function SetBasedPosition( out BasedPosition BP, Vector Pos, optional Actor ForcedBase ) const;\n'
p4070
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4071
sg23
S'out BasedPosition BP, Vector Pos, optional Actor ForcedBase'
p4072
sg25
g95
sg27
S'native static final'
p4073
sg29
S'SetBasedPosition'
p4074
sg31
I1636
sg32
I01
sba(iUnrealScriptIDEData
Function
p4075
(dp4076
g19
S'/** This will take the BasedPosition passed and return a Vector for it **/\nnative static final function Vector GetBasedPosition( BasedPosition BP ) const;\n'
p4077
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4078
sg23
S'BasedPosition BP'
p4079
sg25
S'Vector'
p4080
sg27
S'native static final'
p4081
sg29
S'GetBasedPosition'
p4082
sg31
I1638
sg32
I01
sba(iUnrealScriptIDEData
Function
p4083
(dp4084
g19
S'/** Flush persistent lines */\nnative static final function FlushPersistentDebugLines() const;\n'
p4085
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4086
sg23
g95
sg25
g95
sg27
S'native static final'
p4087
sg29
S'FlushPersistentDebugLines'
p4088
sg31
I1645
sg32
I01
sba(iUnrealScriptIDEData
Function
p4089
(dp4090
g19
S'/** Draw a debug line */\nnative static final function DrawDebugLine(vector LineStart, vector LineEnd, byte R, byte G, byte B, optional bool bPersistentLines) const; // SLOW! Use for debugging only!\n'
p4091
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4092
sg23
S'vector LineStart, vector LineEnd, byte R, byte G, byte B, optional bool bPersistentLines'
p4093
sg25
g95
sg27
S'native static final'
p4094
sg29
S'DrawDebugLine'
p4095
sg31
I1648
sg32
I01
sba(iUnrealScriptIDEData
Function
p4096
(dp4097
g19
S'/** Draw a debug point */\nnative static final function DrawDebugPoint(vector Position, float Size, LinearColor PointColor, optional bool bPersistentLines) const; // SLOW! Use for debugging only!\n'
p4098
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4099
sg23
S'vector Position, float Size, LinearColor PointColor, optional bool bPersistentLines'
p4100
sg25
g95
sg27
S'native static final'
p4101
sg29
S'DrawDebugPoint'
p4102
sg31
I1651
sg32
I01
sba(iUnrealScriptIDEData
Function
p4103
(dp4104
g19
S'/** Draw a debug box */\nnative static final function DrawDebugBox(vector Center, vector Extent, byte R, byte G, byte B, optional bool bPersistentLines) const; // SLOW! Use for debugging only!\n'
p4105
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4106
sg23
S'vector Center, vector Extent, byte R, byte G, byte B, optional bool bPersistentLines'
p4107
sg25
g95
sg27
S'native static final'
p4108
sg29
S'DrawDebugBox'
p4109
sg31
I1654
sg32
I01
sba(iUnrealScriptIDEData
Function
p4110
(dp4111
g19
S'/** Draw a debug star */\nnative static final function DrawDebugStar(vector Position, float Size, byte R, byte G, byte B, optional bool bPersistentLines) const; // SLOW! Use for debugging only!\n'
p4112
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4113
sg23
S'vector Position, float Size, byte R, byte G, byte B, optional bool bPersistentLines'
p4114
sg25
g95
sg27
S'native static final'
p4115
sg29
S'DrawDebugStar'
p4116
sg31
I1657
sg32
I01
sba(iUnrealScriptIDEData
Function
p4117
(dp4118
g19
S'/** Draw Debug coordinate system */\nnative static final function DrawDebugCoordinateSystem(vector AxisLoc, Rotator AxisRot, float Scale, optional bool bPersistentLines) const; // SLOW! Use for debugging only!\n'
p4119
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4120
sg23
S'vector AxisLoc, Rotator AxisRot, float Scale, optional bool bPersistentLines'
p4121
sg25
g95
sg27
S'native static final'
p4122
sg29
S'DrawDebugCoordinateSystem'
p4123
sg31
I1660
sg32
I01
sba(iUnrealScriptIDEData
Function
p4124
(dp4125
g19
S'/** Draw a debug sphere */\nnative static final function DrawDebugSphere(vector Center, float Radius, INT Segments, byte R, byte G, byte B, optional bool bPersistentLines) const; // SLOW! Use for debugging only!\n'
p4126
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4127
sg23
S'vector Center, float Radius, INT Segments, byte R, byte G, byte B, optional bool bPersistentLines'
p4128
sg25
g95
sg27
S'native static final'
p4129
sg29
S'DrawDebugSphere'
p4130
sg31
I1663
sg32
I01
sba(iUnrealScriptIDEData
Function
p4131
(dp4132
g19
S'/** Draw a debug cylinder */\nnative static final function DrawDebugCylinder(vector Start, vector End, float Radius, INT Segments, byte R, byte G, byte B, optional bool bPersistentLines) const; // SLOW! Use for debugging only!\n'
p4133
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4134
sg23
S'vector Start, vector End, float Radius, INT Segments, byte R, byte G, byte B, optional bool bPersistentLines'
p4135
sg25
g95
sg27
S'native static final'
p4136
sg29
S'DrawDebugCylinder'
p4137
sg31
I1666
sg32
I01
sba(iUnrealScriptIDEData
Function
p4138
(dp4139
g19
S'/** Draw a debug cone */\nnative static final function DrawDebugCone(Vector Origin, Vector Direction, FLOAT Length, FLOAT AngleWidth, FLOAT AngleHeight, INT NumSides, Color DrawColor, optional bool bPersistentLines) const;\n'
p4140
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4141
sg23
S'Vector Origin, Vector Direction, FLOAT Length, FLOAT AngleWidth, FLOAT AngleHeight, INT NumSides, Color DrawColor, optional bool bPersistentLines'
p4142
sg25
g95
sg27
S'native static final'
p4143
sg29
S'DrawDebugCone'
p4144
sg31
I1669
sg32
I01
sba(iUnrealScriptIDEData
Function
p4145
(dp4146
g19
S'/** Draw Debug string in the world (SLOW, use only in debug)\n * @param TextLocation - location the string should be drawn (NOTE: if base actor is non-null this will be treated as an offset from that actor)\n * @param Text - text to draw\n * @param TestBaseActor (optional) - actor the string should be attached to (none if it should be static)\n * @param Color (optional) - the color of the text to draw\n * @param Duration (optional) - the duration the text should stick around; defauls to forever\n */\nnative static final function DrawDebugString(vector TextLocation, coerce string Text, optional Actor TestBaseActor, optional color TextColor, optional float Duration=-1.f) const;\n'
p4147
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4148
sg23
S'vector TextLocation, coerce string Text, optional Actor TestBaseActor, optional color TextColor, optional float Duration=-1.f'
p4149
sg25
g95
sg27
S'native static final'
p4150
sg29
S'DrawDebugString'
p4151
sg31
I1678
sg32
I01
sba(iUnrealScriptIDEData
Function
p4152
(dp4153
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4154
sg23
S'const out Matrix FrustumToWorld, byte R, byte G, byte B, optional bool bPersistentLines'
p4155
sg25
g95
sg27
S'native static final'
p4156
sg29
S'DrawDebugFrustrum'
p4157
sg31
I1680
sg32
I01
sba(iUnrealScriptIDEData
Function
p4158
(dp4159
g19
S'/** clear all debug strings */\nnative static final function exec FlushDebugStrings() const;\n'
p4160
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4161
sg23
g95
sg25
S'exec'
p4162
sg27
S'native static final'
p4163
sg29
S'FlushDebugStrings'
p4164
sg31
I1683
sg32
I01
sba(iUnrealScriptIDEData
Function
p4165
(dp4166
g19
S'/** Draw some value over time onto the StatChart. Toggle on and off with */\nnative final function ChartData(string DataName, float DataValue);\n'
p4167
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4168
sg23
S'string DataName, float DataValue'
p4169
sg25
g95
sg27
S'native final'
p4170
sg29
S'ChartData'
p4171
sg31
I1686
sg32
I01
sba(iUnrealScriptIDEData
Function
p4172
(dp4173
g19
S'/**\n * Changes the value of bHidden.\n *\n * @param bNewHidden\t- The value to assign to bHidden.\n */\nnative final function SetHidden(bool bNewHidden);\n'
p4174
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4175
sg23
S'bool bNewHidden'
p4176
sg25
g95
sg27
S'native final'
p4177
sg29
S'SetHidden'
p4178
sg31
I1693
sg32
I01
sba(iUnrealScriptIDEData
Function
p4179
(dp4180
g19
S'/** changes the value of bOnlyOwnerSee\n * @param bNewOnlyOwnerSee the new value to assign to bOnlyOwnerSee\n */\nnative final function SetOnlyOwnerSee(bool bNewOnlyOwnerSee);\n'
p4181
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4182
sg23
S'bool bNewOnlyOwnerSee'
p4183
sg25
g95
sg27
S'native final'
p4184
sg29
S'SetOnlyOwnerSee'
p4185
sg31
I1698
sg32
I01
sba(iUnrealScriptIDEData
Function
p4186
(dp4187
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4188
sg23
S'EPhysics newPhysics'
p4189
sg25
g95
sg27
S'native(3970) noexport final'
p4190
sg29
S'SetPhysics'
p4191
sg31
I1703
sg32
I01
sba(iUnrealScriptIDEData
Function
p4192
(dp4193
g19
S'// Timing\nnative final function Clock(out float time);\n'
p4194
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4195
sg23
S'out float time'
p4196
sg25
g95
sg27
S'native final'
p4197
sg29
S'Clock'
p4198
sg31
I1706
sg32
I01
sba(iUnrealScriptIDEData
Function
p4199
(dp4200
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4201
sg23
S'out float time'
p4202
sg25
g95
sg27
S'native final'
p4203
sg29
S'UnClock'
p4204
sg31
I1707
sg32
I01
sba(iUnrealScriptIDEData
Function
p4205
(dp4206
g19
S"/**\n * Adds a component to the actor's components array, attaching it to the actor.\n * @param NewComponent - The component to attach.\n */\nnative final function AttachComponent(ActorComponent NewComponent);\n"
p4207
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4208
sg23
S'ActorComponent NewComponent'
p4209
sg25
g95
sg27
S'native final'
p4210
sg29
S'AttachComponent'
p4211
sg31
I1715
sg32
I01
sba(iUnrealScriptIDEData
Function
p4212
(dp4213
g19
S"/**\n * Removes a component from the actor's components array, detaching it from the actor.\n * @param ExComponent - The component to detach.\n */\nnative final function DetachComponent(ActorComponent ExComponent);\n"
p4214
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4215
sg23
S'ActorComponent ExComponent'
p4216
sg25
g95
sg27
S'native final'
p4217
sg29
S'DetachComponent'
p4218
sg31
I1721
sg32
I01
sba(iUnrealScriptIDEData
Function
p4219
(dp4220
g19
S'/**\n * Detaches and immediately reattaches specified component.  Handles bWillReattach properly.\n */\nnative final function ReattachComponent(ActorComponent ComponentToReattach);\n'
p4221
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4222
sg23
S'ActorComponent ComponentToReattach'
p4223
sg25
g95
sg27
S'native final'
p4224
sg29
S'ReattachComponent'
p4225
sg31
I1726
sg32
I01
sba(iUnrealScriptIDEData
Function
p4226
(dp4227
g19
S'/** Changes the ticking group for this actor */\nnative final function SetTickGroup(ETickingGroup NewTickGroup);\n'
p4228
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4229
sg23
S'ETickingGroup NewTickGroup'
p4230
sg25
g95
sg27
S'native final'
p4231
sg29
S'SetTickGroup'
p4232
sg31
I1729
sg32
I01
sba(iUnrealScriptIDEData
Function
p4233
(dp4234
g19
S"/** turns on or off this Actor's desire to be ticked (bTickIsDisabled)\n * because this is implemented as a separate tickable list, calls to this function\n * to disable ticking will not take effect until the end of the current list to avoid shuffling\n * elements around while they are being iterated over\n */\nnative final function SetTickIsDisabled(bool bInDisabled);\n"
p4235
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4236
sg23
S'bool bInDisabled'
p4237
sg25
g95
sg27
S'native final'
p4238
sg29
S'SetTickIsDisabled'
p4239
sg31
I1736
sg32
I01
sba(iUnrealScriptIDEData
Function
p4240
(dp4241
g19
S'//\n// Major notifications.\n//\nevent Destroyed();\n'
p4242
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4243
sg23
g95
sg25
g95
sg27
g95
sg29
S'Destroyed'
p4244
sg31
I1744
sg32
I00
sba(iUnrealScriptIDEData
Function
p4245
(dp4246
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4247
sg23
S'Actor Other'
p4248
sg25
g95
sg27
g95
sg29
S'GainedChild'
p4249
sg31
I1745
sg32
I00
sba(iUnrealScriptIDEData
Function
p4250
(dp4251
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4252
sg23
S'Actor Other'
p4253
sg25
g95
sg27
g95
sg29
S'LostChild'
p4254
sg31
I1746
sg32
I00
sba(iUnrealScriptIDEData
Function
p4255
(dp4256
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4257
sg23
S'float DeltaTime'
p4258
sg25
g95
sg27
g95
sg29
S'Tick'
p4259
sg31
I1747
sg32
I00
sba(iUnrealScriptIDEData
Function
p4260
(dp4261
g19
S'//\n// Physics & world interaction.\n//\nevent Timer();\n'
p4262
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4263
sg23
g95
sg25
g95
sg27
g95
sg29
S'Timer'
p4264
sg31
I1752
sg32
I00
sba(iUnrealScriptIDEData
Function
p4265
(dp4266
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4267
sg23
S'vector HitNormal, actor Wall, PrimitiveComponent WallComp'
p4268
sg25
g95
sg27
g95
sg29
S'HitWall'
p4269
sg31
I1753
sg32
I00
sba(iUnrealScriptIDEData
Function
p4270
(dp4271
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4272
sg23
g95
sg25
g95
sg27
g95
sg29
S'Falling'
p4273
sg31
I1758
sg32
I00
sba(iUnrealScriptIDEData
Function
p4274
(dp4275
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4276
sg23
S'vector HitNormal, actor FloorActor'
p4277
sg25
g95
sg27
g95
sg29
S'Landed'
p4278
sg31
I1759
sg32
I00
sba(iUnrealScriptIDEData
Function
p4279
(dp4280
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4281
sg23
S'PhysicsVolume NewVolume'
p4282
sg25
g95
sg27
g95
sg29
S'PhysicsVolumeChange'
p4283
sg31
I1760
sg32
I00
sba(iUnrealScriptIDEData
Function
p4284
(dp4285
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4286
sg23
S'Actor Other, PrimitiveComponent OtherComp, vector HitLocation, vector HitNormal'
p4287
sg25
g95
sg27
g95
sg29
S'Touch'
p4288
sg31
I1761
sg32
I00
sba(iUnrealScriptIDEData
Function
p4289
(dp4290
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4291
sg23
S'Actor Other'
p4292
sg25
g95
sg27
g95
sg29
S'PostTouch'
p4293
sg31
I1762
sg32
I00
sba(iUnrealScriptIDEData
Function
p4294
(dp4295
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4296
sg23
S'Actor Other'
p4297
sg25
g95
sg27
g95
sg29
S'UnTouch'
p4298
sg31
I1763
sg32
I00
sba(iUnrealScriptIDEData
Function
p4299
(dp4300
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4301
sg23
S'Actor Other, PrimitiveComponent OtherComp, Vector HitNormal'
p4302
sg25
g95
sg27
g95
sg29
S'Bump'
p4303
sg31
I1764
sg32
I00
sba(iUnrealScriptIDEData
Function
p4304
(dp4305
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4306
sg23
g95
sg25
g95
sg27
g95
sg29
S'BaseChange'
p4307
sg31
I1765
sg32
I00
sba(iUnrealScriptIDEData
Function
p4308
(dp4309
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4310
sg23
S'Actor Other'
p4311
sg25
g95
sg27
g95
sg29
S'Attach'
p4312
sg31
I1766
sg32
I00
sba(iUnrealScriptIDEData
Function
p4313
(dp4314
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4315
sg23
S'Actor Other'
p4316
sg25
g95
sg27
g95
sg29
S'Detach'
p4317
sg31
I1767
sg32
I00
sba(iUnrealScriptIDEData
Function
p4318
(dp4319
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4320
sg23
S'Pawn Other'
p4321
sg25
S'Actor'
p4322
sg27
g95
sg29
S'SpecialHandling'
p4323
sg31
I1768
sg32
I00
sba(iUnrealScriptIDEData
Function
p4324
(dp4325
g19
S'/**\n * Called when collision values change for this actor (via SetCollision/SetCollisionSize).\n */\nevent CollisionChanged();\n'
p4326
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4327
sg23
g95
sg25
g95
sg27
g95
sg29
S'CollisionChanged'
p4328
sg31
I1772
sg32
I00
sba(iUnrealScriptIDEData
Function
p4329
(dp4330
g19
S"/** called when this Actor is encroaching on Other and we couldn't find an appropriate place to push Other to\n * @return true to abort the move, false to allow it\n * @warning do not abort moves of PHYS_RigidBody actors as that will cause the Unreal location and physics engine location to mismatch\n */\nevent bool EncroachingOn(Actor Other);\n"
p4331
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4332
sg23
S'Actor Other'
p4333
sg25
S'bool'
p4334
sg27
g95
sg29
S'EncroachingOn'
p4335
sg31
I1777
sg32
I00
sba(iUnrealScriptIDEData
Function
p4336
(dp4337
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4338
sg23
S'actor Other'
p4339
sg25
g95
sg27
g95
sg29
S'EncroachedBy'
p4340
sg31
I1778
sg32
I00
sba(iUnrealScriptIDEData
Function
p4341
(dp4342
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4343
sg23
S'Actor Other'
p4344
sg25
g95
sg27
g95
sg29
S'RanInto'
p4345
sg31
I1779
sg32
I00
sba(iUnrealScriptIDEData
Function
p4346
(dp4347
g19
S'/** RigidBody woke up after being stationary - only valid if bCallRigidBodyWakeEvents==TRUE */\nevent OnWakeRBPhysics();\n'
p4348
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4349
sg23
g95
sg25
g95
sg27
g95
sg29
S'OnWakeRBPhysics'
p4350
sg31
I1782
sg32
I00
sba(iUnrealScriptIDEData
Function
p4351
(dp4352
g19
S'/** RigidBody went to sleep after being awake - only valid if bCallRigidBodyWakeEvents==TRUE */\nevent OnSleepRBPhysics();\n'
p4353
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4354
sg23
g95
sg25
g95
sg27
g95
sg29
S'OnSleepRBPhysics'
p4355
sg31
I1784
sg32
I00
sba(iUnrealScriptIDEData
Function
p4356
(dp4357
g19
S'/** Clamps out_Rot between the upper and lower limits offset from the base */\nsimulated final native function bool ClampRotation( out Rotator out_Rot, Rotator rBase, Rotator rUpperLimits, Rotator rLowerLimits );\n'
p4358
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4359
sg23
S'out Rotator out_Rot, Rotator rBase, Rotator rUpperLimits, Rotator rLowerLimits'
p4360
sg25
S'bool'
p4361
sg27
S'simulated final native'
p4362
sg29
S'ClampRotation'
p4363
sg31
I1787
sg32
I01
sba(iUnrealScriptIDEData
Function
p4364
(dp4365
g19
S'/** Called by ClampRotation if the rotator was outside of the limits */\nsimulated event bool OverRotated( out Rotator out_Desired, out Rotator out_Actual );\n'
p4366
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4367
sg23
S'out Rotator out_Desired, out Rotator out_Actual'
p4368
sg25
S'bool'
p4369
sg27
S'simulated'
p4370
sg29
S'OverRotated'
p4371
sg31
I1789
sg32
I00
sba(iUnrealScriptIDEData
Function
p4372
(dp4373
g19
S'/**\n * Called when being activated by the specified pawn.  Default\n * implementation searches for any SeqEvent_Used and activates\n * them.\n *\n * @return\t\ttrue to indicate this actor was activated\n */\nfunction bool UsedBy(Pawn User)\n'
p4374
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4375
sg23
S'Pawn User'
p4376
sg25
S'bool'
p4377
sg27
g95
sg29
S'UsedBy'
p4378
sg31
I1798
sg32
I01
sba(iUnrealScriptIDEData
Function
p4379
(dp4380
g19
S"/** called when the actor falls out of the world 'safely' (below KillZ and such) */\nsimulated event FellOutOfWorld(class<DamageType> dmgType)\n"
p4381
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4382
sg23
S'class<DamageType> dmgType'
p4383
sg25
g95
sg27
S'simulated'
p4384
sg29
S'FellOutOfWorld'
p4385
sg31
I1804
sg32
I00
sba(iUnrealScriptIDEData
Function
p4386
(dp4387
g19
S'/** called when the Actor is outside the hard limit on world bounds\n * @note physics and collision are automatically turned off after calling this function\n */\nsimulated event OutsideWorldBounds()\n'
p4388
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4389
sg23
g95
sg25
g95
sg27
S'simulated'
p4390
sg29
S'OutsideWorldBounds'
p4391
sg31
I1815
sg32
I00
sba(iUnrealScriptIDEData
Function
p4392
(dp4393
g19
S'/** Called when an Actor should be destroyed by a pain volume. */\nsimulated function VolumeBasedDestroy(PhysicsVolume PV)\n'
p4394
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4395
sg23
S'PhysicsVolume PV'
p4396
sg25
g95
sg27
S'simulated'
p4397
sg29
S'VolumeBasedDestroy'
p4398
sg31
I1821
sg32
I01
sba(iUnrealScriptIDEData
Function
p4399
(dp4400
g19
S"/**\n * Trace a line and see what it collides with first.\n * Takes this actor's collision properties into account.\n * Returns first hit actor, Level if hit level, or None if hit nothing.\n */\nnative(277) noexport final function Actor Trace\n(\n\tout vector\t\t\t\t\tHitLocation,\n\tout vector\t\t\t\t\tHitNormal,\n\tvector\t\t\t\t\t\tTraceEnd,\n\toptional vector\t\t\t\tTraceStart,\n\toptional bool\t\t\t\tbTraceActors,\n\toptional vector\t\t\t\tExtent,\n\toptional out TraceHitInfo\tHitInfo,\n\toptional int\t\t\t\tExtraTraceFlags\n);\n"
p4401
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4402
sg23
S'out vector HitLocation, out vector HitNormal, vector TraceEnd, optional vector TraceStart, optional bool bTraceActors, optional vector Extent, optional out TraceHitInfo HitInfo, optional int ExtraTraceFlags'
p4403
sg25
S'Actor'
p4404
sg27
S'native(277) noexport final'
p4405
sg29
S'Trace'
p4406
sg31
I1841
sg32
I01
sba(iUnrealScriptIDEData
Function
p4407
(dp4408
g19
S'/**\n *\tRun a line check against just this PrimitiveComponent. Return TRUE if we hit.\n *  NOTE: the actual Actor we call this on is irrelevant!\n */\nnative noexport final function bool TraceComponent\n(\n\tout vector\t\t\t\t\t\tHitLocation,\n\tout vector\t\t\t\t\t\tHitNormal,\n\tPrimitiveComponent\t\t\t\tInComponent,\n\tvector\t\t\t\t\t\t\tTraceEnd,\n\toptional vector\t\t\t\t\tTraceStart,\n\toptional vector\t\t\t\t\tExtent,\n\toptional out TraceHitInfo\t\tHitInfo,\n\toptional bool bComplexCollision\n);\n'
p4409
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4410
sg23
S'out vector HitLocation, out vector HitNormal, PrimitiveComponent InComponent, vector TraceEnd, optional vector TraceStart, optional vector Extent, optional out TraceHitInfo HitInfo, optional bool bComplexCollision'
p4411
sg25
S'bool'
p4412
sg27
S'native noexport final'
p4413
sg29
S'TraceComponent'
p4414
sg31
I1857
sg32
I01
sba(iUnrealScriptIDEData
Function
p4415
(dp4416
g19
S'/**\n *\tRun a point check against just this PrimitiveComponent. Return TRUE if we hit.\n *  NOTE: the actual Actor we call this on is irrelevant!\n */\nnative noexport final function bool PointCheckComponent\n(\n\tPrimitiveComponent\t\t\t\tInComponent,\n\tvector\t\t\t\t\t\t\tPointLocation,\n\tvector\t\t\t\t\t\t\tPointExtent\n);\n'
p4417
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4418
sg23
S'PrimitiveComponent InComponent, vector PointLocation, vector PointExtent'
p4419
sg25
S'bool'
p4420
sg27
S'native noexport final'
p4421
sg29
S'PointCheckComponent'
p4422
sg31
I1868
sg32
I01
sba(iUnrealScriptIDEData
Function
p4423
(dp4424
g19
S'// returns true if did not hit world geometry\nnative(548) noexport final function bool FastTrace\n(\n\tvector          TraceEnd,\n\toptional vector TraceStart,\n\toptional vector BoxExtent,\n\toptional bool\tbTraceBullet\n);\n'
p4425
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4426
sg23
S'vector TraceEnd, optional vector TraceStart, optional vector BoxExtent, optional bool bTraceBullet'
p4427
sg25
S'bool'
p4428
sg27
S'native(548) noexport final'
p4429
sg29
S'FastTrace'
p4430
sg31
I1877
sg32
I01
sba(iUnrealScriptIDEData
Function
p4431
(dp4432
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4433
sg23
S'SkeletalMeshComponent SkelMeshComp, Vector EndTrace, Vector StartTrace, out Array<ImpactInfo> out_Hits, optional Vector Extent'
p4434
sg25
S'bool'
p4435
sg27
S'native noexport final'
p4436
sg29
S'TraceAllPhysicsAssetInteractions'
p4437
sg31
I1886
sg32
I01
sba(iUnrealScriptIDEData
Function
p4438
(dp4439
g19
S'/*\n * Tries to position a box to avoid overlapping world geometry.\n * If no overlap, the box is placed at SpotLocation, otherwise the position is adjusted\n * @Parameter BoxExtent is the collision extent (X and Y=CollisionRadius, Z=CollisionHeight)\n * @Parameter SpotLocation is the position where the box should be placed.  Contains the adjusted location if it is adjusted.\n * @Return true if successful in finding a valid non-world geometry overlapping location\n */\nnative final function bool FindSpot(vector BoxExtent, out vector SpotLocation);\n'
p4440
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4441
sg23
S'vector BoxExtent, out vector SpotLocation'
p4442
sg25
S'bool'
p4443
sg27
S'native final'
p4444
sg29
S'FindSpot'
p4445
sg31
I1895
sg32
I01
sba(iUnrealScriptIDEData
Function
p4446
(dp4447
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4448
sg23
S'vector Spot'
p4449
sg25
S'bool'
p4450
sg27
S'native final'
p4451
sg29
S'ContainsPoint'
p4452
sg31
I1897
sg32
I01
sba(iUnrealScriptIDEData
Function
p4453
(dp4454
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4455
sg23
S'Actor A'
p4456
sg25
S'bool'
p4457
sg27
S'native noexport final'
p4458
sg29
S'IsOverlapping'
p4459
sg31
I1898
sg32
I01
sba(iUnrealScriptIDEData
Function
p4460
(dp4461
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4462
sg23
S'out box ActorBox'
p4463
sg25
g95
sg27
S'native final'
p4464
sg29
S'GetComponentsBoundingBox'
p4465
sg31
I1899
sg32
I01
sba(iUnrealScriptIDEData
Function
p4466
(dp4467
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4468
sg23
S'out float CollisionRadius, out float CollisionHeight'
p4469
sg25
g95
sg27
S'native'
p4470
sg29
S'GetBoundingCylinder'
p4471
sg31
I1900
sg32
I01
sba(iUnrealScriptIDEData
Function
p4472
(dp4473
g19
S'/** @return whether this Actor may be blocked by any primitive of Other */\nnative final noexport function bool IsBlockedBy(const Actor Other) const;\n'
p4474
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4475
sg23
S'const Actor Other'
p4476
sg25
S'bool'
p4477
sg27
S'native final noexport'
p4478
sg29
S'IsBlockedBy'
p4479
sg31
I1903
sg32
I01
sba(iUnrealScriptIDEData
Function
p4480
(dp4481
g19
S"/** Spawn an actor. Returns an actor of the specified class, not\n * of class Actor (this is hardcoded in the compiler). Returns None\n * if the actor could not be spawned (if that happens, there will be a log warning indicating why)\n * Defaults to spawning at the spawner's location.\n *\n * @note: ActorTemplate is sent for replicated actors and therefore its properties will also be applied\n * at initial creation on the client. However, because of this, ActorTemplate must be a static resource\n * (an actor archetype, default object, or a bStatic/bNoDelete actor in a level package)\n * or the spawned Actor cannot be replicated\n */\nnative noexport final function coerce actor Spawn\n(\n\tclass<actor>      SpawnClass,\n\toptional actor\t  SpawnOwner,\n\toptional name     SpawnTag,\n\toptional vector   SpawnLocation,\n\toptional rotator  SpawnRotation,\n\toptional Actor    ActorTemplate,\n\toptional bool\t  bNoCollisionFail\n);\n"
p4482
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4483
sg23
S'class<actor> SpawnClass, optional actor SpawnOwner, optional name SpawnTag, optional vector SpawnLocation, optional rotator SpawnRotation, optional Actor ActorTemplate, optional bool bNoCollisionFail'
p4484
sg25
S'actor'
p4485
sg27
S'native noexport final'
p4486
sg29
S'Spawn'
p4487
sg31
I1924
sg32
I01
sba(iUnrealScriptIDEData
Function
p4488
(dp4489
g19
S'//\n// Destroy this actor. Returns true if destroyed, false if indestructible.\n// Destruction is latent. It occurs at the end of the tick.\n//\nnative(279) final noexport function bool Destroy();\n'
p4490
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4491
sg23
g95
sg25
S'bool'
p4492
sg27
S'native(279) final noexport'
p4493
sg29
S'Destroy'
p4494
sg31
I1930
sg32
I01
sba(iUnrealScriptIDEData
Function
p4495
(dp4496
g19
S'// Networking - called on client when actor is torn off (bTearOff==true)\nevent TornOff();\n'
p4497
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4498
sg23
g95
sg25
g95
sg27
g95
sg29
S'TornOff'
p4499
sg31
I1933
sg32
I00
sba(iUnrealScriptIDEData
Function
p4500
(dp4501
g19
S"/**\n * Sets a timer to call the given function at a set\n * interval.  Defaults to calling the 'Timer' event if\n * no function is specified.  If InRate is set to\n * 0.f it will effectively disable the previous timer.\n *\n * NOTE: Functions with parameters are not supported!\n *\n * @param InRate the amount of time to pass between firing\n * @param inbLoop whether to keep firing or only fire once\n * @param inTimerFunc the name of the function to call when the timer fires\n */\nnative(280) final function SetTimer(float InRate, optional bool inbLoop, optional Name inTimerFunc='Timer', optional Object inObj);\n"
p4502
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4503
sg23
S"float InRate, optional bool inbLoop, optional Name inTimerFunc='Timer', optional Object inObj"
p4504
sg25
g95
sg27
S'native(280) final'
p4505
sg29
S'SetTimer'
p4506
sg31
I1950
sg32
I01
sba(iUnrealScriptIDEData
Function
p4507
(dp4508
g19
S"/**\n * Clears a previously set timer, identical to calling\n * SetTimer() with a <= 0.f rate.\n *\n * @param inTimerFunc the name of the timer to remove or the default one if not specified\n */\nnative final function ClearTimer(optional Name inTimerFunc='Timer', optional Object inObj);\n"
p4509
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4510
sg23
S"optional Name inTimerFunc='Timer', optional Object inObj"
p4511
sg25
g95
sg27
S'native final'
p4512
sg29
S'ClearTimer'
p4513
sg31
I1958
sg32
I01
sba(iUnrealScriptIDEData
Function
p4514
(dp4515
g19
S'/**\n * Clears all previously set timers\n */\nnative final function ClearAllTimers(optional Object inObj);\n'
p4516
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4517
sg23
S'optional Object inObj'
p4518
sg25
g95
sg27
S'native final'
p4519
sg29
S'ClearAllTimers'
p4520
sg31
I1963
sg32
I01
sba(iUnrealScriptIDEData
Function
p4521
(dp4522
g19
S"/**\n *\tPauses/Unpauses a previously set timer\n *\n * @param bPause whether to pause/unpause the timer\n * @param inTimerFunc the name of the timer to pause or the default one if not specified\n * @param inObj object timer is attached to\n */\nnative final function PauseTimer( bool bPause, optional Name inTimerFunc='Timer', optional Object inObj );\n"
p4523
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4524
sg23
S"bool bPause, optional Name inTimerFunc='Timer', optional Object inObj"
p4525
sg25
g95
sg27
S'native final'
p4526
sg29
S'PauseTimer'
p4527
sg31
I1972
sg32
I01
sba(iUnrealScriptIDEData
Function
p4528
(dp4529
g19
S"/**\n * Returns true if the specified timer is active, defaults\n * to 'Timer' if no function is specified.\n *\n * @param inTimerFunc the name of the timer to remove or the default one if not specified\n */\nnative final function bool IsTimerActive(optional Name inTimerFunc='Timer', optional Object inObj);\n"
p4530
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4531
sg23
S"optional Name inTimerFunc='Timer', optional Object inObj"
p4532
sg25
S'bool'
p4533
sg27
S'native final'
p4534
sg29
S'IsTimerActive'
p4535
sg31
I1980
sg32
I01
sba(iUnrealScriptIDEData
Function
p4536
(dp4537
g19
S"/**\n * Gets the current count for the specified timer, defaults\n * to 'Timer' if no function is specified.  Returns -1.f\n * if the timer is not currently active.\n *\n * @param inTimerFunc the name of the timer to remove or the default one if not specified\n */\nnative final function float GetTimerCount(optional Name inTimerFunc='Timer', optional Object inObj);\n"
p4538
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4539
sg23
S"optional Name inTimerFunc='Timer', optional Object inObj"
p4540
sg25
S'float'
p4541
sg27
S'native final'
p4542
sg29
S'GetTimerCount'
p4543
sg31
I1989
sg32
I01
sba(iUnrealScriptIDEData
Function
p4544
(dp4545
g19
S"/**\n * Gets the current rate for the specified timer.\n *\n * @note: GetTimerRate('SomeTimer') - GetTimerCount('SomeTimer') is the time remaining before 'SomeTimer' is called\n *\n * @param: TimerFuncName the name of the function to check for a timer for; 'Timer' is the default\n *\n * @return the rate for the given timer, or -1.f if that timer is not active\n */\nnative final function float GetTimerRate(optional name TimerFuncName = 'Timer', optional Object inObj);\n"
p4546
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4547
sg23
S"optional name TimerFuncName = 'Timer', optional Object inObj"
p4548
sg25
S'float'
p4549
sg27
S'native final'
p4550
sg29
S'GetTimerRate'
p4551
sg31
I2000
sg32
I01
sba(iUnrealScriptIDEData
Function
p4552
(dp4553
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4554
sg23
S"optional name TimerFuncName = 'Timer', optional Object inObj"
p4555
sg25
S'float'
p4556
sg27
S'simulated final'
p4557
sg29
S'GetRemainingTimeForTimer'
p4558
sg31
I2002
sg32
I01
sba(iUnrealScriptIDEData
Function
p4559
(dp4560
g19
S'/** This will search the Timers on this actor and set the passed in TimerTimeDilation **/\nnative final function ModifyTimerTimeDilation( const name TimerName, const float InTimerTimeDilation, optional Object inObj );\n'
p4561
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4562
sg23
S'const name TimerName, const float InTimerTimeDilation, optional Object inObj'
p4563
sg25
g95
sg27
S'native final'
p4564
sg29
S'ModifyTimerTimeDilation'
p4565
sg31
I2015
sg32
I01
sba(iUnrealScriptIDEData
Function
p4566
(dp4567
g19
S'/** This will search the Timers on this actor and reset the TimerTimeDilation to 1.0f **/\nnative final function ResetTimerTimeDilation( const name TimerName, optional Object inObj );\n'
p4568
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4569
sg23
S'const name TimerName, optional Object inObj'
p4570
sg25
g95
sg27
S'native final'
p4571
sg29
S'ResetTimerTimeDilation'
p4572
sg31
I2018
sg32
I01
sba(iUnrealScriptIDEData
Function
p4573
(dp4574
g19
S'/* Create an audio component.\n * may fail and return None if sound is disabled, there are too many sounds playing, or if the Location is out of range of all listeners\n */\nnative final function AudioComponent CreateAudioComponent(SoundCue InSoundCue, optional bool bPlay, optional bool bStopWhenOwnerDestroyed, optional bool bUseLocation, optional vector SourceLocation, optional bool bAttachToSelf = true);\n'
p4575
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4576
sg23
S'SoundCue InSoundCue, optional bool bPlay, optional bool bStopWhenOwnerDestroyed, optional bool bUseLocation, optional vector SourceLocation, optional bool bAttachToSelf = true'
p4577
sg25
S'AudioComponent'
p4578
sg27
S'native final'
p4579
sg29
S'CreateAudioComponent'
p4580
sg31
I2027
sg32
I01
sba(iUnrealScriptIDEData
Function
p4581
(dp4582
g19
S"/*\n * Play a sound.  Creates an AudioComponent only if the sound is determined to be audible, and replicates the sound to clients based on optional flags\n * @param InSoundCue - the sound to play\n * @param bNotReplicated (opt) - sound is considered only for players on this machine (supercedes other flags)\n * @param bNoRepToOwner (opt) - sound is not replicated to the Owner of this Actor (typically for Inventory sounds)\n * @param bStopWhenOwnerDestroyed (opt) - whether the sound should cut out early if the playing Actor is destroyed\n * @param SoundLocation (opt) - alternate location to play the sound instead of this Actor's Location\n * @param bNoRepToRelevant (opt) - sound is not replicated to clients for which this Actor is relevant (for important sounds that are locally simulated when possible)\n */\nnative noexport final function PlaySound(SoundCue InSoundCue, optional bool bNotReplicated, optional bool bNoRepToOwner, optional bool bStopWhenOwnerDestroyed, optional vector SoundLocation, optional bool bNoRepToRelevant);\n"
p4583
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4584
sg23
S'SoundCue InSoundCue, optional bool bNotReplicated, optional bool bNoRepToOwner, optional bool bStopWhenOwnerDestroyed, optional vector SoundLocation, optional bool bNoRepToRelevant'
p4585
sg25
g95
sg27
S'native noexport final'
p4586
sg29
S'PlaySound'
p4587
sg31
I2038
sg32
I01
sba(iUnrealScriptIDEData
Function
p4588
(dp4589
g19
S"/* Inform other creatures that you've made a noise\n they might hear (they are sent a HearNoise message)\n Senders of MakeNoise should have an instigator if they are not pawns.\n*/\nnative(512) final function MakeNoise( float Loudness, optional Name NoiseType );\n"
p4590
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4591
sg23
S'float Loudness, optional Name NoiseType'
p4592
sg25
g95
sg27
S'native(512) final'
p4593
sg29
S'MakeNoise'
p4594
sg31
I2047
sg32
I01
sba(iUnrealScriptIDEData
Function
p4595
(dp4596
g19
S"/* PlayerCanSeeMe returns true if any player (server) or the local player (standalone\n * or client) has a line of sight to actor's location.\n * @param bForceLOSCheck (opt) - If set, force a line of sight check instead of relying on the occlusion checks\n */\nnative(532) final function bool PlayerCanSeeMe(optional bool bForceLOSCheck);\n"
p4597
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4598
sg23
S'optional bool bForceLOSCheck'
p4599
sg25
S'bool'
p4600
sg27
S'native(532) final'
p4601
sg29
S'PlayerCanSeeMe'
p4602
sg31
I2053
sg32
I01
sba(iUnrealScriptIDEData
Function
p4603
(dp4604
g19
S'/* epic ===============================================\n* ::SuggestTossVelocity()\n*\n* returns a recommended Toss velocity vector, given a destination and a Toss speed magnitude\n* @param TossVelocity - out param stuffed with the computed velocity to use\n* @param End - desired end point of arc\n* @param Start - desired start point of arc\n* @param TossSpeed - in the magnitude of the toss - assumed to only change due to gravity for the entire lifetime of the projectile\n* @param BaseTossZ - is an additional Z direction force added to the toss (which will not be included in the returned TossVelocity) - (defaults to 0)\n* @param DesiredZPct (optional) - is the requested pct of the toss in the z direction (0=toss horizontally, 0.5 = toss at 45 degrees).  This is the starting point for finding a toss.  (Defaults to 0.05).\n*\t\tthe purpose of this is to bias the test in cases where there is more than one solution\n* @param CollisionSize (optional) - is the size of bunding box of the tossed actor (defaults to (0,0,0)\n* @param TerminalVelocity (optional) - terminal velocity of the projectile\n* @param OverrideGravityZ (optional) - gravity inflicted upon the projectile in the z direction\n* @param bOnlyTraceUp  (optional) - when TRUE collision checks verifying the arc will only be done along the upward portion of the arc\n* @return - TRUE/FALSE depending on whether a valid arc was computed\n*/\nnative noexport final function bool SuggestTossVelocity(out vector TossVelocity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvector Destination,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvector Start,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfloat TossSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptional float BaseTossZ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptional float DesiredZPct,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptional vector CollisionSize,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptional float TerminalVelocity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptional float OverrideGravityZ /* = GetGravityZ() */,\n'
p4605
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4606
sg23
S'out vector TossVelocity, vector Destination, vector Start, float TossSpeed, optional float BaseTossZ, optional float DesiredZPct, optional vector CollisionSize, optional float TerminalVelocity,'
p4607
sg25
S'bool'
p4608
sg27
S'native noexport final'
p4609
sg29
S'SuggestTossVelocity'
p4610
sg31
I2080
sg32
I01
sba(iUnrealScriptIDEData
Function
p4611
(dp4612
g19
S'/** CalculateMinSpeedTrajectory()\n * returns a velocity that will result in a trajectory that minimizes the speed of the projectile within the given range\n * @param out_Velocity - out param stuffed with the computed velocity to use\n * @param End - desired end point of arc\n * @param Start - desired start point of arc\n * @param MaxTossSpeed - Max acceptable speed of projectile\n * @param MinTossSpeed - Min Acceptable speed of projectile\n * @param CollisionSize (optional) - is the size of bunding box of the tossed actor (defaults to (0,0,0)\n * @param TerminalVelocity (optional) - terminal velocity of the projectile\n * @param GravityZ (optional) - gravity inflicted upon the projectile in the z direction\n * @param bOnlyTraceUp  (optional) - when TRUE collision checks verifying the arc will only be done along the upward portion of the arc\n * @return - TRUE/FALSE depending on whether a valid arc was computed\n*/\nnative final function bool CalculateMinSpeedTrajectory(out vector out_Velocity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   vector End,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   vector Start,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   float MaxTossSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   float MinTossSpeed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   optional vector CollisionSize,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   optional float TerminalVelocity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   optional float GravityZ = GetGravityZ(),\n'
p4613
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4614
sg23
S'out vector out_Velocity, vector End, vector Start, float MaxTossSpeed, float MinTossSpeed, optional vector CollisionSize, optional float TerminalVelocity,'
p4615
sg25
S'bool'
p4616
sg27
S'native final'
p4617
sg29
S'CalculateMinSpeedTrajectory'
p4618
sg31
I2103
sg32
I01
sba(iUnrealScriptIDEData
Function
p4619
(dp4620
g19
S'/** returns the position the AI should move toward to reach this actor\n * accounts for AI using path lanes, cutting corners, and other special adjustments\n */\nnative final virtual function vector GetDestination(Controller C);\n'
p4621
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4622
sg23
S'Controller C'
p4623
sg25
S'vector'
p4624
sg27
S'native final virtual'
p4625
sg29
S'GetDestination'
p4626
sg31
I2109
sg32
I01
sba(iUnrealScriptIDEData
Function
p4627
(dp4628
g19
S'// Teleportation.\nfunction bool PreTeleport(Teleporter InTeleporter);\n'
p4629
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4630
sg23
S'Teleporter InTeleporter'
p4631
sg25
S'bool'
p4632
sg27
g95
sg29
S'PreTeleport'
p4633
sg31
I2115
sg32
I01
sba(iUnrealScriptIDEData
Function
p4634
(dp4635
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4636
sg23
S'Teleporter OutTeleporter'
p4637
sg25
g95
sg27
g95
sg29
S'PostTeleport'
p4638
sg31
I2116
sg32
I01
sba(iUnrealScriptIDEData
Function
p4639
(dp4640
g19
S'// Find files.\nnative(547) final function string GetURLMap();\n'
p4641
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4642
sg23
g95
sg25
S'string'
p4643
sg27
S'native(547) final'
p4644
sg29
S'GetURLMap'
p4645
sg31
I2122
sg32
I01
sba(iUnrealScriptIDEData
Function
p4646
(dp4647
g19
S'/* AllActors() - avoid using AllActors() too often as it iterates through the whole actor list and is therefore slow\n*/\nnative(304) final iterator function AllActors     ( class<actor> BaseClass, out actor Actor, optional class<Interface> InterfaceClass );\n'
p4648
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4649
sg23
S'class<actor> BaseClass, out actor Actor, optional class<Interface> InterfaceClass'
p4650
sg25
g95
sg27
S'native(304) final iterator'
p4651
sg29
S'AllActors'
p4652
sg31
I2131
sg32
I01
sba(iUnrealScriptIDEData
Function
p4653
(dp4654
g19
S"/* DynamicActors() only iterates through the non-static actors on the list (still relatively slow, but\n much better than AllActors).  This should be used in most cases and replaces AllActors in most of\n Epic's game code.\n*/\nnative(313) final iterator function DynamicActors     ( class<actor> BaseClass, out actor Actor, optional class<Interface> InterfaceClass );\n"
p4655
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4656
sg23
S'class<actor> BaseClass, out actor Actor, optional class<Interface> InterfaceClass'
p4657
sg25
g95
sg27
S'native(313) final iterator'
p4658
sg29
S'DynamicActors'
p4659
sg31
I2137
sg32
I01
sba(iUnrealScriptIDEData
Function
p4660
(dp4661
g19
S'/* ChildActors() returns all actors owned by this actor.  Slow like AllActors()\n*/\nnative(305) final iterator function ChildActors   ( class<actor> BaseClass, out actor Actor );\n'
p4662
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4663
sg23
S'class<actor> BaseClass, out actor Actor'
p4664
sg25
g95
sg27
S'native(305) final iterator'
p4665
sg29
S'ChildActors'
p4666
sg31
I2141
sg32
I01
sba(iUnrealScriptIDEData
Function
p4667
(dp4668
g19
S'/* BasedActors() returns all actors based on the current actor (fast)\n*/\nnative(306) final iterator function BasedActors   ( class<actor> BaseClass, out actor Actor );\n'
p4669
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4670
sg23
S'class<actor> BaseClass, out actor Actor'
p4671
sg25
g95
sg27
S'native(306) final iterator'
p4672
sg29
S'BasedActors'
p4673
sg31
I2145
sg32
I01
sba(iUnrealScriptIDEData
Function
p4674
(dp4675
g19
S'/* TouchingActors() returns all actors touching the current actor (fast)\n*/\nnative(307) final iterator function TouchingActors( class<actor> BaseClass, out actor Actor );\n'
p4676
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4677
sg23
S'class<actor> BaseClass, out actor Actor'
p4678
sg25
g95
sg27
S'native(307) final iterator'
p4679
sg29
S'TouchingActors'
p4680
sg31
I2149
sg32
I01
sba(iUnrealScriptIDEData
Function
p4681
(dp4682
g19
S'/* TraceActors() return all actors along a traced line.  Reasonably fast (like any trace)\n*/\nnative(309) final iterator function TraceActors   ( class<actor> BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm, vector End, optional vector Start, optional vector Extent, optional out TraceHitInfo HitInfo, optional int ExtraTraceFlags );\n'
p4683
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4684
sg23
S'class<actor> BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm, vector End, optional vector Start, optional vector Extent, optional out TraceHitInfo HitInfo, optional int ExtraTraceFlags'
p4685
sg25
g95
sg27
S'native(309) final iterator'
p4686
sg29
S'TraceActors'
p4687
sg31
I2153
sg32
I01
sba(iUnrealScriptIDEData
Function
p4688
(dp4689
g19
S"/* VisibleActors() returns all visible (not bHidden) actors within a radius\nfor which a trace from Loc (which defaults to caller's Location) to that actor's Location does not hit the world.\nSlow like AllActors(). Use VisibleCollidingActors() instead if desired actor types are in the collision hash (bCollideActors is true)\n*/\nnative(311) final iterator function VisibleActors ( class<actor> BaseClass, out actor Actor, optional float Radius, optional vector Loc );\n"
p4690
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4691
sg23
S'class<actor> BaseClass, out actor Actor, optional float Radius, optional vector Loc'
p4692
sg25
g95
sg27
S'native(311) final iterator'
p4693
sg29
S'VisibleActors'
p4694
sg31
I2159
sg32
I01
sba(iUnrealScriptIDEData
Function
p4695
(dp4696
g19
S"/* VisibleCollidingActors() returns all colliding (bCollideActors==true) actors within a certain radius\nfor which a trace from Loc (which defaults to caller's Location) to that actor's Location does not hit the world.\nMuch faster than AllActors() since it uses the collision octree\nbUseOverlapCheck uses a sphere vs. box check instead of checking to see if the center of an object lies within a sphere\n*/\nnative(312) final iterator function VisibleCollidingActors ( class<actor> BaseClass, out actor Actor, float Radius, optional vector Loc, optional bool bIgnoreHidden, optional vector Extent, optional bool bTraceActors, optional class<Interface> InterfaceClass, optional out TraceHitInfo HitInfo );\n"
p4697
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4698
sg23
S'class<actor> BaseClass, out actor Actor, float Radius, optional vector Loc, optional bool bIgnoreHidden, optional vector Extent, optional bool bTraceActors, optional class<Interface> InterfaceClass, optional out TraceHitInfo HitInfo'
p4699
sg25
g95
sg27
S'native(312) final iterator'
p4700
sg29
S'VisibleCollidingActors'
p4701
sg31
I2166
sg32
I01
sba(iUnrealScriptIDEData
Function
p4702
(dp4703
g19
S'/* CollidingActors() returns colliding (bCollideActors==true) actors within a certain radius.\nMuch faster than AllActors() for reasonably small radii since it uses the collision octree\nbUseOverlapCheck uses a sphere vs. box check instead of checking to see if the center of an object lies within a sphere\n*/\nnative(321) final iterator function CollidingActors ( class<actor> BaseClass, out actor Actor, float Radius, optional vector Loc, optional bool bUseOverlapCheck, optional class<Interface> InterfaceClass, optional out TraceHitInfo HitInfo );\n'
p4704
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4705
sg23
S'class<actor> BaseClass, out actor Actor, float Radius, optional vector Loc, optional bool bUseOverlapCheck, optional class<Interface> InterfaceClass, optional out TraceHitInfo HitInfo'
p4706
sg25
g95
sg27
S'native(321) final iterator'
p4707
sg29
S'CollidingActors'
p4708
sg31
I2172
sg32
I01
sba(iUnrealScriptIDEData
Function
p4709
(dp4710
g19
S"/**\n * Returns colliding (bCollideActors==true) which overlap a Sphere from location 'Loc' and 'Radius' radius.\n *\n * @param BaseClass\t\tThe Actor returns must be a subclass of this.\n * @param out_Actor\t\treturned Actor at each iteration.\n * @param Radius\t\tRadius of sphere for overlapping check.\n * @param Loc\t\t\tCenter of sphere for overlapping check. (Optional, caller's location is used otherwise).\n * @param bIgnoreHidden\tif true, ignore bHidden actors.\n */\nnative final iterator function OverlappingActors( class<Actor> BaseClass, out Actor out_Actor, float Radius, optional vector Loc, optional bool bIgnoreHidden );\n"
p4711
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4712
sg23
S'class<Actor> BaseClass, out Actor out_Actor, float Radius, optional vector Loc, optional bool bIgnoreHidden'
p4713
sg25
g95
sg27
S'native final iterator'
p4714
sg29
S'OverlappingActors'
p4715
sg31
I2183
sg32
I01
sba(iUnrealScriptIDEData
Function
p4716
(dp4717
g19
S'/** returns each component in the Components list */\nnative final iterator function ComponentList(class<ActorComponent> BaseClass, out ActorComponent out_Component);\n'
p4718
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4719
sg23
S'class<ActorComponent> BaseClass, out ActorComponent out_Component'
p4720
sg25
g95
sg27
S'native final iterator'
p4721
sg29
S'ComponentList'
p4722
sg31
I2186
sg32
I01
sba(iUnrealScriptIDEData
Function
p4723
(dp4724
g19
S'/**\n * Iterates over all components directly or indirectly attached to this actor.\n * @param BaseClass - Only components deriving from BaseClass will be iterated upon.\n * @param OutComponent - The iteration variable.\n */\nnative final iterator function AllOwnedComponents(class<Component> BaseClass, out ActorComponent OutComponent);\n'
p4725
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4726
sg23
S'class<Component> BaseClass, out ActorComponent OutComponent'
p4727
sg25
g95
sg27
S'native final iterator'
p4728
sg29
S'AllOwnedComponents'
p4729
sg31
I2193
sg32
I01
sba(iUnrealScriptIDEData
Function
p4730
(dp4731
g19
S'/**\n iterator LocalPlayerControllers()\n returns all locally rendered/controlled player controllers (typically 1 per client, unless split screen)\n*/\nnative final iterator function LocalPlayerControllers(class<PlayerController> BaseClass, out PlayerController PC);\n'
p4732
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4733
sg23
S'class<PlayerController> BaseClass, out PlayerController PC'
p4734
sg25
g95
sg27
S'native final iterator'
p4735
sg29
S'LocalPlayerControllers'
p4736
sg31
I2199
sg32
I01
sba(iUnrealScriptIDEData
Function
p4737
(dp4738
g19
S'/** Return first found LocalPlayerController. Fine for single player, in split screen, one will be picked. */\nnative final function PlayerController GetALocalPlayerController();\n'
p4739
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4740
sg23
g95
sg25
S'PlayerController'
p4741
sg27
S'native final'
p4742
sg29
S'GetALocalPlayerController'
p4743
sg31
I2201
sg32
I01
sba(iUnrealScriptIDEData
Function
p4744
(dp4745
g19
S'//\n// Called immediately before gameplay begins.\n//\nevent PreBeginPlay()\n'
p4746
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4747
sg23
g95
sg25
g95
sg27
g95
sg29
S'PreBeginPlay'
p4748
sg31
I2209
sg32
I00
sba(iUnrealScriptIDEData
Function
p4749
(dp4750
g19
S"//\n// Broadcast a localized message to all players.\n// Most message deal with 0 to 2 related PRIs.\n// The LocalMessage class defines how the PRI's and optional actor are used.\n//\nevent BroadcastLocalizedMessage( class<LocalMessage> InMessageClass, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject )\n"
p4751
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4752
sg23
S'class<LocalMessage> InMessageClass, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject'
p4753
sg25
g95
sg27
g95
sg29
S'BroadcastLocalizedMessage'
p4754
sg31
I2230
sg32
I00
sba(iUnrealScriptIDEData
Function
p4755
(dp4756
g19
S"//\n// Broadcast a localized message to all players on a team.\n// Most message deal with 0 to 2 related PRIs.\n// The LocalMessage class defines how the PRI's and optional actor are used.\n//\nevent BroadcastLocalizedTeamMessage( int TeamIndex, class<LocalMessage> InMessageClass, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject )\n"
p4757
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4758
sg23
S'int TeamIndex, class<LocalMessage> InMessageClass, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject'
p4759
sg25
g95
sg27
g95
sg29
S'BroadcastLocalizedTeamMessage'
p4760
sg31
I2240
sg32
I00
sba(iUnrealScriptIDEData
Function
p4761
(dp4762
g19
S'// Called immediately after gameplay begins.\n//\nevent PostBeginPlay();\n'
p4763
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4764
sg23
g95
sg25
g95
sg27
g95
sg29
S'PostBeginPlay'
p4765
sg31
I2247
sg32
I00
sba(iUnrealScriptIDEData
Function
p4766
(dp4767
g19
S'// Called after PostBeginPlay.\n//\nsimulated event SetInitialState()\n'
p4768
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4769
sg23
g95
sg25
g95
sg27
S'simulated'
p4770
sg29
S'SetInitialState'
p4771
sg31
I2251
sg32
I00
sba(iUnrealScriptIDEData
Function
p4772
(dp4773
g19
S'/**\n * When a constraint is broken we will get this event from c++ land.\n **/\nsimulated event ConstraintBrokenNotify( Actor ConOwner, RB_ConstraintSetup ConSetup, RB_ConstraintInstance ConInstance  )\n'
p4774
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4775
sg23
S'Actor ConOwner, RB_ConstraintSetup ConSetup, RB_ConstraintInstance ConInstance'
p4776
sg25
g95
sg27
S'simulated'
p4777
sg29
S'ConstraintBrokenNotify'
p4778
sg31
I2264
sg32
I00
sba(iUnrealScriptIDEData
Function
p4779
(dp4780
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4781
sg23
S'SkelControlLookAt LookAt'
p4782
sg25
g95
sg27
S'simulated'
p4783
sg29
S'NotifySkelControlBeyondLimit'
p4784
sg31
I2269
sg32
I00
sba(iUnrealScriptIDEData
Function
p4785
(dp4786
g19
S'/* epic ===============================================\n* ::StopsProjectile()\n*\n* returns true if Projectiles should call ProcessTouch() when they touch this actor\n*/\nsimulated function bool StopsProjectile(Projectile P)\n'
p4787
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4788
sg23
S'Projectile P'
p4789
sg25
S'bool'
p4790
sg27
S'simulated'
p4791
sg29
S'StopsProjectile'
p4792
sg31
I2276
sg32
I01
sba(iUnrealScriptIDEData
Function
p4793
(dp4794
g19
S'/* HurtRadius()\n Hurt locally authoritative actors within the radius.\n*/\nsimulated function bool HurtRadius\n(\n\tfloat\t\t\t\tBaseDamage,\n\tfloat\t\t\t\tDamageRadius,\n\tclass<DamageType>\tDamageType,\n\tfloat\t\t\t\tMomentum,\n\tvector\t\t\t\tHurtOrigin,\n\toptional Actor\t\tIgnoredActor,\n\toptional Controller InstigatedByController = Instigator != None ? Instigator.Controller : None,\n\toptional bool       bDoFullDamage\n)\n'
p4795
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4796
sg23
S'float BaseDamage, float DamageRadius, class<DamageType> DamageType, float Momentum, vector HurtOrigin, optional Actor IgnoredActor, optional Controller InstigatedByController = Instigator != None ? Instigator.Controller : None, optional bool bDoFullDamage'
p4797
sg25
S'bool'
p4798
sg27
S'simulated'
p4799
sg29
S'HurtRadius'
p4800
sg31
I2294
sg32
I01
sba(iUnrealScriptIDEData
Function
p4801
(dp4802
g19
S'//\n// Damage and kills.\n//\nfunction KilledBy( pawn EventInstigator );\n'
p4803
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4804
sg23
S'pawn EventInstigator'
p4805
sg25
g95
sg27
g95
sg29
S'KilledBy'
p4806
sg31
I2337
sg32
I01
sba(iUnrealScriptIDEData
Function
p4807
(dp4808
g19
S'/** apply some amount of damage to this actor\n * @param DamageAmount the base damage to apply\n * @param EventInstigator the Controller responsible for the damage\n * @param HitLocation world location where the hit occurred\n * @param Momentum force caused by this hit\n * @param DamageType class describing the damage that was done\n * @param HitInfo additional info about where the hit occurred\n * @param DamageCauser the Actor that directly caused the damage (i.e. the Projectile that exploded, the Weapon that fired, etc)\n */\nevent TakeDamage(int DamageAmount, Controller EventInstigator, vector HitLocation, vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser)\n'
p4809
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4810
sg23
S'int DamageAmount, Controller EventInstigator, vector HitLocation, vector Momentum, class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser'
p4811
sg25
g95
sg27
g95
sg29
S'TakeDamage'
p4812
sg31
I2348
sg32
I00
sba(iUnrealScriptIDEData
Function
p4813
(dp4814
g19
S'/**\n * the reverse of TakeDamage(); heals the specified amount\n *\n * @param\tAmount\t\tThe amount of damage to heal\n * @param\tHealer\t\tWho is doing the healing\n * @param\tDamageType\tWhat type of healing is it\n */\nevent bool HealDamage(int Amount, Controller Healer, class<DamageType> DamageType);\n'
p4815
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4816
sg23
S'int Amount, Controller Healer, class<DamageType> DamageType'
p4817
sg25
S'bool'
p4818
sg27
g95
sg29
S'HealDamage'
p4819
sg31
I2370
sg32
I00
sba(iUnrealScriptIDEData
Function
p4820
(dp4821
g19
S"/**\n * Take Radius Damage\n * by default scales damage based on distance from HurtOrigin to Actor's location.\n * This can be overridden by the actor receiving the damage for special conditions (see KAsset.uc).\n * This then calls TakeDamage() to go through the same damage pipeline.\n *\n * @param\tInstigatedBy, instigator of the damage\n * @param\tBaseDamage\n * @param\tDamageRadius (from Origin)\n * @param\tDamageType class\n * @param\tMomentum (float)\n * @param\tHurtOrigin, origin of the damage radius.\n * @param\tbFullDamage, if true, damage not scaled based on distance HurtOrigin\n * @param   DamageCauser the Actor that directly caused the damage (i.e. the Projectile that exploded, the Weapon that fired, etc)\n * @param   DamageFalloff allows for nonlinear damage falloff from the point.  Default is linera.\n *\n * @return  Returns amount of damage applied.\n */\nsimulated function TakeRadiusDamage\n(\n\tController\t\t\tInstigatedBy,\n\tfloat\t\t\t\tBaseDamage,\n\tfloat\t\t\t\tDamageRadius,\n\tclass<DamageType>\tDamageType,\n\tfloat\t\t\t\tMomentum,\n\tvector\t\t\t\tHurtOrigin,\n\tbool\t\t\t\tbFullDamage,\n\tActor               DamageCauser,\n\toptional float      DamageFalloffExponent=1.f\n)\n"
p4822
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4823
sg23
S'Controller InstigatedBy, float BaseDamage, float DamageRadius, class<DamageType> DamageType, float Momentum, vector HurtOrigin, bool bFullDamage, Actor DamageCauser, optional float DamageFalloffExponent=1.f'
p4824
sg25
g95
sg27
S'simulated'
p4825
sg29
S'TakeRadiusDamage'
p4826
sg31
I2401
sg32
I01
sba(iUnrealScriptIDEData
Function
p4827
(dp4828
g19
S"/**\n * Make sure we pass along a valid HitInfo struct for damage.\n * The main reason behind this is that SkeletalMeshes do require a BoneName to receive and process an impulse...\n * So if we don't have access to it (through touch() or for any non trace damage results), we need to perform an extra trace call().\n *\n * @param\tHitInfo, initial structure to check\n * @param\tFallBackComponent, PrimitiveComponent to use if HitInfo.HitComponent is none\n * @param\tDir, Direction to use if a Trace needs to be performed to find BoneName on skeletalmesh. Trace from HitLocation.\n * @param\tout_HitLocation, HitLocation to use for potential Trace, will get updated by Trace.\n */\nfinal simulated function CheckHitInfo\n(\n\tout\tTraceHitInfo\t\tHitInfo,\n\t\tPrimitiveComponent\tFallBackComponent,\n\t\tVector\t\t\t\tDir,\n\tout Vector\t\t\t\tout_HitLocation\n)\n"
p4829
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4830
sg23
S'out TraceHitInfo HitInfo, PrimitiveComponent FallBackComponent, Vector Dir, out Vector out_HitLocation'
p4831
sg25
g95
sg27
S'final simulated'
p4832
sg29
S'CheckHitInfo'
p4833
sg31
I2455
sg32
I01
sba(iUnrealScriptIDEData
Function
p4834
(dp4835
g19
S'/**\n * Get gravity currently affecting this actor\n */\nnative function float GetGravityZ();\n'
p4836
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4837
sg23
g95
sg25
S'float'
p4838
sg27
S'native'
p4839
sg29
S'GetGravityZ'
p4840
sg31
I2521
sg32
I01
sba(iUnrealScriptIDEData
Function
p4841
(dp4842
g19
S'/**\n * Debug Freeze Game\n * dumps the current script function stack and pauses the game with PlayersOnly (still allowing the player to move around).\n */\nevent DebugFreezeGame(optional Actor ActorToLookAt)\n'
p4843
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4844
sg23
S'optional Actor ActorToLookAt'
p4845
sg25
g95
sg27
g95
sg29
S'DebugFreezeGame'
p4846
sg31
I2527
sg32
I00
sba(iUnrealScriptIDEData
Function
p4847
(dp4848
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4849
sg23
g95
sg25
S'bool'
p4850
sg27
g95
sg29
S'CheckForErrors'
p4851
sg31
I2546
sg32
I01
sba(iUnrealScriptIDEData
Function
p4852
(dp4853
g19
S'/* BecomeViewTarget\n\tCalled by Camera when this actor becomes its ViewTarget */\nevent BecomeViewTarget( PlayerController PC );\n'
p4854
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4855
sg23
S'PlayerController PC'
p4856
sg25
g95
sg27
g95
sg29
S'BecomeViewTarget'
p4857
sg31
I2550
sg32
I00
sba(iUnrealScriptIDEData
Function
p4858
(dp4859
g19
S'/* EndViewTarget\n\tCalled by Camera when this actor no longer its ViewTarget */\nevent EndViewTarget( PlayerController PC );\n'
p4860
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4861
sg23
S'PlayerController PC'
p4862
sg25
g95
sg27
g95
sg29
S'EndViewTarget'
p4863
sg31
I2554
sg32
I00
sba(iUnrealScriptIDEData
Function
p4864
(dp4865
g19
S'/**\n *\tCalculate camera view point, when viewing this actor.\n *\n * @param\tfDeltaTime\tdelta time seconds since last update\n * @param\tout_CamLoc\tCamera Location\n * @param\tout_CamRot\tCamera Rotation\n * @param\tout_FOV\t\tField of View\n *\n * @return\ttrue if Actor should provide the camera point of view.\n */\nsimulated function bool CalcCamera( float fDeltaTime, out vector out_CamLoc, out rotator out_CamRot, out float out_FOV )\n'
p4866
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4867
sg23
S'float fDeltaTime, out vector out_CamLoc, out rotator out_CamRot, out float out_FOV'
p4868
sg25
S'bool'
p4869
sg27
S'simulated'
p4870
sg29
S'CalcCamera'
p4871
sg31
I2566
sg32
I01
sba(iUnrealScriptIDEData
Function
p4872
(dp4873
g19
S'// Returns the string representation of the name of an object without the package\n// prefixes.\n//\nsimulated function String GetItemName( string FullName )\n'
p4874
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4875
sg23
S'string FullName'
p4876
sg25
S'String'
p4877
sg27
S'simulated'
p4878
sg29
S'GetItemName'
p4879
sg31
I2588
sg32
I01
sba(iUnrealScriptIDEData
Function
p4880
(dp4881
g19
S'// Returns the human readable string representation of an object.\n//\nsimulated function String GetHumanReadableName()\n'
p4882
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4883
sg23
g95
sg25
S'String'
p4884
sg27
S'simulated'
p4885
sg29
S'GetHumanReadableName'
p4886
sg31
I2604
sg32
I01
sba(iUnrealScriptIDEData
Function
p4887
(dp4888
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4889
sg23
S'out string Text, string Replace, string With'
p4890
sg25
g95
sg27
S'static'
p4891
sg29
S'ReplaceText'
p4892
sg31
I2609
sg32
I01
sba(iUnrealScriptIDEData
Function
p4893
(dp4894
g19
S'// Get localized message string associated with this actor\nstatic function string GetLocalString(\n\toptional int Switch,\n\toptional PlayerReplicationInfo RelatedPRI_1,\n\toptional PlayerReplicationInfo RelatedPRI_2\n\t)\n'
p4895
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4896
sg23
S'optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2'
p4897
sg25
S'string'
p4898
sg27
S'static'
p4899
sg29
S'GetLocalString'
p4900
sg31
I2631
sg32
I01
sba(iUnrealScriptIDEData
Function
p4901
(dp4902
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4903
sg23
g95
sg25
g95
sg27
g95
sg29
S'MatchStarting'
p4904
sg31
I2636
sg32
I01
sba(iUnrealScriptIDEData
Function
p4905
(dp4906
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4907
sg23
g95
sg25
S'String'
p4908
sg27
g95
sg29
S'GetDebugName'
p4909
sg31
I2638
sg32
I01
sba(iUnrealScriptIDEData
Function
p4910
(dp4911
g19
S'/**\n * list important Actor variables on canvas.  HUD will call DisplayDebug() on the current ViewTarget when\n * the ShowDebug exec is used\n *\n * @param\tHUD\t\t- HUD with canvas to draw on\n * @input\tout_YL\t\t- Height of the current font\n * @input\tout_YPos\t- Y position on Canvas. out_YPos += out_YL, gives position to draw text for next debug line.\n */\nsimulated function DisplayDebug(HUD HUD, out float out_YL, out float out_YPos)\n'
p4912
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4913
sg23
S'HUD HUD, out float out_YL, out float out_YPos'
p4914
sg25
g95
sg27
S'simulated'
p4915
sg29
S'DisplayDebug'
p4916
sg31
I2651
sg32
I01
sba(iUnrealScriptIDEData
Function
p4917
(dp4918
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4919
sg23
g95
sg25
S'String'
p4920
sg27
S'simulated'
p4921
sg29
S'GetPhysicsName'
p4922
sg31
I2758
sg32
I01
sba(iUnrealScriptIDEData
Function
p4923
(dp4924
g19
S'/** called when a sound is going to be played on this Actor via PlayerController::ClientHearSound()\n * gives it a chance to modify the component that will be used (add parameter values, etc)\n */\nsimulated event ModifyHearSoundComponent(AudioComponent AC);\n'
p4925
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4926
sg23
S'AudioComponent AC'
p4927
sg25
g95
sg27
S'simulated'
p4928
sg29
S'ModifyHearSoundComponent'
p4929
sg31
I2782
sg32
I00
sba(iUnrealScriptIDEData
Function
p4930
(dp4931
g19
S'/**\n *\tFunction for allowing you to tell FaceFX which AudioComponent it should use for playing audio\n *\tfor corresponding facial animation.\n */\nsimulated event AudioComponent GetFaceFXAudioComponent()\n'
p4932
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4933
sg23
g95
sg25
S'AudioComponent'
p4934
sg27
S'simulated'
p4935
sg29
S'GetFaceFXAudioComponent'
p4936
sg31
I2788
sg32
I00
sba(iUnrealScriptIDEData
Function
p4937
(dp4938
g19
S'/**\n  * Reset actor to initial state - used when restarting level without reloading.\n  */\nevent Reset();\n'
p4939
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4940
sg23
g95
sg25
g95
sg27
g95
sg29
S'Reset'
p4941
sg31
I2796
sg32
I00
sba(iUnrealScriptIDEData
Function
p4942
(dp4943
g19
S'/**\n  * @RETURN true if this actor is touching a pain causing volume\n  */\nfunction bool IsInPain()\n'
p4944
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4945
sg23
g95
sg25
S'bool'
p4946
sg27
g95
sg29
S'IsInPain'
p4947
sg31
I2801
sg32
I01
sba(iUnrealScriptIDEData
Function
p4948
(dp4949
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4950
sg23
S'bool bOut, bool bSound'
p4951
sg25
g95
sg27
g95
sg29
S'PlayTeleportEffect'
p4952
sg31
I2811
sg32
I01
sba(iUnrealScriptIDEData
Function
p4953
(dp4954
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4955
sg23
g95
sg25
S'bool'
p4956
sg27
S'simulated'
p4957
sg29
S'CanSplash'
p4958
sg31
I2813
sg32
I01
sba(iUnrealScriptIDEData
Function
p4959
(dp4960
g19
S'/** Called when this actor touches a fluid surface */\nsimulated function ApplyFluidSurfaceImpact( FluidSurfaceActor Fluid, vector HitLocation)\n'
p4961
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4962
sg23
S'FluidSurfaceActor Fluid, vector HitLocation'
p4963
sg25
g95
sg27
S'simulated'
p4964
sg29
S'ApplyFluidSurfaceImpact'
p4965
sg31
I2819
sg32
I01
sba(iUnrealScriptIDEData
Function
p4966
(dp4967
g19
S'/** OBSOLETE, replaced by ActorEffectIsRelevant and ImpactEffectIsRelevant */\nsimulated function bool EffectIsRelevant(vector SpawnLocation, bool bForceDedicated, optional float VisibleCullDistance=5000.0, optional float HiddenCullDistance=350.0 )\n'
p4968
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4969
sg23
S'vector SpawnLocation, bool bForceDedicated, optional float VisibleCullDistance=5000.0, optional float HiddenCullDistance=350.0'
p4970
sg25
S'bool'
p4971
sg27
S'simulated'
p4972
sg29
S'EffectIsRelevant'
p4973
sg31
I2832
sg32
I01
sba(iUnrealScriptIDEData
Function
p4974
(dp4975
g19
S"/**\n  * Determine whether an effect being spawned on this actor\n  * is relevant to the local client (to determine whether it really needs to be spawned).\n  * Intended for use only with short lived effects\n  * NOTE: Use ImpactEffectIsRelevant if the actor is not rendered!\n  *\n  * @PARAM EffectInstigator:  Instigator os this effect - always relevant if instigated by local player\n  * @PARAM SpawnLocation:  Location where effect is being spawned.  If being spawned attached to this actor, use this actor's location to take advantage of check for whether actor is being rendered.\n  * @PARAM bForceDedicated:  Whether effect should always be spawned on dedicated server (if effect is replicated to clients)\n  * @PARAM CullDistance:  Max distance to spawn this effect if SpawnLocation is visible to the local player\n  * @PARAM HiddenCullDistance:  Max distance to spawn this effect if SpawnLocation is not visible to the local player\n  */\nsimulated function bool ActorEffectIsRelevant(Pawn EffectInstigator, bool bForceDedicated, optional float VisibleCullDistance=5000.0, optional float HiddenCullDistance=350.0 )\n"
p4976
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4977
sg23
S'Pawn EffectInstigator, bool bForceDedicated, optional float VisibleCullDistance=5000.0, optional float HiddenCullDistance=350.0'
p4978
sg25
S'bool'
p4979
sg27
S'simulated'
p4980
sg29
S'ActorEffectIsRelevant'
p4981
sg31
I2852
sg32
I01
sba(iUnrealScriptIDEData
Function
p4982
(dp4983
g19
S'/**\n  * Determine whether an effect being spawned at some spot in  the world\n  * is relevant to the local client (to determine whether it really needs to be spawned).\n  * Intended for use only with short lived effects\n  *\n  * @PARAM EffectInstigator:  Instigator os this effect - always relevant if instigated by local player\n  * @PARAM SpawnLocation:  Location where effect is being spawned.  If being spawned attached to this actor, use this actor\'s location to take advantage of check for whether actor is being rendered.\n  * @PARAM bForceDedicated:  Whether effect should always be spawned on dedicated server (if effect is replicated to clients)\n  * @PARAM CullDistance:  Max distance to spawn this effect if SpawnLocation is visible to the local player\n  * @PARAM HiddenCullDistance:  Max distance to spawn this effect if SpawnLocation is not visible to the local player\n  * @PARAM bSkipLOSCheck:  If true, don\'t perform a LOS trace, as the object is "big" like an explosion and a LOS would be inaccurate\n  */\nsimulated function bool ImpactEffectIsRelevant(Pawn EffectInstigator, vector SpawnLocation, bool bForceDedicated, optional float VisibleCullDistance=5000.0, optional float HiddenCullDistance=350.0, optional bool bSkipLOSCheck )\n'
p4984
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4985
sg23
S'Pawn EffectInstigator, vector SpawnLocation, bool bForceDedicated, optional float VisibleCullDistance=5000.0, optional float HiddenCullDistance=350.0, optional bool bSkipLOSCheck'
p4986
sg25
S'bool'
p4987
sg27
S'simulated'
p4988
sg29
S'ImpactEffectIsRelevant'
p4989
sg31
I2920
sg32
I01
sba(iUnrealScriptIDEData
Function
p4990
(dp4991
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4992
sg23
S'coerce String Msg'
p4993
sg25
g95
sg27
S'final'
p4994
sg29
S'DebugMessagePlayer'
p4995
sg31
I2991
sg32
I00
sba(iUnrealScriptIDEData
Function
p4996
(dp4997
g19
S'/** Convenience function for triggering events in the GeneratedEvents list\n * If you need more options (activating multiple outputs, etc), call ActivateEventClass() directly\n */\nsimulated function bool TriggerEventClass(class<SequenceEvent> InEventClass, Actor InInstigator, optional int ActivateIndex = -1, optional bool bTest, optional out array<SequenceEvent> ActivatedEvents)\n'
p4998
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p4999
sg23
S'class<SequenceEvent> InEventClass, Actor InInstigator, optional int ActivateIndex = -1, optional bool bTest, optional out array<SequenceEvent> ActivatedEvents'
p5000
sg25
S'bool'
p5001
sg27
S'simulated'
p5002
sg29
S'TriggerEventClass'
p5003
sg31
I3013
sg32
I01
sba(iUnrealScriptIDEData
Function
p5004
(dp5005
g19
S'/** Called by SeqAct_AttachToEvent when a duplicate event is added to this actor at run-time */\nsimulated event ReceivedNewEvent(SequenceEvent Evt)\n'
p5006
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5007
sg23
S'SequenceEvent Evt'
p5008
sg25
g95
sg27
S'simulated'
p5009
sg29
S'ReceivedNewEvent'
p5010
sg31
I3025
sg32
I00
sba(iUnrealScriptIDEData
Function
p5011
(dp5012
g19
S'/** trigger a "global" Kismet event (one that doesn\'t have an Originator, generally because it\'s triggered by a game-time object) */\nsimulated function bool TriggerGlobalEventClass(class<SequenceEvent> InEventClass, Actor InInstigator, optional int ActivateIndex = -1)\n'
p5013
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5014
sg23
S'class<SequenceEvent> InEventClass, Actor InInstigator, optional int ActivateIndex = -1'
p5015
sg25
S'bool'
p5016
sg27
S'simulated'
p5017
sg29
S'TriggerGlobalEventClass'
p5018
sg31
I3030
sg32
I01
sba(iUnrealScriptIDEData
Function
p5019
(dp5020
g19
S'/**\n * Iterates through the given list of events and looks for all\n * matching events, activating them as found.\n *\n * @return\t\ttrue if an event was found and activated\n */\nsimulated final function bool ActivateEventClass( class<SequenceEvent> InClass, Actor InInstigator, const out array<SequenceEvent> EventList,\n\t\t\t\t\toptional const out array<int> ActivateIndices, optional bool bTest, optional out array<SequenceEvent> ActivatedEvents )\n'
p5021
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5022
sg23
S'class<SequenceEvent> InClass, Actor InInstigator, const out array<SequenceEvent> EventList,'
p5023
sg25
S'bool'
p5024
sg27
S'simulated final'
p5025
sg29
S'ActivateEventClass'
p5026
sg31
I3066
sg32
I01
sba(iUnrealScriptIDEData
Function
p5027
(dp5028
g19
S'/**\n * Builds a list of all events of the specified class.\n *\n * @param\teventClass - type of event to search for\n * @param\tout_EventList - list of found events\n * @param   bIncludeDisabled - will not filter out the events with bEnabled = FALSE\n *\n * @return\ttrue if any events were found\n */\nsimulated final function bool FindEventsOfClass(class<SequenceEvent> EventClass, optional out array<SequenceEvent> out_EventList, optional bool bIncludeDisabled)\n'
p5029
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5030
sg23
S'class<SequenceEvent> EventClass, optional out array<SequenceEvent> out_EventList, optional bool bIncludeDisabled'
p5031
sg25
S'bool'
p5032
sg27
S'simulated final'
p5033
sg29
S'FindEventsOfClass'
p5034
sg31
I3090
sg32
I01
sba(iUnrealScriptIDEData
Function
p5035
(dp5036
g19
S'/**\n * Clears all latent actions of the specified class.\n *\n * @param\tactionClass - type of latent action to clear\n * @param\tbAborted - was this latent action aborted?\n * @param\texceptionAction - action to skip\n */\nsimulated final function ClearLatentAction(class<SeqAct_Latent> actionClass,optional bool bAborted,optional SeqAct_Latent exceptionAction)\n'
p5037
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5038
sg23
S'class<SeqAct_Latent> actionClass,optional bool bAborted,optional SeqAct_Latent exceptionAction'
p5039
sg25
g95
sg27
S'simulated final'
p5040
sg29
S'ClearLatentAction'
p5041
sg31
I3112
sg32
I01
sba(iUnrealScriptIDEData
Function
p5042
(dp5043
g19
S'/**\n * If this actor is not already scheduled for destruction,\n * destroy it now.\n */\nsimulated function OnDestroy(SeqAct_Destroy Action)\n'
p5044
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5045
sg23
S'SeqAct_Destroy Action'
p5046
sg25
g95
sg27
S'simulated'
p5047
sg29
S'OnDestroy'
p5048
sg31
I3142
sg32
I01
sba(iUnrealScriptIDEData
Function
p5049
(dp5050
g19
S'/** forces this actor to be net relevant if it is not already\n * by default, only works on level placed actors (bNoDelete)\n */\nevent ForceNetRelevant()\n'
p5051
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5052
sg23
g95
sg25
g95
sg27
g95
sg29
S'ForceNetRelevant'
p5053
sg31
I3182
sg32
I00
sba(iUnrealScriptIDEData
Function
p5054
(dp5055
g19
S'/** Updates NetUpdateTime to the new value for future net relevancy checks */\nfinal native function SetNetUpdateTime(float NewUpdateTime);\n'
p5056
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5057
sg23
S'float NewUpdateTime'
p5058
sg25
g95
sg27
S'final native'
p5059
sg29
S'SetNetUpdateTime'
p5060
sg31
I3194
sg32
I01
sba(iUnrealScriptIDEData
Function
p5061
(dp5062
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5063
sg23
g95
sg25
g95
sg27
S'simulated'
p5064
sg29
S'ShutDown'
p5065
sg31
I3200
sg32
I00
sba(iUnrealScriptIDEData
Function
p5066
(dp5067
g19
S"/**\n *\tCalls PrestreamTextures() for all the actor's meshcomponents.\n *\t@param Seconds\t\t\tNumber of seconds to force all mip-levels to be resident\n *\t@param bEnableStreaming\tWhether to start (TRUE) or stop (FALSE) streaming\n *\t@param CinematicTextureGroups\tBitfield indicating which texture groups that use extra high-resolution mips\n */\nnative function PrestreamTextures( float Seconds, bool bEnableStreaming, optional int CinematicTextureGroups = 0 );\n"
p5068
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5069
sg23
S'float Seconds, bool bEnableStreaming, optional int CinematicTextureGroups = 0'
p5070
sg25
g95
sg27
S'native'
p5071
sg29
S'PrestreamTextures'
p5072
sg31
I3240
sg32
I01
sba(iUnrealScriptIDEData
Function
p5073
(dp5074
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5075
sg23
S'SeqAct_ModifyHealth Action'
p5076
sg25
g95
sg27
S'simulated'
p5077
sg29
S'OnModifyHealth'
p5078
sg31
I3242
sg32
I01
sba(iUnrealScriptIDEData
Function
p5079
(dp5080
g19
S'/**\n * Called upon receiving a SeqAct_Teleport action.  Grabs\n * the first destination available and attempts to teleport\n * this actor.\n *\n * @param\tAction - teleport action that was activated\n */\nsimulated function OnTeleport(SeqAct_Teleport Action)\n'
p5081
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5082
sg23
S'SeqAct_Teleport Action'
p5083
sg25
g95
sg27
S'simulated'
p5084
sg29
S'OnTeleport'
p5085
sg31
I3274
sg32
I01
sba(iUnrealScriptIDEData
Function
p5086
(dp5087
g19
S'/**\n *\tHandler for the SeqAct_SetVelocity action. Allows level designer to impart a velocity on the actor.\n */\nsimulated function OnSetVelocity( SeqAct_SetVelocity Action )\n'
p5088
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5089
sg23
S'SeqAct_SetVelocity Action'
p5090
sg25
g95
sg27
S'simulated'
p5091
sg29
S'OnSetVelocity'
p5092
sg31
I3359
sg32
I01
sba(iUnrealScriptIDEData
Function
p5093
(dp5094
g19
S'/**\n *\tHandler for the SeqAct_SetBlockRigidBody action. Allows level designer to toggle the rigid-body blocking\n *\tflag on an Actor, and will handle updating the physics engine etc.\n */\nsimulated function OnSetBlockRigidBody(SeqAct_SetBlockRigidBody Action)\n'
p5095
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5096
sg23
S'SeqAct_SetBlockRigidBody Action'
p5097
sg25
g95
sg27
S'simulated'
p5098
sg29
S'OnSetBlockRigidBody'
p5099
sg31
I3386
sg32
I01
sba(iUnrealScriptIDEData
Function
p5100
(dp5101
g19
S'/** Handler for the SeqAct_SetPhysics action, allowing designer to change the Physics mode of an Actor. */\nsimulated function OnSetPhysics(SeqAct_SetPhysics Action)\n'
p5102
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5103
sg23
S'SeqAct_SetPhysics Action'
p5104
sg25
g95
sg27
S'simulated'
p5105
sg29
S'OnSetPhysics'
p5106
sg31
I3404
sg32
I01
sba(iUnrealScriptIDEData
Function
p5107
(dp5108
g19
S'/** Handler for collision action, allow designer to toggle collide/block actors */\nfunction OnChangeCollision(SeqAct_ChangeCollision Action)\n'
p5109
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5110
sg23
S'SeqAct_ChangeCollision Action'
p5111
sg25
g95
sg27
g95
sg29
S'OnChangeCollision'
p5112
sg31
I3424
sg32
I01
sba(iUnrealScriptIDEData
Function
p5113
(dp5114
g19
S'/** Handler for SeqAct_ToggleHidden, just sets bHidden. */\nsimulated function OnToggleHidden(SeqAct_ToggleHidden Action)\n'
p5115
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5116
sg23
S'SeqAct_ToggleHidden Action'
p5117
sg25
g95
sg27
S'simulated'
p5118
sg29
S'OnToggleHidden'
p5119
sg31
I3447
sg32
I01
sba(iUnrealScriptIDEData
Function
p5120
(dp5121
g19
S'/** Attach an actor to another one. Kismet action. */\nfunction OnAttachToActor(SeqAct_AttachToActor Action)\n'
p5122
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5123
sg23
S'SeqAct_AttachToActor Action'
p5124
sg25
g95
sg27
g95
sg29
S'OnAttachToActor'
p5125
sg31
I3494
sg32
I01
sba(iUnrealScriptIDEData
Function
p5126
(dp5127
g19
S'/** Performs actual attachment. Can be subclassed for class specific behaviors. */\nfunction DoKismetAttachment(Actor Attachment, SeqAct_AttachToActor Action)\n'
p5128
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5129
sg23
S'Actor Attachment, SeqAct_AttachToActor Action'
p5130
sg25
g95
sg27
g95
sg29
S'DoKismetAttachment'
p5131
sg31
I3539
sg32
I01
sba(iUnrealScriptIDEData
Function
p5132
(dp5133
g19
S"/**\n * Event called when an AnimNodeSequence (in the animation tree of one of this Actor's SkeletalMeshComponents) reaches the end and stops.\n * Will not get called if bLooping is 'true' on the AnimNodeSequence.\n * bCauseActorAnimEnd must be set 'true' on the AnimNodeSequence for this event to get generated.\n *\n * @param\tSeqNode\t\t- Node that finished playing. You can get to the SkeletalMeshComponent by looking at SeqNode->SkelComponent\n * @param\tPlayedTime\t- Time played on this animation. (play rate independant).\n * @param\tExcessTime\t- how much time overlapped beyond end of animation. (play rate independant).\n */\nevent OnAnimEnd(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime);\n"
p5134
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5135
sg23
S'AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime'
p5136
sg25
g95
sg27
g95
sg29
S'OnAnimEnd'
p5137
sg31
I3595
sg32
I00
sba(iUnrealScriptIDEData
Function
p5138
(dp5139
g19
S"/**\n * Event called when a PlayAnim is called AnimNodeSequence in the animation tree of one of this Actor's SkeletalMeshComponents.\n * bCauseActorAnimPlay must be set 'true' on the AnimNodeSequence for this event to get generated.\n *\n * @param\tSeqNode - Node had PlayAnim called. You can get to the SkeletalMeshComponent by looking at SeqNode->SkelComponent\n */\nevent OnAnimPlay(AnimNodeSequence SeqNode);\n"
p5140
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5141
sg23
S'AnimNodeSequence SeqNode'
p5142
sg25
g95
sg27
g95
sg29
S'OnAnimPlay'
p5143
sg31
I3603
sg32
I00
sba(iUnrealScriptIDEData
Function
p5144
(dp5145
g19
S'/** Called when we start an AnimControl track operating on this Actor. Supplied is the set of AnimSets we are going to want to play from. */\nevent BeginAnimControl(InterpGroup InInterpGroup);\n'
p5146
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5147
sg23
S'InterpGroup InInterpGroup'
p5148
sg25
g95
sg27
g95
sg29
S'BeginAnimControl'
p5149
sg31
I3608
sg32
I00
sba(iUnrealScriptIDEData
Function
p5150
(dp5151
g19
S'/** Called each from while the Matinee action is running, with the desired sequence name and position we want to be at. */\nevent SetAnimPosition(name SlotName, int ChannelIndex, name InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);\n'
p5152
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5153
sg23
S'name SlotName, int ChannelIndex, name InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion'
p5154
sg25
g95
sg27
g95
sg29
S'SetAnimPosition'
p5155
sg31
I3611
sg32
I00
sba(iUnrealScriptIDEData
Function
p5156
(dp5157
g19
S'/** Called when we are done with the AnimControl track. */\nevent FinishAnimControl(InterpGroup InInterpGroup);\n'
p5158
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5159
sg23
S'InterpGroup InInterpGroup'
p5160
sg25
g95
sg27
g95
sg29
S'FinishAnimControl'
p5161
sg31
I3615
sg32
I00
sba(iUnrealScriptIDEData
Function
p5162
(dp5163
g19
S'/**\n * Play FaceFX animations on this Actor.\n * Returns TRUE if succeeded, if failed, a log warning will be issued.\n */\nevent bool PlayActorFaceFXAnim(FaceFXAnimSet AnimSet, String GroupName, String SeqName, SoundCue SoundCueToPlay );\n'
p5164
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5165
sg23
S'FaceFXAnimSet AnimSet, String GroupName, String SeqName, SoundCue SoundCueToPlay'
p5166
sg25
S'bool'
p5167
sg27
g95
sg29
S'PlayActorFaceFXAnim'
p5168
sg31
I3621
sg32
I00
sba(iUnrealScriptIDEData
Function
p5169
(dp5170
g19
S'/** Stop any matinee FaceFX animations on this Actor. */\nevent StopActorFaceFXAnim();\n'
p5171
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5172
sg23
g95
sg25
g95
sg27
g95
sg29
S'StopActorFaceFXAnim'
p5173
sg31
I3624
sg32
I00
sba(iUnrealScriptIDEData
Function
p5174
(dp5175
g19
S'/** Called each frame by Matinee to update the weight of a particular MorphNodeWeight. */\nevent SetMorphWeight(name MorphNodeName, float MorphWeight);\n'
p5176
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5177
sg23
S'name MorphNodeName, float MorphWeight'
p5178
sg25
g95
sg27
g95
sg29
S'SetMorphWeight'
p5179
sg31
I3627
sg32
I00
sba(iUnrealScriptIDEData
Function
p5180
(dp5181
g19
S'/** Called each frame by Matinee to update the scaling on a SkelControl. */\nevent SetSkelControlScale(name SkelControlName, float Scale);\n'
p5182
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5183
sg23
S'name SkelControlName, float Scale'
p5184
sg25
g95
sg27
g95
sg29
S'SetSkelControlScale'
p5185
sg31
I3630
sg32
I00
sba(iUnrealScriptIDEData
Function
p5186
(dp5187
g19
S'/**\n  *  Called every tick if bShouldTickOwner is true\n  */\nevent TickSkelControl(float DeltaTime, SkeletalMeshComponent SkelComp, SkelControlBase SkelCtrl);\n'
p5188
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5189
sg23
S'float DeltaTime, SkeletalMeshComponent SkelComp, SkelControlBase SkelCtrl'
p5190
sg25
g95
sg27
g95
sg29
S'TickSkelControl'
p5191
sg31
I3635
sg32
I00
sba(iUnrealScriptIDEData
Function
p5192
(dp5193
g19
S'/**\n * Returns TRUE if Actor is playing a FaceFX anim.\n * Implement in sub-class.\n */\nsimulated function bool IsActorPlayingFaceFXAnim()\n'
p5194
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5195
sg23
g95
sg25
S'bool'
p5196
sg27
S'simulated'
p5197
sg29
S'IsActorPlayingFaceFXAnim'
p5198
sg31
I3641
sg32
I01
sba(iUnrealScriptIDEData
Function
p5199
(dp5200
g19
S'/**\n* Returns FALSE if Actor can play facefx\n* Implement in sub-class.\n*/\nsimulated function bool CanActorPlayFaceFXAnim()\n'
p5201
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5202
sg23
g95
sg25
S'bool'
p5203
sg27
S'simulated'
p5204
sg29
S'CanActorPlayFaceFXAnim'
p5205
sg31
I3650
sg32
I01
sba(iUnrealScriptIDEData
Function
p5206
(dp5207
g19
S'/** Used by Matinee in-game to mount FaceFXAnimSets before playing animations. */\nevent FaceFXAsset GetActorFaceFXAsset();\n'
p5208
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5209
sg23
g95
sg25
S'FaceFXAsset'
p5210
sg27
g95
sg29
S'GetActorFaceFXAsset'
p5211
sg31
I3656
sg32
I00
sba(iUnrealScriptIDEData
Function
p5212
(dp5213
g19
S'// for AI... bots have perfect aim shooting non-pawn stationary targets\nfunction bool IsStationary()\n'
p5214
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5215
sg23
g95
sg25
S'bool'
p5216
sg27
g95
sg29
S'IsStationary'
p5217
sg31
I3659
sg32
I01
sba(iUnrealScriptIDEData
Function
p5218
(dp5219
g19
S"/**\n * returns the point of view of the actor.\n * note that this doesn't mean the camera, but the 'eyes' of the actor.\n * For example, for a Pawn, this would define the eye height location,\n * and view rotation (which is different from the pawn rotation which has a zeroed pitch component).\n * A camera first person view will typically use this view point. Most traces (weapon, AI) will be done from this view point.\n *\n * @param\tout_Location - location of view point\n * @param\tout_Rotation - view rotation of actor.\n */\nsimulated event GetActorEyesViewPoint( out vector out_Location, out Rotator out_Rotation )\n"
p5220
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5221
sg23
S'out vector out_Location, out Rotator out_Rotation'
p5222
sg25
g95
sg27
S'simulated'
p5223
sg29
S'GetActorEyesViewPoint'
p5224
sg31
I3674
sg32
I00
sba(iUnrealScriptIDEData
Function
p5225
(dp5226
g19
S'/**\n * Searches the owner chain looking for a player.\n */\nnative simulated function bool IsPlayerOwned();\n'
p5227
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5228
sg23
g95
sg25
S'bool'
p5229
sg27
S'native simulated'
p5230
sg29
S'IsPlayerOwned'
p5231
sg31
I3683
sg32
I01
sba(iUnrealScriptIDEData
Function
p5232
(dp5233
g19
S'/* PawnBaseDied()\nThe pawn on which this actor is based has just died\n*/\nfunction PawnBaseDied();\n'
p5234
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5235
sg23
g95
sg25
g95
sg27
g95
sg29
S'PawnBaseDied'
p5236
sg31
I3688
sg32
I01
sba(iUnrealScriptIDEData
Function
p5237
(dp5238
g19
S'/*\n * default implementation calls eventScriptGetTeamNum()\n */\nsimulated native function byte GetTeamNum();\n'
p5239
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5240
sg23
g95
sg25
S'byte'
p5241
sg27
S'simulated native'
p5242
sg29
S'GetTeamNum'
p5243
sg31
I3693
sg32
I01
sba(iUnrealScriptIDEData
Function
p5244
(dp5245
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5246
sg23
g95
sg25
S'byte'
p5247
sg27
S'simulated'
p5248
sg29
S'ScriptGetTeamNum'
p5249
sg31
I3695
sg32
I00
sba(iUnrealScriptIDEData
Function
p5250
(dp5251
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5252
sg23
g95
sg25
g95
sg27
S'simulated'
p5253
sg29
S'NotifyLocalPlayerTeamReceived'
p5254
sg31
I3700
sg32
I01
sba(iUnrealScriptIDEData
Function
p5255
(dp5256
g19
S'/** Used by PlayerController.FindGoodView() in RoundEnded State */\nsimulated function FindGoodEndView(PlayerController PC, out Rotator GoodRotation)\n'
p5257
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5258
sg23
S'PlayerController PC, out Rotator GoodRotation'
p5259
sg25
g95
sg27
S'simulated'
p5260
sg29
S'FindGoodEndView'
p5261
sg31
I3703
sg32
I01
sba(iUnrealScriptIDEData
Function
p5262
(dp5263
g19
S'/**\n * @param RequestedBy - the Actor requesting the target location\n * @param bRequestAlternateLoc (optional) - return a secondary target location if there are multiple\n * @return the optimal location to fire weapons at this actor\n */\nsimulated native function vector GetTargetLocation(optional actor RequestedBy, optional bool bRequestAlternateLoc) const;\n'
p5264
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5265
sg23
S'optional actor RequestedBy, optional bool bRequestAlternateLoc'
p5266
sg25
S'vector'
p5267
sg27
S'simulated native'
p5268
sg29
S'GetTargetLocation'
p5269
sg31
I3713
sg32
I01
sba(iUnrealScriptIDEData
Function
p5270
(dp5271
g19
S'/** called when this Actor was spawned by a Kismet actor factory (SeqAct_ActorFactory)\n *\tafter all other spawn events (PostBeginPlay(), etc) have been called\n */\nevent SpawnedByKismet();\n'
p5272
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5273
sg23
g95
sg25
g95
sg27
g95
sg29
S'SpawnedByKismet'
p5274
sg31
I3718
sg32
I00
sba(iUnrealScriptIDEData
Function
p5275
(dp5276
g19
S'/** called when a SeqAct_Interp action starts interpolating this Actor via matinee\n * @note this function is called on clients for actors that are interpolated clientside via MatineeActor\n * @param InterpAction the SeqAct_Interp that is affecting the Actor\n */\nsimulated event InterpolationStarted(SeqAct_Interp InterpAction, InterpGroupInst GroupInst);\n'
p5277
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5278
sg23
S'SeqAct_Interp InterpAction, InterpGroupInst GroupInst'
p5279
sg25
g95
sg27
S'simulated'
p5280
sg29
S'InterpolationStarted'
p5281
sg31
I3724
sg32
I00
sba(iUnrealScriptIDEData
Function
p5282
(dp5283
g19
S'/** called when a SeqAct_Interp action finished interpolating this Actor\n * @note this function is called on clients for actors that are interpolated clientside via MatineeActor\n * @param InterpAction the SeqAct_Interp that was affecting the Actor\n */\nsimulated event InterpolationFinished(SeqAct_Interp InterpAction);\n'
p5284
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5285
sg23
S'SeqAct_Interp InterpAction'
p5286
sg25
g95
sg27
S'simulated'
p5287
sg29
S'InterpolationFinished'
p5288
sg31
I3730
sg32
I00
sba(iUnrealScriptIDEData
Function
p5289
(dp5290
g19
S'/** called when a SeqAct_Interp action affecting this Actor received an event that changed its properties\n *\t(paused, reversed direction, etc)\n * @note this function is called on clients for actors that are interpolated clientside via MatineeActor\n * @param InterpAction the SeqAct_Interp that is affecting the Actor\n */\nsimulated event InterpolationChanged(SeqAct_Interp InterpAction);\n'
p5291
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5292
sg23
S'SeqAct_Interp InterpAction'
p5293
sg25
g95
sg27
S'simulated'
p5294
sg29
S'InterpolationChanged'
p5295
sg31
I3737
sg32
I00
sba(iUnrealScriptIDEData
Function
p5296
(dp5297
g19
S"/** Called when a PrimitiveComponent this Actor owns has:\n *     -bNotifyRigidBodyCollision set to true\n *     -ScriptRigidBodyCollisionThreshold > 0\n *     -it is involved in a physics collision where the relative velocity exceeds ScriptRigidBodyCollisionThreshold\n *\n * @param HitComponent the component of this Actor that collided\n * @param OtherComponent the other component that collided\n * @param RigidCollisionData information on the collision itslef, including contact points\n * @param ContactIndex the element in each ContactInfos' ContactVelocity and PhysMaterial arrays that corresponds\n *\t\t\tto this Actor/HitComponent\n */\nevent RigidBodyCollision( PrimitiveComponent HitComponent, PrimitiveComponent OtherComponent,\n\t\t\t\tconst out CollisionImpactData RigidCollisionData, int ContactIndex );\n"
p5298
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5299
sg23
S'PrimitiveComponent HitComponent, PrimitiveComponent OtherComponent,'
p5300
sg25
g95
sg27
g95
sg29
S'RigidBodyCollision'
p5301
sg31
I3751
sg32
I00
sba(iUnrealScriptIDEData
Function
p5302
(dp5303
g19
S'/**\n *\tCalled each frame (for each wheel) when an SVehicle has a wheel in contact with this Actor.\n *\tNot called on Actors that have bWorldGeometry or bStatic set to TRUE.\n */\nevent OnRanOver(SVehicle Vehicle, PrimitiveComponent RunOverComponent, int WheelIndex);\n'
p5304
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5305
sg23
S'SVehicle Vehicle, PrimitiveComponent RunOverComponent, int WheelIndex'
p5306
sg25
g95
sg27
g95
sg29
S'OnRanOver'
p5307
sg31
I3757
sg32
I00
sba(iUnrealScriptIDEData
Function
p5308
(dp5309
g19
S"/** function used to update where icon for this actor should be rendered on the HUD\n *  @param NewHUDLocation is a vector whose X and Y components are the X and Y components of this actor's icon's 2D position on the HUD\n */\nsimulated native function SetHUDLocation(vector NewHUDLocation);\n"
p5310
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5311
sg23
S'vector NewHUDLocation'
p5312
sg25
g95
sg27
S'simulated native'
p5313
sg29
S'SetHUDLocation'
p5314
sg31
I3762
sg32
I01
sba(iUnrealScriptIDEData
Function
p5315
(dp5316
g19
S'/**\nHook to allow actors to render HUD overlays for themselves.\nAssumes that appropriate font has already been set\n*/\nsimulated native function NativePostRenderFor(PlayerController PC, Canvas Canvas, vector CameraPosition, vector CameraDir);\n'
p5317
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5318
sg23
S'PlayerController PC, Canvas Canvas, vector CameraPosition, vector CameraDir'
p5319
sg25
g95
sg27
S'simulated native'
p5320
sg29
S'NativePostRenderFor'
p5321
sg31
I3768
sg32
I01
sba(iUnrealScriptIDEData
Function
p5322
(dp5323
g19
S'/**\nScript function called by NativePostRenderFor().\n*/\nsimulated event PostRenderFor(PlayerController PC, Canvas Canvas, vector CameraPosition, vector CameraDir);\n'
p5324
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5325
sg23
S').'
p5326
sg25
S'by'
p5327
sg27
S'Script'
p5328
sg29
S'NativePostRenderFor'
p5329
sg31
I3773
sg32
I01
sba(iUnrealScriptIDEData
Function
p5330
(dp5331
g19
S'/**\n * Notification that root motion mode changed.\n * Called only from SkelMeshComponents that have bRootMotionModeChangeNotify set.\n * This is useful for synchronizing movements.\n * For intance, when using RMM_Translate, and the event is called, we know that root motion will kick in on next frame.\n * It is possible to kill in-game physics, and then use root motion seemlessly.\n */\nsimulated event RootMotionModeChanged(SkeletalMeshComponent SkelComp);\n'
p5332
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5333
sg23
S'SkeletalMeshComponent SkelComp'
p5334
sg25
g95
sg27
S'simulated'
p5335
sg29
S'RootMotionModeChanged'
p5336
sg31
I3782
sg32
I00
sba(iUnrealScriptIDEData
Function
p5337
(dp5338
g19
S'/** Notification that Root Motion has been processed. */\nsimulated event RootMotionProcessed(SkeletalMeshComponent SkelComp);\n'
p5339
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5340
sg23
S'SkeletalMeshComponent SkelComp'
p5341
sg25
g95
sg27
S'simulated'
p5342
sg29
S'RootMotionProcessed'
p5343
sg31
I3785
sg32
I00
sba(iUnrealScriptIDEData
Function
p5344
(dp5345
g19
S"/**\n * Notification called after root motion has been extracted, and before it's been used.\n * This notification can be used to alter extracted root motion before it is forwarded to physics.\n * It is only called when bRootMotionExtractedNotify is TRUE on the SkeletalMeshComponent.\n * @note: It is fairly slow in Script, so enable only when really needed.\n */\nsimulated event RootMotionExtracted(SkeletalMeshComponent SkelComp, out BoneAtom ExtractedRootMotionDelta);\n"
p5346
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5347
sg23
S'SkeletalMeshComponent SkelComp, out BoneAtom ExtractedRootMotionDelta'
p5348
sg25
g95
sg27
S'simulated'
p5349
sg29
S'RootMotionExtracted'
p5350
sg31
I3793
sg32
I00
sba(iUnrealScriptIDEData
Function
p5351
(dp5352
g19
S'/** called after initializing the AnimTree for the given SkeletalMeshComponent that has this Actor as its Owner\n * this is a good place to cache references to skeletal controllers, etc that the Actor modifies\n */\nevent PostInitAnimTree(SkeletalMeshComponent SkelComp);\n'
p5353
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5354
sg23
S'SkeletalMeshComponent SkelComp'
p5355
sg25
g95
sg27
g95
sg29
S'PostInitAnimTree'
p5356
sg31
I3798
sg32
I00
sba(iUnrealScriptIDEData
Function
p5357
(dp5358
g19
S'/** Looks up the GUID of a package on disk. The package must NOT be in the autodownload cache.\n * This may require loading the header of the package in question and is therefore slow.\n */\nnative static final function Guid GetPackageGuid(name PackageName);\n'
p5359
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5360
sg23
S'name PackageName'
p5361
sg25
S'Guid'
p5362
sg27
S'native static final'
p5363
sg29
S'GetPackageGuid'
p5364
sg31
I3803
sg32
I01
sba(iUnrealScriptIDEData
Function
p5365
(dp5366
g19
S'/** Notification forwarded from RB_BodyInstance, when a spring is over extended and disabled. */\nsimulated event OnRigidBodySpringOverextension(RB_BodyInstance BodyInstance);\n'
p5367
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5368
sg23
S'RB_BodyInstance BodyInstance'
p5369
sg25
g95
sg27
S'simulated'
p5370
sg29
S'OnRigidBodySpringOverextension'
p5371
sg31
I3806
sg32
I00
sba(iUnrealScriptIDEData
Function
p5372
(dp5373
g19
S'/** whether this Actor is in the persistent level, i.e. not a sublevel */\nnative final function bool IsInPersistentLevel(optional bool bIncludeLevelStreamingPersistent) const;\n'
p5374
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5375
sg23
S'optional bool bIncludeLevelStreamingPersistent'
p5376
sg25
S'bool'
p5377
sg27
S'native final'
p5378
sg29
S'IsInPersistentLevel'
p5379
sg31
I3809
sg32
I01
sba(iUnrealScriptIDEData
Function
p5380
(dp5381
g19
S"/**\n * Returns aim-friction zone extents for this actor.\n * Extents are in world units centered around Actor's location, and assumed to be\n * oriented to face the viewer (like a billboard sprite).\n */\nsimulated function GetAimFrictionExtent(out float Width, out float Height, out vector Center)\n"
p5382
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5383
sg23
S'out float Width, out float Height, out vector Center'
p5384
sg25
g95
sg27
S'simulated'
p5385
sg29
S'GetAimFrictionExtent'
p5386
sg31
I3817
sg32
I01
sba(iUnrealScriptIDEData
Function
p5387
(dp5388
g19
S"/**\n * Returns aim-adhesion zone extents for this actor.\n * Extents are in world units centered around Actor's location, and assumed to be\n * oriented to face the viewer (like a billboard sprite).\n */\nsimulated function GetAimAdhesionExtent(out float Width, out float Height, out vector Center)\n"
p5389
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5390
sg23
S'out float Width, out float Height, out vector Center'
p5391
sg25
g95
sg27
S'simulated'
p5392
sg29
S'GetAimAdhesionExtent'
p5393
sg31
I3838
sg32
I01
sba(iUnrealScriptIDEData
Function
p5394
(dp5395
g19
S'/**\n * Called by AnimNotify_PlayParticleEffect\n * Looks for a socket name first then bone name\n *\n * @param AnimNotifyData The AnimNotify_PlayParticleEffect which will have all of the various params on it\n *\n *\t@return\tbool\t\ttrue if the particle effect was played, false if not;\n */\nevent bool PlayParticleEffect( const AnimNotify_PlayParticleEffect AnimNotifyData )\n'
p5396
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5397
sg23
S'const AnimNotify_PlayParticleEffect AnimNotifyData'
p5398
sg25
S'bool'
p5399
sg27
g95
sg29
S'PlayParticleEffect'
p5400
sg31
I3862
sg32
I00
sba(iUnrealScriptIDEData
Function
p5401
(dp5402
g19
S'/**\n * Called by AnimNotify_CreateForceField\n * Looks for a socket name first then bone name\n *\n * @param AnimNotifyData The AnimNotify_ForceField which will have all of the various params on it\n *\n *\t@return\tbool\t\ttrue if the forcefield was created, false if not;\n */\nevent bool CreateForceField( const AnimNotify_Forcefield AnimNotifyData )\n'
p5403
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5404
sg23
S'const AnimNotify_Forcefield AnimNotifyData'
p5405
sg25
S'bool'
p5406
sg27
g95
sg29
S'CreateForceField'
p5407
sg31
I3880
sg32
I00
sba(iUnrealScriptIDEData
Function
p5408
(dp5409
g19
S'/**\n * Called by AnimNotify_Trails\n *\n * @param AnimNotifyData The AnimNotify_Trails which will have all of the various params on it\n */\nevent TrailsNotify( const AnimNotify_Trails AnimNotifyData );\n'
p5410
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5411
sg23
S'const AnimNotify_Trails AnimNotifyData'
p5412
sg25
g95
sg27
g95
sg29
S'TrailsNotify'
p5413
sg31
I3890
sg32
I00
sba(iUnrealScriptIDEData
Function
p5414
(dp5415
g19
S'/**\n * Called by AnimNotify_Trails\n *\n * @param AnimNotifyData The AnimNotify_Trails which will have all of the various params on it\n */\nevent TrailsNotifyTick( const AnimNotify_Trails AnimNotifyData );\n'
p5416
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5417
sg23
S'const AnimNotify_Trails AnimNotifyData'
p5418
sg25
g95
sg27
g95
sg29
S'TrailsNotifyTick'
p5419
sg31
I3897
sg32
I00
sba(iUnrealScriptIDEData
Function
p5420
(dp5421
g19
S'/**\n * Called by AnimNotify_Trails\n *\n * @param AnimNotifyData The AnimNotify_Trails which will have all of the various params on it\n */\nevent TrailsNotifyEnd( const AnimNotify_Trails AnimNotifyData );\n'
p5422
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5423
sg23
S'const AnimNotify_Trails AnimNotifyData'
p5424
sg25
g95
sg27
g95
sg29
S'TrailsNotifyEnd'
p5425
sg31
I3904
sg32
I00
sba(iUnrealScriptIDEData
Function
p5426
(dp5427
g19
S'/** Allows us to have dynamic trail particles */\nnative function ParticleSystem GetAnimTrailParticleSystem( const AnimNotify_Trails AnimNotifyData ) const;\n'
p5428
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5429
sg23
S'const AnimNotify_Trails AnimNotifyData'
p5430
sg25
S'ParticleSystem'
p5431
sg27
S'native'
p5432
sg29
S'GetAnimTrailParticleSystem'
p5433
sg31
I3907
sg32
I01
sba(iUnrealScriptIDEData
Function
p5434
(dp5435
g19
S'/** whether this Actor can be modified by Kismet actions\n * primarily used by error checking to warn LDs when their Kismet may not apply changes correctly (especially on clients)\n * @param AskingOp - Kismet operation to which this Actor is linked\n * @param Reason (out) - If this function returns false, contains the reason why the Kismet action is not allowed to execute on this Actor\n * @return whether the AskingOp can correctly modify this Actor\n */\nnative final virtual function bool SupportsKismetModification(SequenceOp AskingOp, out string Reason) const;\n'
p5436
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5437
sg23
S'SequenceOp AskingOp, out string Reason'
p5438
sg25
S'bool'
p5439
sg27
S'native final virtual'
p5440
sg29
S'SupportsKismetModification'
p5441
sg31
I3915
sg32
I01
sba(iUnrealScriptIDEData
Function
p5442
(dp5443
g19
S'/** Notification called when one of our meshes gets his AnimTree updated */\nsimulated event AnimTreeUpdated(SkeletalMeshComponent SkelMesh);\n'
p5444
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5445
sg23
S'SkeletalMeshComponent SkelMesh'
p5446
sg25
g95
sg27
S'simulated'
p5447
sg29
S'AnimTreeUpdated'
p5448
sg31
I3918
sg32
I00
sba(iUnrealScriptIDEData
Function
p5449
(dp5450
g19
S'/** called on all dynamic or net relevant actors after rewinding a demo\n * primarily used to propagate properties to components, since components are ignored for rewinding\n */\nsimulated event PostDemoRewind();\n'
p5451
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5452
sg23
g95
sg25
g95
sg27
S'simulated'
p5453
sg29
S'PostDemoRewind'
p5454
sg31
I3923
sg32
I00
sba(iUnrealScriptIDEData
Function
p5455
(dp5456
g19
S'/** called ONLY for bNoDelete Actors on the client when the server was replicating data on this Actor,\n * but no longer considers it relevant (i.e. the actor channel was destroyed)\n * for !bNoDelete Actors this results in destruction, so cleanup code can be done there, but bNoDelete Actors\n * just keep going with whatever data was last received, so this is their chance to perform any cleanup\n */\nsimulated event ReplicationEnded();\n'
p5457
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5458
sg23
g95
sg25
g95
sg27
S'simulated'
p5459
sg29
S'ReplicationEnded'
p5460
sg31
I3930
sg32
I00
sba(iUnrealScriptIDEData
Function
p5461
(dp5462
g19
S'/**\n * Calculates a direction (unit vector) to avoid all actors contained in Obstacles list, assuming each entry in Obstacles is also\n * avoiding this actor.  Based loosely on RVO as described in http://gamma.cs.unc.edu/RVO/icra2008.pdf .\n */\nfinal native function vector GetAvoidanceVector(const out array<Actor> Obstacles, vector GoalLocation, float CollisionRadius, float MaxSpeed, optional int NumSamples = 8, optional float VelocityStepRate = 0.1f, optional float MaxTimeTilOverlap = 1.f);\n'
p5463
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5464
sg23
S'const out array<Actor> Obstacles, vector GoalLocation, float CollisionRadius, float MaxSpeed, optional int NumSamples = 8, optional float VelocityStepRate = 0.1f, optional float MaxTimeTilOverlap = 1.f'
p5465
sg25
S'vector'
p5466
sg27
S'final native'
p5467
sg29
S'GetAvoidanceVector'
p5468
sg31
I3936
sg32
I01
sba(iUnrealScriptIDEData
Function
p5469
(dp5470
g19
S'/** Steps from each position given the respective velocities performing simple radius checks */\nfinal native function bool WillOverlap(vector PosA, vector VelA, vector PosB, vector VelB, float StepSize, float Radius, out float Time);\n'
p5471
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5472
sg23
S'vector PosA, vector VelA, vector PosB, vector VelB, float StepSize, float Radius, out float Time'
p5473
sg25
S'bool'
p5474
sg27
S'final native'
p5475
sg29
S'WillOverlap'
p5476
sg31
I3939
sg32
I01
sba(iUnrealScriptIDEData
Function
p5477
(dp5478
g19
S'/**\n * replaces IsA(NavigationPoint) check for primitivecomponents\n */\nnative function bool ShouldBeHiddenBySHOW_NavigationNodes();\n'
p5479
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5480
sg23
g95
sg25
S'bool'
p5481
sg27
S'native'
p5482
sg29
S'ShouldBeHiddenBySHOW_NavigationNodes'
p5483
sg31
I3944
sg32
I01
sba(iUnrealScriptIDEData
Function
p5484
(dp5485
g19
S'/**\n * Can this actor receive touch screen events?\n */\nfunction bool IsMobileTouchEnabled()\n'
p5486
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5487
sg23
g95
sg25
S'bool'
p5488
sg27
g95
sg29
S'IsMobileTouchEnabled'
p5489
sg31
I3949
sg32
I01
sba(iUnrealScriptIDEData
Function
p5490
(dp5491
g19
S"/**\n * You must assign a MobileInputZone's OnTapDelegate to MobilePlayerInput.ProcessWorldTouch to catch this event.\n * \n * @param InPC              The PlayerController that caused this event\n * @param TouchLocation     The screen-space location of the touch event\n *\n * @Return true if event was handled, false to pass through to actors that may be occluded by this one\n */\nevent bool OnMobileTouch(PlayerController InPC, Vector2D TouchLocation)\n"
p5492
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5493
sg23
S'PlayerController InPC, Vector2D TouchLocation'
p5494
sg25
S'bool'
p5495
sg27
g95
sg29
S'OnMobileTouch'
p5496
sg31
I3962
sg32
I00
sba(iUnrealScriptIDEData
Function
p5497
(dp5498
g19
S'/**\n *  Retrieve various actor metrics depending on the provided type.  All of\n *  these will total the values of the given type for every component that\n *  makes up the actor.\n *\n *  @param MetricsType The type of metric to calculate.\n *\n *  METRICS_VERTS    - Get the number of vertices.\n *  METRICS_TRIS     - Get the number of triangles.\n *  METRICS_SECTIONS - Get the number of sections.\n *\n *  @return INT The total of the given type for this actor.\n */\nsimulated native function int GetActorMetrics(EActorMetricsType MetricsType);\n'
p5499
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5500
sg23
S'EActorMetricsType MetricsType'
p5501
sg25
S'int'
p5502
sg27
S'simulated native'
p5503
sg29
S'GetActorMetrics'
p5504
sg31
I3981
sg32
I01
sba(iUnrealScriptIDEData
Function
p5505
(dp5506
g19
S"/**\n * Searches through this Actor's Components and returns the\n * first SpriteComponent found. If none exist, returns NULL.\n *\n * @return\tSpriteComponent\tFirst found SpriteComponent for this actor. NULL if none are found.\n */\nnative function SpriteComponent GetActorSpriteComponent() const;\n"
p5507
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5508
sg23
g95
sg25
S'SpriteComponent'
p5509
sg27
S'native'
p5510
sg29
S'GetActorSpriteComponent'
p5511
sg31
I3989
sg32
I01
sbasg1531
S'object'
p5512
sg19
S'//=============================================================================\n// Actor: The base class of all actors.\n// Actor is the base class of all gameplay objects.\n// A large number of properties, behaviors and interfaces are implemented in Actor, including:\n//\n// -\tDisplay\n// -\tAnimation\n// -\tPhysics and world interaction\n// -\tMaking sounds\n// -\tNetworking properties\n// -\tActor creation and destruction\n// -\tActor iterator functions\n// -\tMessage broadcasting\n//\n// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\n//=============================================================================\n\nclass Actor extends Object\n'
p5513
sg1534
(lp5514
sg1536
VActor
p5515
sg1538
(lp5516
(iUnrealScriptIDEData
Const
p5517
(dp5518
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5519
sg1553
S'const TRACEFLAG_Bullet\t\t\t= 1;\n'
p5520
sg19
S'/** List of extra trace flags */\nconst TRACEFLAG_Bullet\t\t\t= 1;\n'
p5521
sg1536
S'TRACEFLAG_Bullet'
p5522
sS'_value'
p5523
S'1'
p5524
sg31
I25
sba(iUnrealScriptIDEData
Const
p5525
(dp5526
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5527
sg1553
S'const TRACEFLAG_PhysicsVolumes\t= 2;\n'
p5528
sg19
g95
sg1536
S'TRACEFLAG_PhysicsVolumes'
p5529
sg5523
S'2'
p5530
sg31
I26
sba(iUnrealScriptIDEData
Const
p5531
(dp5532
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5533
sg1553
S'const TRACEFLAG_SkipMovers\t\t= 4;\n'
p5534
sg19
g95
sg1536
S'TRACEFLAG_SkipMovers'
p5535
sg5523
S'4'
p5536
sg31
I27
sba(iUnrealScriptIDEData
Const
p5537
(dp5538
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5539
sg1553
S'const TRACEFLAG_Blocking\t\t= 8;\n'
p5540
sg19
g95
sg1536
S'TRACEFLAG_Blocking'
p5541
sg5523
S'8'
p5542
sg31
I28
sba(iUnrealScriptIDEData
Const
p5543
(dp5544
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5545
sg1553
S' force Controller as trace Actor (by default Trace() redirects to Pawn)\n'
p5546
sg19
g95
sg1536
S'TRACEFLAG_ForceController'
p5547
sg5523
S'16'
p5548
sg31
I29
sba(iUnrealScriptIDEData
Const
p5549
(dp5550
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5551
sg1553
S'const REP_RBLOCATION_ERROR_TOLERANCE_SQ = 16.0f;\n'
p5552
sg19
S"/** when bReplicateRigidBodyLocation is true, the root body of a ragdoll will be replicated\n * but this is not entirely accurate (and isn't meant to be) as the other bodies in the ragdoll may interfere\n * this can then result in jittering from the client constantly trying to apply the replicated value\n * so if the client's error is less than this amount from the replicated value, it will be ignored\n */\nconst REP_RBLOCATION_ERROR_TOLERANCE_SQ = 16.0f;\n"
p5553
sg1536
S'REP_RBLOCATION_ERROR_TOLERANCE_SQ'
p5554
sg5523
S'16.0f'
p5555
sg31
I36
sba(iUnrealScriptIDEData
Const
p5556
(dp5557
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5558
sg1553
S' minimum z value for floor normal (if less, not a walkable floor)\n'
p5559
sg19
S'//@note: Pawns have properties that override these values\nconst MINFLOORZ = 0.7; // minimum z value for floor normal (if less, not a walkable floor)\n'
p5560
sg1536
S'MINFLOORZ'
p5561
sg5523
S'0.7'
p5562
sg31
I532
sba(iUnrealScriptIDEData
Const
p5563
(dp5564
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5565
sg1553
S' max height floor walking actor can step up to\n'
p5566
sg19
S'\t\t\t\t\t   // 0.7 ~= 45 degree angle for floor\nconst ACTORMAXSTEPHEIGHT = 35.0; // max height floor walking actor can step up to\n'
p5567
sg1536
S'ACTORMAXSTEPHEIGHT'
p5568
sg5523
S'35.0'
p5569
sg31
I534
sba(iUnrealScriptIDEData
Const
p5570
(dp5571
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5572
sg1553
S'const RBSTATE_LINVELSCALE = 10.0;\n'
p5573
sg19
g95
sg1536
S'RBSTATE_LINVELSCALE'
p5574
sg5523
S'10.0'
p5575
sg31
I536
sba(iUnrealScriptIDEData
Const
p5576
(dp5577
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5578
sg1553
S'const RBSTATE_ANGVELSCALE = 1000.0;\n'
p5579
sg19
g95
sg1536
S'RBSTATE_ANGVELSCALE'
p5580
sg5523
S'1000.0'
p5581
sg31
I537
sba(iUnrealScriptIDEData
Const
p5582
(dp5583
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5584
sg1553
S' Not set, empty\n'
p5585
sg19
g95
sg1536
S'RB_None'
p5586
sg5523
S'0x00'
p5587
sg31
I551
sba(iUnrealScriptIDEData
Const
p5588
(dp5589
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5590
sg1553
S' If bNewData & RB_NeedsUpdate != 0 then an update is needed\n'
p5591
sg19
g95
sg1536
S'RB_NeedsUpdate'
p5592
sg5523
S'0x01'
p5593
sg31
I552
sba(iUnrealScriptIDEData
Const
p5594
(dp5595
g21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5596
sg1553
S' if bNewData & RB_Sleeping != 0 then this RigidBody needs to sleep\n'
p5597
sg19
g95
sg1536
S'RB_Sleeping'
p5598
sg5523
S'0x02'
p5599
sg31
I553
sbasg1540
(lp5600
(iUnrealScriptIDEData
Struct
p5601
(dp5602
g1544
S'struct native TimerData\n'
p5603
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5604
sg19
g95
sg1536
S'TimerData'
p5605
sg82
(lp5606
(iUnrealScriptIDEData
Variable
p5607
(dp5608
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5609
sg1553
g95
sg1554
(lp5610
S'var'
p5611
aS'bool'
p5612
asg1536
S'bLoop'
p5613
sg31
I128
sba(iUnrealScriptIDEData
Variable
p5614
(dp5615
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5616
sg1553
g95
sg1554
(lp5617
S'var'
p5618
aS'bool'
p5619
asg1536
S'bPaused'
p5620
sg31
I129
sba(iUnrealScriptIDEData
Variable
p5621
(dp5622
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5623
sg1553
g95
sg1554
(lp5624
S'var'
p5625
aS'Name'
p5626
asg1536
S'FuncName'
p5627
sg31
I130
sba(iUnrealScriptIDEData
Variable
p5628
(dp5629
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5630
sg1553
g95
sg1554
(lp5631
S'var'
p5632
aS'float'
p5633
asg1536
S'Count'
p5634
sg31
I131
sba(iUnrealScriptIDEData
Variable
p5635
(dp5636
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5637
sg1553
g95
sg1554
g5631
sg1536
S'Rate'
p5638
sg31
I131
sba(iUnrealScriptIDEData
Variable
p5639
(dp5640
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5641
sg1553
g95
sg1554
(lp5642
S'var'
p5643
aS'float'
p5644
asg1536
S'TimerTimeDilation'
p5645
sg31
I132
sba(iUnrealScriptIDEData
Variable
p5646
(dp5647
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5648
sg1553
g95
sg1554
(lp5649
S'var'
p5650
aS'Object'
p5651
asg1536
S'TimerObj'
p5652
sg31
I133
sbasg31
I126
sba(iUnrealScriptIDEData
Struct
p5653
(dp5654
g1544
S'struct native transient TraceHitInfo\n'
p5655
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5656
sg19
g95
sg1536
S'TraceHitInfo'
p5657
sg82
(lp5658
(iUnrealScriptIDEData
Variable
p5659
(dp5660
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5661
sg1553
S' Material we hit.'
p5662
sg1554
(lp5663
S'var'
p5664
aS'Material'
p5665
asg1536
S'Material'
p5666
sg31
I297
sba(iUnrealScriptIDEData
Variable
p5667
(dp5668
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5669
sg1553
S' The Physical Material that was hit'
p5670
sg1554
(lp5671
S'var'
p5672
aS'PhysicalMaterial'
p5673
asg1536
S'PhysMaterial'
p5674
sg31
I298
sba(iUnrealScriptIDEData
Variable
p5675
(dp5676
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5677
sg1553
S' Extra info about thing we hit.'
p5678
sg1554
(lp5679
S'var'
p5680
aS'int'
p5681
asg1536
S'Item'
p5682
sg31
I299
sba(iUnrealScriptIDEData
Variable
p5683
(dp5684
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5685
sg1553
S' Level index, if we hit BSP.'
p5686
sg1554
(lp5687
S'var'
p5688
aS'int'
p5689
asg1536
S'LevelIndex'
p5690
sg31
I300
sba(iUnrealScriptIDEData
Variable
p5691
(dp5692
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5693
sg1553
S' Name of bone if we hit a skeletal mesh.'
p5694
sg1554
(lp5695
S'var'
p5696
aS'name'
p5697
asg1536
S'BoneName'
p5698
sg31
I301
sba(iUnrealScriptIDEData
Variable
p5699
(dp5700
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5701
sg1553
S' Component of the actor that we hit.'
p5702
sg1554
(lp5703
S'var'
p5704
aS'PrimitiveComponent'
p5705
asg1536
S'HitComponent'
p5706
sg31
I302
sbasg31
I295
sba(iUnrealScriptIDEData
Struct
p5707
(dp5708
g1544
S'struct native transient ImpactInfo\n'
p5709
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5710
sg19
S'/** Hit definition struct. Mainly used by Instant Hit Weapons. */\nstruct native transient ImpactInfo\n'
p5711
sg1536
S'ImpactInfo'
p5712
sg82
(lp5713
(iUnrealScriptIDEData
Variable
p5714
(dp5715
g19
S'\t/** Actor Hit */\n\tvar\tActor\t\t\tHitActor;\n'
p5716
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5717
sg1553
g95
sg1554
(lp5718
S'var'
p5719
aS'Actor'
p5720
asg1536
S'HitActor'
p5721
sg31
I310
sba(iUnrealScriptIDEData
Variable
p5722
(dp5723
g19
S'\t/** world location of hit impact */\n\tvar\tvector\t\t\tHitLocation;\n'
p5724
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5725
sg1553
g95
sg1554
(lp5726
S'var'
p5727
aS'vector'
p5728
asg1536
S'HitLocation'
p5729
sg31
I312
sba(iUnrealScriptIDEData
Variable
p5730
(dp5731
g19
S'\t/** Hit normal of impact */\n\tvar\tvector\t\t\tHitNormal;\n'
p5732
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5733
sg1553
g95
sg1554
(lp5734
S'var'
p5735
aS'vector'
p5736
asg1536
S'HitNormal'
p5737
sg31
I314
sba(iUnrealScriptIDEData
Variable
p5738
(dp5739
g19
S'\t/** Direction of ray when hitting actor */\n\tvar\tvector\t\t\tRayDir;\n'
p5740
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5741
sg1553
g95
sg1554
(lp5742
S'var'
p5743
aS'vector'
p5744
asg1536
S'RayDir'
p5745
sg31
I316
sba(iUnrealScriptIDEData
Variable
p5746
(dp5747
g19
S'\t/** Start location of trace */\n\tvar vector\t\t\tStartTrace;\n'
p5748
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5749
sg1553
g95
sg1554
(lp5750
S'var'
p5751
aS'vector'
p5752
asg1536
S'StartTrace'
p5753
sg31
I318
sba(iUnrealScriptIDEData
Variable
p5754
(dp5755
g19
S'\t/** Trace Hit Info (material, bonename...) */\n\tvar\tTraceHitInfo\tHitInfo;\n'
p5756
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5757
sg1553
g95
sg1554
(lp5758
S'var'
p5759
aS'TraceHitInfo'
p5760
asg1536
S'HitInfo'
p5761
sg31
I320
sbasg31
I307
sba(iUnrealScriptIDEData
Struct
p5762
(dp5763
g1544
S'struct native transient AnimSlotInfo\n'
p5764
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5765
sg19
S'/** Struct used for passing information from Matinee to an Actor for blending animations during a sequence. */\nstruct native transient AnimSlotInfo\n'
p5766
sg1536
S'AnimSlotInfo'
p5767
sg82
(lp5768
(iUnrealScriptIDEData
Variable
p5769
(dp5770
g19
S'\t/** Name of slot that we want to play the animtion in. */\n\tvar\tname\t\t\tSlotName;\n'
p5771
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5772
sg1553
g95
sg1554
(lp5773
S'var'
p5774
aS'name'
p5775
asg1536
S'SlotName'
p5776
sg31
I343
sba(iUnrealScriptIDEData
Variable
p5777
(dp5778
g19
S'\t/** Strength of each Channel within this Slot. Channel indexs are determined by track order in Matinee. */\n\tvar array<float>\tChannelWeights;\n'
p5779
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5780
sg1553
g95
sg1554
(lp5781
S'var'
p5782
aS'array<float>'
p5783
asg1536
S'ChannelWeights'
p5784
sg31
I346
sbasg31
I340
sba(iUnrealScriptIDEData
Struct
p5785
(dp5786
g1544
S'struct native transient AnimSlotDesc\n'
p5787
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5788
sg19
S'/** Used to indicate each slot name and how many channels they have. */\nstruct native transient AnimSlotDesc\n'
p5789
sg1536
S'AnimSlotDesc'
p5790
sg82
(lp5791
(iUnrealScriptIDEData
Variable
p5792
(dp5793
g19
S'\t/** Name of the slot. */\n\tvar name\t\t\tSlotName;\n'
p5794
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5795
sg1553
g95
sg1554
(lp5796
S'var'
p5797
aS'name'
p5798
asg1536
S'SlotName'
p5799
sg31
I353
sba(iUnrealScriptIDEData
Variable
p5800
(dp5801
g19
S'\t/** Number of channels that are available in this slot. */\n\tvar int\t\t\t\tNumChannels;\n'
p5802
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5803
sg1553
g95
sg1554
(lp5804
S'var'
p5805
aS'int'
p5806
asg1536
S'NumChannels'
p5807
sg31
I356
sbasg31
I350
sba(iUnrealScriptIDEData
Struct
p5808
(dp5809
g1544
S'struct RigidBodyState\n'
p5810
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5811
sg19
S'/** describes the physical state of a rigid body\n * @warning: C++ mirroring is in UnPhysPublic.h\n */\nstruct RigidBodyState\n'
p5812
sg1536
S'RigidBodyState'
p5813
sg82
(lp5814
(iUnrealScriptIDEData
Variable
p5815
(dp5816
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5817
sg1553
g95
sg1554
(lp5818
S'var'
p5819
aS'vector'
p5820
asg1536
S'Position'
p5821
sg31
I544
sba(iUnrealScriptIDEData
Variable
p5822
(dp5823
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5824
sg1553
g95
sg1554
(lp5825
S'var'
p5826
aS'Quat'
p5827
asg1536
S'Quaternion'
p5828
sg31
I545
sba(iUnrealScriptIDEData
Variable
p5829
(dp5830
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5831
sg1553
S' RBSTATE_LINVELSCALE times actual (precision reasons)'
p5832
sg1554
(lp5833
S'var'
p5834
aS'vector'
p5835
asg1536
S'LinVel'
p5836
sg31
I546
sba(iUnrealScriptIDEData
Variable
p5837
(dp5838
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5839
sg1553
S' RBSTATE_ANGVELSCALE times actual (precision reasons)'
p5840
sg1554
(lp5841
S'var'
p5842
aS'vector'
p5843
asg1536
S'AngVel'
p5844
sg31
I547
sba(iUnrealScriptIDEData
Variable
p5845
(dp5846
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5847
sg1553
g95
sg1554
(lp5848
S'var'
p5849
aS'byte'
p5850
asg1536
S'bNewData'
p5851
sg31
I548
sbasg31
I542
sba(iUnrealScriptIDEData
Struct
p5852
(dp5853
g1544
S'struct RigidBodyContactInfo\n'
p5854
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5855
sg19
S'/** Information about one contact between a pair of rigid bodies\n * @warning: C++ mirroring is in UnPhysPublic.h\n */\nstruct RigidBodyContactInfo\n'
p5856
sg1536
S'RigidBodyContactInfo'
p5857
sg82
(lp5858
(iUnrealScriptIDEData
Variable
p5859
(dp5860
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5861
sg1553
g95
sg1554
(lp5862
S'var'
p5863
aS'vector'
p5864
asg1536
S'ContactPosition'
p5865
sg31
I560
sba(iUnrealScriptIDEData
Variable
p5866
(dp5867
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5868
sg1553
g95
sg1554
(lp5869
S'var'
p5870
aS'vector'
p5871
asg1536
S'ContactNormal'
p5872
sg31
I561
sba(iUnrealScriptIDEData
Variable
p5873
(dp5874
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5875
sg1553
g95
sg1554
(lp5876
S'var'
p5877
aS'float'
p5878
asg1536
S'ContactPenetration'
p5879
sg31
I562
sba(iUnrealScriptIDEData
Variable
p5880
(dp5881
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5882
sg1553
g95
sg1554
(lp5883
S'var'
p5884
aS'vector'
p5885
asg1536
S'ContactVelocity[2]'
p5886
sg31
I563
sba(iUnrealScriptIDEData
Variable
p5887
(dp5888
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5889
sg1553
g95
sg1554
(lp5890
S'var'
p5891
aS'PhysicalMaterial'
p5892
asg1536
S'PhysMaterial[2]'
p5893
sg31
I564
sbasg31
I558
sba(iUnrealScriptIDEData
Struct
p5894
(dp5895
g1544
S'struct CollisionImpactData\n'
p5896
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5897
sg19
S'/** Information about an overall collision, including contacts\n * @warning: C++ mirroring is in UnPhysPublic.h\n */\nstruct CollisionImpactData\n'
p5898
sg1536
S'CollisionImpactData'
p5899
sg82
(lp5900
(iUnrealScriptIDEData
Variable
p5901
(dp5902
g19
S'\t/** all the contact points in the collision*/\n\tvar array<RigidBodyContactInfo> ContactInfos;\n'
p5903
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5904
sg1553
g95
sg1554
(lp5905
S'var'
p5906
aS'array<RigidBodyContactInfo>'
p5907
asg1536
S'ContactInfos'
p5908
sg31
I573
sba(iUnrealScriptIDEData
Variable
p5909
(dp5910
g19
S'\t/** the total force applied as the two objects push against each other*/\n\tvar vector TotalNormalForceVector;\n'
p5911
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5912
sg1553
g95
sg1554
(lp5913
S'var'
p5914
aS'vector'
p5915
asg1536
S'TotalNormalForceVector'
p5916
sg31
I576
sba(iUnrealScriptIDEData
Variable
p5917
(dp5918
g19
S'\t/** the total counterforce applied of the two objects sliding against each other*/\n\tvar vector TotalFrictionForceVector;\n'
p5919
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5920
sg1553
g95
sg1554
(lp5921
S'var'
p5922
aS'vector'
p5923
asg1536
S'TotalFrictionForceVector'
p5924
sg31
I578
sbasg31
I570
sba(iUnrealScriptIDEData
Struct
p5925
(dp5926
g1544
S'struct native PhysEffectInfo\n'
p5927
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5928
sg19
S'/** Struct used to pass back information for physical impact effect */\nstruct native PhysEffectInfo\n'
p5929
sg1536
S'PhysEffectInfo'
p5930
sg82
(lp5931
(iUnrealScriptIDEData
Variable
p5932
(dp5933
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5934
sg1553
g95
sg1554
(lp5935
S'var()'
p5936
aS'float'
p5937
asg1536
S'Threshold'
p5938
sg31
I584
sba(iUnrealScriptIDEData
Variable
p5939
(dp5940
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5941
sg1553
g95
sg1554
(lp5942
S'var()'
p5943
aS'float'
p5944
asg1536
S'ReFireDelay'
p5945
sg31
I585
sba(iUnrealScriptIDEData
Variable
p5946
(dp5947
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5948
sg1553
g95
sg1554
(lp5949
S'var()'
p5950
aS'ParticleSystem'
p5951
asg1536
S'Effect'
p5952
sg31
I586
sba(iUnrealScriptIDEData
Variable
p5953
(dp5954
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5955
sg1553
g95
sg1554
(lp5956
S'var()'
p5957
aS'SoundCue'
p5958
asg1536
S'Sound'
p5959
sg31
I587
sbasg31
I582
sba(iUnrealScriptIDEData
Struct
p5960
(dp5961
g1544
S'struct immutablewhencooked native ActorReference\n'
p5962
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5963
sg19
S'/**\n * Struct used for cross level actor references\n */\nstruct immutablewhencooked native ActorReference\n'
p5964
sg1536
S'ActorReference'
p5965
sg82
(lp5966
(iUnrealScriptIDEData
Variable
p5967
(dp5968
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5969
sg1553
g95
sg1554
(lp5970
S'var()'
p5971
aS'Actor'
p5972
asg1536
S'Actor'
p5973
sg31
I669
sba(iUnrealScriptIDEData
Variable
p5974
(dp5975
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5976
sg1553
g95
sg1554
(lp5977
S'var()'
p5978
aS'editconst'
p5979
aS'const'
p5980
aS'guid'
p5981
asg1536
S'Guid'
p5982
sg31
I670
sbasg31
I667
sba(iUnrealScriptIDEData
Struct
p5983
(dp5984
g1544
S'struct immutablewhencooked native NavReference\n'
p5985
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5986
sg19
g95
sg1536
S'NavReference'
p5987
sg82
(lp5988
(iUnrealScriptIDEData
Variable
p5989
(dp5990
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5991
sg1553
g95
sg1554
(lp5992
S'var()'
p5993
aS'NavigationPoint'
p5994
asg1536
S'Nav'
p5995
sg31
I742
sba(iUnrealScriptIDEData
Variable
p5996
(dp5997
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p5998
sg1553
g95
sg1554
(lp5999
S'var()'
p6000
aS'editconst'
p6001
aS'const'
p6002
aS'guid'
p6003
asg1536
S'Guid'
p6004
sg31
I743
sbasg31
I740
sba(iUnrealScriptIDEData
Struct
p6005
(dp6006
g1544
S'struct native BasedPosition\n'
p6007
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6008
sg19
S'/**\n *\tStruct for handling positions relative to a base actor, which is potentially moving\n */\nstruct native BasedPosition\n'
p6009
sg1536
S'BasedPosition'
p6010
sg82
(lp6011
(iUnrealScriptIDEData
Variable
p6012
(dp6013
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6014
sg1553
g95
sg1554
(lp6015
S'var()'
p6016
aS'Actor'
p6017
asg1536
S'Base'
p6018
sg31
I751
sba(iUnrealScriptIDEData
Variable
p6019
(dp6020
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6021
sg1553
g95
sg1554
(lp6022
S'var()'
p6023
aS'Vector'
p6024
asg1536
S'Position'
p6025
sg31
I752
sba(iUnrealScriptIDEData
Variable
p6026
(dp6027
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6028
sg1553
g95
sg1554
(lp6029
S'var'
p6030
aS'Vector'
p6031
asg1536
S'CachedBaseLocation'
p6032
sg31
I754
sba(iUnrealScriptIDEData
Variable
p6033
(dp6034
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6035
sg1553
g95
sg1554
(lp6036
S'var'
p6037
aS'Rotator'
p6038
asg1536
S'CachedBaseRotation'
p6039
sg31
I755
sba(iUnrealScriptIDEData
Variable
p6040
(dp6041
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6042
sg1553
g95
sg1554
(lp6043
S'var'
p6044
aS'Vector'
p6045
asg1536
S'CachedTransPosition'
p6046
sg31
I756
sbasg31
I749
sbasg82
(lp6047
(iUnrealScriptIDEData
Variable
p6048
(dp6049
g19
S"/** The actor components which are attached directly to the actor's location/rotation. */\nvar private const array<ActorComponent>\tComponents;\n"
p6050
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6051
sg1553
g95
sg1554
(lp6052
S'var'
p6053
aS'private'
p6054
aS'const'
p6055
aS'array<ActorComponent>'
p6056
asg1536
S'Components'
p6057
sg31
I50
sba(iUnrealScriptIDEData
Variable
p6058
(dp6059
g19
S'/** All actor components which are directly or indirectly attached to the actor. */\nvar private transient const array<ActorComponent> AllComponents;\n'
p6060
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6061
sg1553
g95
sg1554
(lp6062
S'var'
p6063
aS'private'
p6064
aS'transient'
p6065
aS'const'
p6066
aS'array<ActorComponent>'
p6067
asg1536
S'AllComponents'
p6068
sg31
I53
sba(iUnrealScriptIDEData
Variable
p6069
(dp6070
g19
S"/** Actor's location; use Move or SetLocation to change. */\nvar(Movement) const vector\t\t\tLocation;\n"
p6071
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6072
sg1553
g95
sg1554
(lp6073
S'var(Movement)'
p6074
aS'const'
p6075
aS'vector'
p6076
asg1536
S'Location'
p6077
sg31
I57
sba(iUnrealScriptIDEData
Variable
p6078
(dp6079
g19
S"/** The actor's rotation; use SetRotation to change. */\nvar(Movement) const rotator\t\t\tRotation;\n"
p6080
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6081
sg1553
g95
sg1554
(lp6082
S'var(Movement)'
p6083
aS'const'
p6084
aS'rotator'
p6085
asg1536
S'Rotation'
p6086
sg31
I60
sba(iUnrealScriptIDEData
Variable
p6087
(dp6088
g19
S'/** Scaling factor, 1.0=normal size. */\nvar(Display) const repnotify interp\tfloat\tDrawScale <UIMin=0.1 | UIMax=4.0>;\n'
p6089
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6090
sg1553
g95
sg1554
(lp6091
S'var(Display)'
p6092
aS'const'
p6093
aS'repnotify'
p6094
aS'interp'
p6095
aS'float'
p6096
aS'DrawScale'
p6097
aS'<UIMin=0.1'
p6098
aS'|'
p6099
asg1536
S'UIMax=4.0>'
p6100
sg31
I63
sba(iUnrealScriptIDEData
Variable
p6101
(dp6102
g19
S'/** Scaling vector, (1.0,1.0,1.0)=normal size. */\nvar(Display) const interp\tvector\tDrawScale3D;\n'
p6103
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6104
sg1553
g95
sg1554
(lp6105
S'var(Display)'
p6106
aS'const'
p6107
aS'interp'
p6108
aS'vector'
p6109
asg1536
S'DrawScale3D'
p6110
sg31
I66
sba(iUnrealScriptIDEData
Variable
p6111
(dp6112
g19
S'/** Offset from box center for drawing. */\nvar(Display) const\t\t\tvector\tPrePivot;\n'
p6113
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6114
sg1553
g95
sg1554
(lp6115
S'var(Display)'
p6116
aS'const'
p6117
aS'vector'
p6118
asg1536
S'PrePivot'
p6119
sg31
I69
sba(iUnrealScriptIDEData
Variable
p6120
(dp6121
g19
S'/** Color to tint the icon for this actor */\nvar(Display) editoronly Color EditorIconColor;\n'
p6122
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6123
sg1553
g95
sg1554
(lp6124
S'var(Display)'
p6125
aS'editoronly'
p6126
aS'Color'
p6127
asg1536
S'EditorIconColor'
p6128
sg31
I72
sba(iUnrealScriptIDEData
Variable
p6129
(dp6130
g19
S'/** A fence to track when the primitive is detached from the scene in the rendering thread. */\nvar private native const RenderCommandFence DetachFence;\n'
p6131
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6132
sg1553
g95
sg1554
(lp6133
S'var'
p6134
aS'private'
p6135
aS'native'
p6136
aS'const'
p6137
aS'RenderCommandFence'
p6138
asg1536
S'DetachFence'
p6139
sg31
I75
sba(iUnrealScriptIDEData
Variable
p6140
(dp6141
g19
S'/** Allow each actor to run at a different time speed */\nvar float CustomTimeDilation;\n'
p6142
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6143
sg1553
g95
sg1554
(lp6144
S'var'
p6145
aS'float'
p6146
asg1536
S'CustomTimeDilation'
p6147
sg31
I78
sba(iUnrealScriptIDEData
Variable
p6148
(dp6149
g19
S"// Priority Parameters\n// Actor's current physics mode.\nvar(Movement) const enum EPhysics\n"
p6150
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6151
sg1553
g95
sg1554
(lp6152
S'var(Movement)'
p6153
aS'const'
p6154
aS'enum'
p6155
asg1536
S'EPhysics'
p6156
sg31
I82
sba(iUnrealScriptIDEData
Variable
p6157
(dp6158
g19
S'// Owner.\nvar const Actor\tOwner;\t\t\t// Owner actor.\n'
p6159
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6160
sg1553
S' Owner actor.'
p6161
sg1554
(lp6162
S'var'
p6163
aS'const'
p6164
aS'Actor'
p6165
asg1536
S'Owner'
p6166
sg31
I123
sba(iUnrealScriptIDEData
Variable
p6167
(dp6168
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6169
sg1553
S" Actor we're standing on."
p6170
sg1554
(lp6171
S'var(Attachment)'
p6172
aS'const'
p6173
aS'Actor'
p6174
asg1536
S'Base'
p6175
sg31
I124
sba(iUnrealScriptIDEData
Variable
p6176
(dp6177
g19
S'\t//default TimerTimeDilation to 1.0f\n\tstructdefaultproperties\n\t{\n\t\tTimerTimeDilation=1.0f\n\t}\n};\nvar const array<TimerData>\t\t\tTimers;\t\t\t// list of currently active timers\n'
p6178
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6179
sg1553
S' list of currently active timers'
p6180
sg1554
(lp6181
S'var'
p6182
aS'const'
p6183
aS'array<TimerData>'
p6184
asg1536
S'Timers'
p6185
sg31
I152
sba(iUnrealScriptIDEData
Variable
p6186
(dp6187
g19
S'// Flags.\nvar const public{private} bool bStatic;\t// Does not move or change over time. It is only safe to change this property in defaultproperties.\n'
p6188
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6189
sg1553
S' Does not move or change over time. It is only safe to change this property in defaultproperties.'
p6190
sg1554
(lp6191
S'var'
p6192
aS'const'
p6193
aS'public{private}'
p6194
aS'bool'
p6195
asg1536
S'bStatic'
p6196
sg31
I155
sba(iUnrealScriptIDEData
Variable
p6197
(dp6198
g19
S'/** If this is True, all PrimitiveComponents of the actor are hidden.  If this is false, only PrimitiveComponents with HiddenGame=True are hidden. */\nvar(Display) const bool\tbHidden;\n'
p6199
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6200
sg1553
g95
sg1554
(lp6201
S'var(Display)'
p6202
aS'const'
p6203
aS'bool'
p6204
asg1536
S'bHidden'
p6205
sg31
I158
sba(iUnrealScriptIDEData
Variable
p6206
(dp6207
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6208
sg1553
S' Cannot be deleted during play.'
p6209
sg1554
(lp6210
S'var'
p6211
aS'const'
p6212
aS'bool'
p6213
asg1536
S'bNoDelete'
p6214
sg31
I160
sba(iUnrealScriptIDEData
Variable
p6215
(dp6216
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6217
sg1553
S' About to be deleted.'
p6218
sg1554
(lp6219
S'var'
p6220
aS'const'
p6221
aS'bool'
p6222
asg1536
S'bDeleteMe'
p6223
sg31
I161
sba(iUnrealScriptIDEData
Variable
p6224
(dp6225
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6226
sg1553
S' Actor has been updated.'
p6227
sg1554
(lp6228
S'var'
p6229
aS'transient'
p6230
aS'const'
p6231
aS'bool'
p6232
asg1536
S'bTicked'
p6233
sg31
I162
sba(iUnrealScriptIDEData
Variable
p6234
(dp6235
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6236
sg1553
S' Only owner can see this actor.'
p6237
sg1554
(lp6238
S'var'
p6239
aS'const'
p6240
aS'bool'
p6241
asg1536
S'bOnlyOwnerSee'
p6242
sg31
I163
sba(iUnrealScriptIDEData
Variable
p6243
(dp6244
g19
S'/** if set, this Actor and all of its components are not ticked. Modify via SetTickIsDisabled()\n * this flag has no effect on bStatic Actors\n */\nvar const public{private} bool bTickIsDisabled;\n'
p6245
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6246
sg1553
g95
sg1554
(lp6247
S'var'
p6248
aS'const'
p6249
aS'public{private}'
p6250
aS'bool'
p6251
asg1536
S'bTickIsDisabled'
p6252
sg31
I168
sba(iUnrealScriptIDEData
Variable
p6253
(dp6254
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6255
sg1553
S' Collision and Physics treats this actor as static world geometry'
p6256
sg1554
(lp6257
S'var'
p6258
aS'bool'
p6259
asg1536
S'bWorldGeometry'
p6260
sg31
I170
sba(iUnrealScriptIDEData
Variable
p6261
(dp6262
g19
S'/** Ignore Unreal collisions between PHYS_RigidBody pawns (vehicles/ragdolls) and this actor (only relevant if bIgnoreEncroachers is false) */\nvar\t\t\t\t\tbool\tbIgnoreRigidBodyPawns;\n'
p6263
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6264
sg1553
g95
sg1554
(lp6265
S'var'
p6266
aS'bool'
p6267
asg1536
S'bIgnoreRigidBodyPawns'
p6268
sg31
I173
sba(iUnrealScriptIDEData
Variable
p6269
(dp6270
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6271
sg1553
S' when landing, orient base on slope of floor'
p6272
sg1554
(lp6273
S'var'
p6274
aS'bool'
p6275
asg1536
S'bOrientOnSlope'
p6276
sg31
I174
sba(iUnrealScriptIDEData
Variable
p6277
(dp6278
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6279
sg1553
S' Ignore collisions between movers and this actor'
p6280
sg1554
(lp6281
S'var'
p6282
aS'const'
p6283
aS'bool'
p6284
asg1536
S'bIgnoreEncroachers'
p6285
sg31
I175
sba(iUnrealScriptIDEData
Variable
p6286
(dp6287
g19
S'/** whether encroachers can push this Actor (only relevant if bIgnoreEncroachers is false and not an encroacher ourselves)\n * if false, the encroacher gets EncroachingOn() called immediately instead of trying to safely move this actor first\n */\nvar bool bPushedByEncroachers;\n'
p6288
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6289
sg1553
g95
sg1554
(lp6290
S'var'
p6291
aS'bool'
p6292
asg1536
S'bPushedByEncroachers'
p6293
sg31
I179
sba(iUnrealScriptIDEData
Variable
p6294
(dp6295
g19
S'/** If TRUE, when an InterpActor (Mover) encroaches or runs into this Actor, it is destroyed, and will not stop the mover. */\nvar bool bDestroyedByInterpActor;\n'
p6296
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6297
sg1553
g95
sg1554
(lp6298
S'var'
p6299
aS'bool'
p6300
asg1536
S'bDestroyedByInterpActor'
p6301
sg31
I181
sba(iUnrealScriptIDEData
Variable
p6302
(dp6303
g19
S'/** Whether to route BeginPlay even if the actor is static. */\nvar\t\t\t  const bool\tbRouteBeginPlayEvenIfStatic;\n'
p6304
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6305
sg1553
g95
sg1554
(lp6306
S'var'
p6307
aS'const'
p6308
aS'bool'
p6309
asg1536
S'bRouteBeginPlayEvenIfStatic'
p6310
sg31
I184
sba(iUnrealScriptIDEData
Variable
p6311
(dp6312
g19
S'/** Used to determine when we stop moving, so we can update PreviousLocalToWorld to stop motion blurring. */\nvar\t\t\t  const\tbool\tbIsMoving;\n'
p6313
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6314
sg1553
g95
sg1554
(lp6315
S'var'
p6316
aS'const'
p6317
aS'bool'
p6318
asg1536
S'bIsMoving'
p6319
sg31
I186
sba(iUnrealScriptIDEData
Variable
p6320
(dp6321
g19
S'/**\n *\tIf true (and is an encroacher) will do the encroachment check inside MoveActor even if there is no movement.\n *\tThis is useful for objects that may change bounding box but not actually move.\n */\nvar\t\t\t\t\tbool\tbAlwaysEncroachCheck;\n'
p6322
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6323
sg1553
g95
sg1554
(lp6324
S'var'
p6325
aS'bool'
p6326
asg1536
S'bAlwaysEncroachCheck'
p6327
sg31
I191
sba(iUnrealScriptIDEData
Variable
p6328
(dp6329
g19
S'/** whether this Actor may return an alternate location from GetTargetLocation() when bRequestAlternateLoc is true\n * (used as an early out when tracing to those locations, etc)\n */\nvar bool bHasAlternateTargetLocation;\n'
p6330
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6331
sg1553
g95
sg1554
(lp6332
S'var'
p6333
aS'bool'
p6334
asg1536
S'bHasAlternateTargetLocation'
p6335
sg31
I195
sba(iUnrealScriptIDEData
Variable
p6336
(dp6337
g19
S'/** If TRUE, PHYS_Walking will attempt to step up onto this object when it hits it */\nvar(Collision)\t\tbool\tbCanStepUpOn;\n'
p6338
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6339
sg1553
g95
sg1554
(lp6340
S'var(Collision)'
p6341
aS'bool'
p6342
asg1536
S'bCanStepUpOn'
p6343
sg31
I198
sba(iUnrealScriptIDEData
Variable
p6344
(dp6345
g19
S'// Networking flags\nvar\t\t\t  const\tbool\tbNetTemporary;\t\t\t\t// Tear-off simulation in network play.\n'
p6346
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6347
sg1553
S' Tear-off simulation in network play.'
p6348
sg1554
(lp6349
S'var'
p6350
aS'const'
p6351
aS'bool'
p6352
asg1536
S'bNetTemporary'
p6353
sg31
I201
sba(iUnrealScriptIDEData
Variable
p6354
(dp6355
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6356
sg1553
S' this actor is only relevant to its owner. If this flag is changed during play, all non-owner channels would need to be explicitly closed.'
p6357
sg1554
(lp6358
S'var'
p6359
aS'const'
p6360
aS'bool'
p6361
asg1536
S'bOnlyRelevantToOwner'
p6362
sg31
I202
sba(iUnrealScriptIDEData
Variable
p6363
(dp6364
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6365
sg1553
S' set when any attribute is assigned a value in unrealscript, reset when the actor is replicated'
p6366
sg1554
(lp6367
S'var'
p6368
aS'transient'
p6369
aS'bool'
p6370
asg1536
S'bNetDirty'
p6371
sg31
I203
sba(iUnrealScriptIDEData
Variable
p6372
(dp6373
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6374
sg1553
S' Always relevant for network.'
p6375
sg1554
(lp6376
S'var'
p6377
aS'bool'
p6378
asg1536
S'bAlwaysRelevant'
p6379
sg31
I204
sba(iUnrealScriptIDEData
Variable
p6380
(dp6381
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6382
sg1553
S' Replicate instigator to client (used by bNetTemporary projectiles).'
p6383
sg1554
(lp6384
S'var'
p6385
aS'bool'
p6386
asg1536
S'bReplicateInstigator'
p6387
sg31
I205
sba(iUnrealScriptIDEData
Variable
p6388
(dp6389
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6390
sg1553
S' if true, replicate movement/location related properties'
p6391
sg1554
(lp6392
S'var'
p6393
aS'bool'
p6394
asg1536
S'bReplicateMovement'
p6395
sg31
I206
sba(iUnrealScriptIDEData
Variable
p6396
(dp6397
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6398
sg1553
S" if true, don't replicate actor class variables for this actor"
p6399
sg1554
(lp6400
S'var'
p6401
aS'bool'
p6402
asg1536
S'bSkipActorPropertyReplication'
p6403
sg31
I207
sba(iUnrealScriptIDEData
Variable
p6404
(dp6405
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6406
sg1553
S' if true, update velocity/location after initialization for simulated proxies'
p6407
sg1554
(lp6408
S'var'
p6409
aS'bool'
p6410
asg1536
S'bUpdateSimulatedPosition'
p6411
sg31
I208
sba(iUnrealScriptIDEData
Variable
p6412
(dp6413
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6414
sg1553
S' if true, this actor is no longer replicated to new clients, and'
p6415
sg1554
(lp6416
S'var'
p6417
aS'bool'
p6418
asg1536
S'bTearOff'
p6419
sg31
I209
sba(iUnrealScriptIDEData
Variable
p6420
(dp6421
g19
S'\t\t\t\t\t\t\t\t\t\t\t\t\t\t// is "torn off" (becomes a ROLE_Authority) on clients to which it was being replicated.\nvar\t\t\t\t\tbool\tbOnlyDirtyReplication;\t\t// if true, only replicate actor if bNetDirty is true - useful if no C++ changed attributes (such as physics)\n'
p6422
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6423
sg1553
S' if true, only replicate actor if bNetDirty is true - useful if no C++ changed attributes (such as physics)'
p6424
sg1554
(lp6425
S'var'
p6426
aS'bool'
p6427
asg1536
S'bOnlyDirtyReplication'
p6428
sg31
I211
sba(iUnrealScriptIDEData
Variable
p6429
(dp6430
g19
S'/** Whether this actor will interact with fluid surfaces or not. */\nvar(Physics)\t\tbool\tbAllowFluidSurfaceInteraction;\n'
p6431
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6432
sg1553
g95
sg1554
(lp6433
S'var(Physics)'
p6434
aS'bool'
p6435
asg1536
S'bAllowFluidSurfaceInteraction'
p6436
sg31
I215
sba(iUnrealScriptIDEData
Variable
p6437
(dp6438
g19
S'/** Set when we are currently replicating this Actor into a demo */\nvar transient\t\t\t\tbool\tbDemoRecording;\n'
p6439
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6440
sg1553
g95
sg1554
(lp6441
S'var'
p6442
aS'transient'
p6443
aS'bool'
p6444
asg1536
S'bDemoRecording'
p6445
sg31
I220
sba(iUnrealScriptIDEData
Variable
p6446
(dp6447
g19
S'/** Demo recording driver owns this actor. */\nvar\t\t\t\t\tbool\tbDemoOwner;\n'
p6448
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6449
sg1553
g95
sg1554
(lp6450
S'var'
p6451
aS'bool'
p6452
asg1536
S'bDemoOwner'
p6453
sg31
I222
sba(iUnrealScriptIDEData
Variable
p6454
(dp6455
g19
S'/** force Actor to be relevant for demos (only works on dynamic actors) */\nvar bool bForceDemoRelevant;\n'
p6456
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6457
sg1553
g95
sg1554
(lp6458
S'var'
p6459
aS'bool'
p6460
asg1536
S'bForceDemoRelevant'
p6461
sg31
I225
sba(iUnrealScriptIDEData
Variable
p6462
(dp6463
g19
S'/** Should replicate initial rotation.  This property should never be changed during execution, as the client and server rely on the default value of this property always being the same. */\nvar const           bool    bNetInitialRotation;\n'
p6464
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6465
sg1553
g95
sg1554
(lp6466
S'var'
p6467
aS'const'
p6468
aS'bool'
p6469
asg1536
S'bNetInitialRotation'
p6470
sg31
I228
sba(iUnrealScriptIDEData
Variable
p6471
(dp6472
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6473
sg1553
S' replicate Location property even when in PHYS_RigidBody'
p6474
sg1554
(lp6475
S'var'
p6476
aS'bool'
p6477
asg1536
S'bReplicateRigidBodyLocation'
p6478
sg31
I230
sba(iUnrealScriptIDEData
Variable
p6479
(dp6480
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6481
sg1553
S' If set, actor and its components are marked as pending kill during seamless map transitions'
p6482
sg1554
(lp6483
S'var'
p6484
aS'bool'
p6485
asg1536
S'bKillDuringLevelTransition'
p6486
sg31
I231
sba(iUnrealScriptIDEData
Variable
p6487
(dp6488
g19
S'/** whether we already exchanged Role/RemoteRole on the client, as removing then readding a streaming level\n * causes all initialization to be performed again even though the actor may not have actually been reloaded\n */\nvar const\t\t\t\tbool\tbExchangedRoles;\n'
p6489
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6490
sg1553
g95
sg1554
(lp6491
S'var'
p6492
aS'const'
p6493
aS'bool'
p6494
asg1536
S'bExchangedRoles'
p6495
sg31
I235
sba(iUnrealScriptIDEData
Variable
p6496
(dp6497
g19
S'/** If true, texture streaming code iterates over all StaticMeshComponents found on this actor when building texture streaming information. */\nvar(Advanced)\t\t\t\tbool\tbConsiderAllStaticMeshComponentsForStreaming;\n'
p6498
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6499
sg1553
g95
sg1554
(lp6500
S'var(Advanced)'
p6501
aS'bool'
p6502
asg1536
S'bConsiderAllStaticMeshComponentsForStreaming'
p6503
sg31
I238
sba(iUnrealScriptIDEData
Variable
p6504
(dp6505
g19
S'//debug\nvar(Debug)\t\t\t\t\tbool\t bDebug;\t// Used to toggle debug logging\n'
p6506
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6507
sg1553
S' Used to toggle debug logging'
p6508
sg1554
(lp6509
S'var(Debug)'
p6510
aS'bool'
p6511
asg1536
S'bDebug'
p6512
sg31
I241
sba(iUnrealScriptIDEData
Variable
p6513
(dp6514
g19
S'/** IF true, may call PostRenderFor() even when this actor is not visible */\nvar\t\t\t\t\t\t\tbool\tbPostRenderIfNotVisible;\n'
p6515
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6516
sg1553
g95
sg1554
(lp6517
S'var'
p6518
aS'bool'
p6519
asg1536
S'bPostRenderIfNotVisible'
p6520
sg31
I245
sba(iUnrealScriptIDEData
Variable
p6521
(dp6522
g19
S'/** Used by SkeletalMeshComponent Ticking optimization. */\nvar const transient int\tSkelMeshCompTickTag;\n'
p6523
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6524
sg1553
g95
sg1554
(lp6525
S'var'
p6526
aS'const'
p6527
aS'transient'
p6528
aS'int'
p6529
asg1536
S'SkelMeshCompTickTag'
p6530
sg31
I248
sba(iUnrealScriptIDEData
Variable
p6531
(dp6532
g19
S'// Net variables.\nenum ENetRole\n{\n\tROLE_None,              // No role at all.\n\tROLE_SimulatedProxy,\t// Locally simulated proxy of this actor.\n\tROLE_AutonomousProxy,\t// Locally autonomous proxy of this actor.\n\tROLE_Authority,\t\t\t// Authoritative control over the actor.\n};\nvar ENetRole RemoteRole, Role;\n'
p6533
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6534
sg1553
g95
sg1554
(lp6535
S'var'
p6536
aS'ENetRole'
p6537
asg1536
S'Role'
p6538
sg31
I258
sba(iUnrealScriptIDEData
Variable
p6539
(dp6540
g19
g6533
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6541
sg1553
g95
sg1554
g6535
sg1536
S'RemoteRole'
p6542
sg31
I258
sba(iUnrealScriptIDEData
Variable
p6543
(dp6544
g19
S'/** Internal - used by UWorld::ServerTickClients() */\nvar const transient int\t\tNetTag;\n'
p6545
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6546
sg1553
g95
sg1554
(lp6547
S'var'
p6548
aS'const'
p6549
aS'transient'
p6550
aS'int'
p6551
asg1536
S'NetTag'
p6552
sg31
I261
sba(iUnrealScriptIDEData
Variable
p6553
(dp6554
g19
S'/** Next time this actor will be considered for replication, set by SetNetUpdateTime() */\nvar const float NetUpdateTime;\n'
p6555
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6556
sg1553
g95
sg1554
(lp6557
S'var'
p6558
aS'const'
p6559
aS'float'
p6560
asg1536
S'NetUpdateTime'
p6561
sg31
I264
sba(iUnrealScriptIDEData
Variable
p6562
(dp6563
g19
S'/** How often (per second) this actor will be considered for replication, used to determine NetUpdateTime */\nvar float NetUpdateFrequency;\n'
p6564
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6565
sg1553
g95
sg1554
(lp6566
S'var'
p6567
aS'float'
p6568
asg1536
S'NetUpdateFrequency'
p6569
sg31
I267
sba(iUnrealScriptIDEData
Variable
p6570
(dp6571
g19
S'/** Priority for this actor when checking for replication in a low bandwidth or saturated situation, higher priority means it is more likely to replicate */\nvar float NetPriority;\n'
p6572
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6573
sg1553
g95
sg1554
(lp6574
S'var'
p6575
aS'float'
p6576
asg1536
S'NetPriority'
p6577
sg31
I270
sba(iUnrealScriptIDEData
Variable
p6578
(dp6579
g19
S'/** When set to TRUE will force this actor to immediately be considered for replication, instead of waiting for NetUpdateTime */\nvar transient bool bForceNetUpdate;\n'
p6580
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6581
sg1553
g95
sg1554
(lp6582
S'var'
p6583
aS'transient'
p6584
aS'bool'
p6585
asg1536
S'bForceNetUpdate'
p6586
sg31
I273
sba(iUnrealScriptIDEData
Variable
p6587
(dp6588
g19
S'/** Last time this actor was updated for replication via NetUpdateTime or bForceNetUpdate\n * @warning: internal net driver time, not related to WorldInfo.TimeSeconds\n */\nvar const transient float LastNetUpdateTime;\n'
p6589
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6590
sg1553
g95
sg1554
(lp6591
S'var'
p6592
aS'const'
p6593
aS'transient'
p6594
aS'float'
p6595
asg1536
S'LastNetUpdateTime'
p6596
sg31
I278
sba(iUnrealScriptIDEData
Variable
p6597
(dp6598
g19
S"/** Is this actor still pending a full net update due to clients that weren't able to replicate the actor at the time of LastNetUpdateTime */\nvar const transient bool bPendingNetUpdate;\n"
p6599
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6600
sg1553
g95
sg1554
(lp6601
S'var'
p6602
aS'const'
p6603
aS'transient'
p6604
aS'bool'
p6605
asg1536
S'bPendingNetUpdate'
p6606
sg31
I281
sba(iUnrealScriptIDEData
Variable
p6607
(dp6608
g19
S'/** How long has it been since the last tick? */\nvar float TimeSinceLastTick;\n'
p6609
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6610
sg1553
g95
sg1554
(lp6611
S'var'
p6612
aS'float'
p6613
asg1536
S'TimeSinceLastTick'
p6614
sg31
I284
sba(iUnrealScriptIDEData
Variable
p6615
(dp6616
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6617
sg1553
S' Pawn responsible for damage caused by this actor.'
p6618
sg1554
(lp6619
S'var'
p6620
aS'Pawn'
p6621
asg1536
S'Instigator'
p6622
sg31
I286
sba(iUnrealScriptIDEData
Variable
p6623
(dp6624
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6625
sg1553
g95
sg1554
(lp6626
S'var'
p6627
aS'const'
p6628
aS'transient'
p6629
aS'WorldInfo'
p6630
asg1536
S'WorldInfo'
p6631
sg31
I288
sba(iUnrealScriptIDEData
Variable
p6632
(dp6633
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6634
sg1553
S' How old the object lives before dying, 0=forever.'
p6635
sg1554
(lp6636
S'var'
p6637
aS'float'
p6638
asg1536
S'LifeSpan'
p6639
sg31
I289
sba(iUnrealScriptIDEData
Variable
p6640
(dp6641
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6642
sg1553
S' The time this actor was created, relative to WorldInfo.TimeSeconds'
p6643
sg1554
(lp6644
S'var'
p6645
aS'const'
p6646
aS'float'
p6647
asg1536
S'CreationTime'
p6648
sg31
I290
sba(iUnrealScriptIDEData
Variable
p6649
(dp6650
g19
S"/**\n * The value of WorldInfo->TimeSeconds for the frame when this actor was last rendered.  This is written\n * from the render thread, which is up to a frame behind the game thread, so you should allow this time to\n * be at least a frame behind the game thread's world time before you consider the actor non-visible.\n * There's an equivalent variable in PrimitiveComponent.\n */\nvar transient float\t\tLastRenderTime;\n"
p6651
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6652
sg1553
g95
sg1554
(lp6653
S'var'
p6654
aS'transient'
p6655
aS'float'
p6656
asg1536
S'LastRenderTime'
p6657
sg31
I368
sba(iUnrealScriptIDEData
Variable
p6658
(dp6659
g19
S"// Actor's tag name.\nvar(Object)\tname\t\t\tTag;\n"
p6660
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6661
sg1553
g95
sg1554
(lp6662
S'var(Object)'
p6663
aS'name'
p6664
asg1536
S'Tag'
p6665
sg31
I371
sba(iUnrealScriptIDEData
Variable
p6666
(dp6667
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6668
sg1553
g95
sg1554
(lp6669
S'var'
p6670
aS'name'
p6671
asg1536
S'InitialState'
p6672
sg31
I372
sba(iUnrealScriptIDEData
Variable
p6673
(dp6674
g19
S"// Actor's layer name.\nvar(Object) name\t\t\tLayer;\n"
p6675
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6676
sg1553
g95
sg1554
(lp6677
S'var(Object)'
p6678
aS'name'
p6679
asg1536
S'Layer'
p6680
sg31
I374
sba(iUnrealScriptIDEData
Variable
p6681
(dp6682
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6683
sg1553
g95
sg1554
(lp6684
S'var'
p6685
aS'deprecated'
p6686
aS'name'
p6687
asg1536
S'Group'
p6688
sg31
I375
sba(iUnrealScriptIDEData
Variable
p6689
(dp6690
g19
S'/** Bitflag to represent which views this actor is hidden in, via per-view layer visibilty */\nvar transient qword\t\t\tHiddenEditorViews;\n'
p6691
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6692
sg1553
g95
sg1554
(lp6693
S'var'
p6694
aS'transient'
p6695
aS'qword'
p6696
asg1536
S'HiddenEditorViews'
p6697
sg31
I378
sba(iUnrealScriptIDEData
Variable
p6698
(dp6699
g19
S'// Internal.\nvar transient const array<Actor>\tTouching;\t\t // List of touching actors.\n'
p6700
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6701
sg1553
S' List of touching actors.'
p6702
sg1554
(lp6703
S'var'
p6704
aS'transient'
p6705
aS'const'
p6706
aS'array<Actor>'
p6707
asg1536
S'Touching'
p6708
sg31
I381
sba(iUnrealScriptIDEData
Variable
p6709
(dp6710
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6711
sg1553
S' array of actors owned by this actor'
p6712
sg1554
(lp6713
S'var'
p6714
aS'transient'
p6715
aS'const'
p6716
aS'array<Actor>'
p6717
asg1536
S'Children'
p6718
sg31
I382
sba(iUnrealScriptIDEData
Variable
p6719
(dp6720
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6721
sg1553
S' Internal latent function use.'
p6722
sg1554
(lp6723
S'var'
p6724
aS'const'
p6725
aS'float'
p6726
asg1536
S'LatentFloat'
p6727
sg31
I383
sba(iUnrealScriptIDEData
Variable
p6728
(dp6729
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6730
sg1553
S' Internal latent function use.'
p6731
sg1554
(lp6732
S'var'
p6733
aS'const'
p6734
aS'AnimNodeSequence'
p6735
asg1536
S'LatentSeqNode'
p6736
sg31
I384
sba(iUnrealScriptIDEData
Variable
p6737
(dp6738
g19
S'// physics volume this actor is currently in\nvar transient const PhysicsVolume\tPhysicsVolume;\n'
p6739
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6740
sg1553
g95
sg1554
(lp6741
S'var'
p6742
aS'transient'
p6743
aS'const'
p6744
aS'PhysicsVolume'
p6745
asg1536
S'PhysicsVolume'
p6746
sg31
I387
sba(iUnrealScriptIDEData
Variable
p6747
(dp6748
g19
S'// Velocity.\nvar\t\t\t\t\tvector\t\t\tVelocity;\n'
p6749
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6750
sg1553
g95
sg1554
(lp6751
S'var'
p6752
aS'vector'
p6753
asg1536
S'Velocity'
p6754
sg31
I389
sba(iUnrealScriptIDEData
Variable
p6755
(dp6756
g19
S'// Acceleration.\nvar\t\t\t\t\tvector\t\t\tAcceleration;\n'
p6757
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6758
sg1553
g95
sg1554
(lp6759
S'var'
p6760
aS'vector'
p6761
asg1536
S'Acceleration'
p6762
sg31
I391
sba(iUnrealScriptIDEData
Variable
p6763
(dp6764
g19
S'// Angular velocity, in radians/sec.  Read-only, see RotationRate to set rotation.\nvar\ttransient const\tvector\t\t\tAngularVelocity;\n'
p6765
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6766
sg1553
g95
sg1554
(lp6767
S'var'
p6768
aS'transient'
p6769
aS'const'
p6770
aS'vector'
p6771
asg1536
S'AngularVelocity'
p6772
sg31
I393
sba(iUnrealScriptIDEData
Variable
p6773
(dp6774
g19
S'// Attachment related variables\nvar(Attachment) SkeletalMeshComponent\tBaseSkelComponent;\n'
p6775
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6776
sg1553
g95
sg1554
(lp6777
S'var(Attachment)'
p6778
aS'SkeletalMeshComponent'
p6779
asg1536
S'BaseSkelComponent'
p6780
sg31
I396
sba(iUnrealScriptIDEData
Variable
p6781
(dp6782
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6783
sg1553
g95
sg1554
(lp6784
S'var(Attachment)'
p6785
aS'name'
p6786
asg1536
S'BaseBoneName'
p6787
sg31
I397
sba(iUnrealScriptIDEData
Variable
p6788
(dp6789
g19
S'/** array of actors attached to this actor. */\nvar const array<Actor>  Attached;\n'
p6790
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6791
sg1553
g95
sg1554
(lp6792
S'var'
p6793
aS'const'
p6794
aS'array<Actor>'
p6795
asg1536
S'Attached'
p6796
sg31
I400
sba(iUnrealScriptIDEData
Variable
p6797
(dp6798
g19
S'/** location relative to base/bone (valid if base exists) */\nvar const vector\t\tRelativeLocation;\n'
p6799
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6800
sg1553
g95
sg1554
(lp6801
S'var'
p6802
aS'const'
p6803
aS'vector'
p6804
asg1536
S'RelativeLocation'
p6805
sg31
I402
sba(iUnrealScriptIDEData
Variable
p6806
(dp6807
g19
S'/** rotation relative to base/bone (valid if base exists) */\nvar const rotator\t\tRelativeRotation;\n'
p6808
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6809
sg1553
g95
sg1554
(lp6810
S'var'
p6811
aS'const'
p6812
aS'rotator'
p6813
asg1536
S'RelativeRotation'
p6814
sg31
I404
sba(iUnrealScriptIDEData
Variable
p6815
(dp6816
g19
S"/** Uses 'hard' attachment code. bBlockActor must also be false.\n\tThis actor cannot then move relative to base (setlocation etc.).\n\tDont set while currently based on something! */\nvar(Attachment) const bool bHardAttach;\n"
p6817
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6818
sg1553
g95
sg1554
(lp6819
S'var(Attachment)'
p6820
aS'const'
p6821
aS'bool'
p6822
asg1536
S'bHardAttach'
p6823
sg31
I409
sba(iUnrealScriptIDEData
Variable
p6824
(dp6825
g19
S"/** If TRUE, this actor ignores the effects of changes in its  base's rotation on its location and rotation. */\nvar(Attachment) bool bIgnoreBaseRotation;\n"
p6826
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6827
sg1553
g95
sg1554
(lp6828
S'var(Attachment)'
p6829
aS'bool'
p6830
asg1536
S'bIgnoreBaseRotation'
p6831
sg31
I412
sba(iUnrealScriptIDEData
Variable
p6832
(dp6833
g19
S'/** If TRUE, BaseSkelComponent is used as the shadow parent for this actor.*/\nvar(Attachment) bool bShadowParented;\n'
p6834
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6835
sg1553
g95
sg1554
(lp6836
S'var(Attachment)'
p6837
aS'bool'
p6838
asg1536
S'bShadowParented'
p6839
sg31
I415
sba(iUnrealScriptIDEData
Variable
p6840
(dp6841
g19
S"/** If TRUE, Skip moveactor collision check for this actor moving as a result of its base, to which it is hard attached moving\n - only if this actor doesn't block actors.*/\nvar(Attachment) bool bSkipAttachedMoves;\n"
p6842
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6843
sg1553
g95
sg1554
(lp6844
S'var(Attachment)'
p6845
aS'bool'
p6846
asg1536
S'bSkipAttachedMoves'
p6847
sg31
I419
sba(iUnrealScriptIDEData
Variable
p6848
(dp6849
g19
S'/** Determines whether or not adhesion code should attempt to adhere to this actor. **/\nvar bool bCanBeAdheredTo;\n'
p6850
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6851
sg1553
g95
sg1554
(lp6852
S'var'
p6853
aS'bool'
p6854
asg1536
S'bCanBeAdheredTo'
p6855
sg31
I422
sba(iUnrealScriptIDEData
Variable
p6856
(dp6857
g19
S'/** Determines whether or not friction code should attempt to friction to this actor. **/\nvar bool bCanBeFrictionedTo;\n'
p6858
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6859
sg1553
g95
sg1554
(lp6860
S'var'
p6861
aS'bool'
p6862
asg1536
S'bCanBeFrictionedTo'
p6863
sg31
I425
sba(iUnrealScriptIDEData
Variable
p6864
(dp6865
g19
S'// Advanced.\nvar\t\t\t  bool\t\tbHurtEntry;\t\t\t\t// keep HurtRadius from being reentrant\n'
p6866
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6867
sg1553
S' keep HurtRadius from being reentrant'
p6868
sg1554
(lp6869
S'var'
p6870
aS'bool'
p6871
asg1536
S'bHurtEntry'
p6872
sg31
I432
sba(iUnrealScriptIDEData
Variable
p6873
(dp6874
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6875
sg1553
S' Always relevant for game'
p6876
sg1554
(lp6877
S'var'
p6878
aS'bool'
p6879
asg1536
S'bGameRelevant'
p6880
sg31
I433
sba(iUnrealScriptIDEData
Variable
p6881
(dp6882
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6883
sg1553
S' Actor can be moved.'
p6884
sg1554
(lp6885
S'var'
p6886
aS'const'
p6887
aS'bool'
p6888
asg1536
S'bMovable'
p6889
sg31
I434
sba(iUnrealScriptIDEData
Variable
p6890
(dp6891
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6892
sg1553
S' destroy this actor if it enters a pain volume'
p6893
sg1554
(lp6894
S'var'
p6895
aS'bool'
p6896
asg1536
S'bDestroyInPainVolume'
p6897
sg31
I435
sba(iUnrealScriptIDEData
Variable
p6898
(dp6899
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6900
sg1553
S' can take damage'
p6901
sg1554
(lp6902
S'var'
p6903
aS'bool'
p6904
asg1536
S'bCanBeDamaged'
p6905
sg31
I436
sba(iUnrealScriptIDEData
Variable
p6906
(dp6907
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6908
sg1553
S' if true, find base for this actor at level startup, if collides with world and PHYS_None or PHYS_Rotating'
p6909
sg1554
(lp6910
S'var'
p6911
aS'bool'
p6912
asg1536
S'bShouldBaseAtStartup'
p6913
sg31
I437
sba(iUnrealScriptIDEData
Variable
p6914
(dp6915
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6916
sg1553
S' set when actor is about to be deleted (since endstate and other functions called'
p6917
sg1554
(lp6918
S'var'
p6919
aS'bool'
p6920
asg1536
S'bPendingDelete'
p6921
sg31
I438
sba(iUnrealScriptIDEData
Variable
p6922
(dp6923
g19
S'\t\t\t\t\t\t\t\t\t\t\t\t// during deletion process before bDeleteMe is set).\nvar\t\t\t  bool\t\tbCanTeleport;\t\t\t// This actor can be teleported.\n'
p6924
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6925
sg1553
S' This actor can be teleported.'
p6926
sg1554
(lp6927
S'var'
p6928
aS'bool'
p6929
asg1536
S'bCanTeleport'
p6930
sg31
I440
sba(iUnrealScriptIDEData
Variable
p6931
(dp6932
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6933
sg1553
S' Update even when paused'
p6934
sg1554
(lp6935
S'var'
p6936
aS'const'
p6937
aS'bool'
p6938
asg1536
S'bAlwaysTick'
p6939
sg31
I441
sba(iUnrealScriptIDEData
Variable
p6940
(dp6941
g19
S'/** indicates that this Actor can dynamically block AI paths */\nvar(Navigation) bool bBlocksNavigation;\n'
p6942
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6943
sg1553
g95
sg1554
(lp6944
S'var(Navigation)'
p6945
aS'bool'
p6946
asg1536
S'bBlocksNavigation'
p6947
sg31
I443
sba(iUnrealScriptIDEData
Variable
p6948
(dp6949
g19
S'// Collision primitive.\nvar(Collision) editconst PrimitiveComponent CollisionComponent;\n'
p6950
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6951
sg1553
g95
sg1554
(lp6952
S'var(Collision)'
p6953
aS'editconst'
p6954
aS'PrimitiveComponent'
p6955
asg1536
S'CollisionComponent'
p6956
sg31
I449
sba(iUnrealScriptIDEData
Variable
p6957
(dp6958
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6959
sg1553
g95
sg1554
(lp6960
S'var'
p6961
aS'native'
p6962
aS'int'
p6963
asg1536
S'OverlapTag'
p6964
sg31
I451
sba(iUnrealScriptIDEData
Variable
p6965
(dp6966
g19
S'/** enum for LDs to select collision options - sets Actor flags and that of our CollisionComponent via PostEditChange() */\nvar(Collision) const transient enum ECollisionType\n'
p6967
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6968
sg1553
g95
sg1554
(lp6969
S'var(Collision)'
p6970
aS'const'
p6971
aS'transient'
p6972
aS'enum'
p6973
asg1536
S'ECollisionType'
p6974
sg31
I454
sba(iUnrealScriptIDEData
Variable
p6975
(dp6976
g19
S'/** used when collision is changed via Kismet "Change Collision" action to set component flags on the CollisionComponent\n * will not modify replicated Actor flags regardless of setting\n */\nvar transient ECollisionType ReplicatedCollisionType;\n'
p6977
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6978
sg1553
g95
sg1554
(lp6979
S'var'
p6980
aS'transient'
p6981
aS'ECollisionType'
p6982
asg1536
S'ReplicatedCollisionType'
p6983
sg31
I469
sba(iUnrealScriptIDEData
Variable
p6984
(dp6985
g19
S"/** mirrored copy of CollisionComponent's BlockRigidBody for the Actor property window for LDs (so it's next to CollisionType)\n * purely for editing convenience and not used at all by the physics code\n */\nvar(Collision) const transient bool BlockRigidBody;\n"
p6986
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6987
sg1553
g95
sg1554
(lp6988
S'var(Collision)'
p6989
aS'const'
p6990
aS'transient'
p6991
aS'bool'
p6992
asg1536
S'BlockRigidBody'
p6993
sg31
I473
sba(iUnrealScriptIDEData
Variable
p6994
(dp6995
g19
S'// Collision flags.\nvar \t\t\tbool\t\tbCollideWhenPlacing;\t// This actor collides with the world when placing.\n'
p6996
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p6997
sg1553
S' This actor collides with the world when placing.'
p6998
sg1554
(lp6999
S'var'
p7000
aS'bool'
p7001
asg1536
S'bCollideWhenPlacing'
p7002
sg31
I476
sba(iUnrealScriptIDEData
Variable
p7003
(dp7004
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7005
sg1553
S' Collides with other actors.'
p7006
sg1554
(lp7007
S'var'
p7008
aS'const'
p7009
aS'bool'
p7010
asg1536
S'bCollideActors'
p7011
sg31
I477
sba(iUnrealScriptIDEData
Variable
p7012
(dp7013
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7014
sg1553
S' Collides with the world.'
p7015
sg1554
(lp7016
S'var'
p7017
aS'bool'
p7018
asg1536
S'bCollideWorld'
p7019
sg31
I478
sba(iUnrealScriptIDEData
Variable
p7020
(dp7021
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7022
sg1553
S' Ignore Simple Collision on Static Meshes, and collide per Poly.'
p7023
sg1554
(lp7024
S'var(Collision)'
p7025
aS'bool'
p7026
asg1536
S'bCollideComplex'
p7027
sg31
I479
sba(iUnrealScriptIDEData
Variable
p7028
(dp7029
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7030
sg1553
S' Blocks other nonplayer actors.'
p7031
sg1554
(lp7032
S'var'
p7033
aS'bool'
p7034
asg1536
S'bBlockActors'
p7035
sg31
I480
sba(iUnrealScriptIDEData
Variable
p7036
(dp7037
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7038
sg1553
S' Projectiles should potentially target this actor.'
p7039
sg1554
(lp7040
S'var'
p7041
aS'bool'
p7042
asg1536
S'bProjTarget'
p7043
sg31
I481
sba(iUnrealScriptIDEData
Variable
p7044
(dp7045
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7046
sg1553
g95
sg1554
(lp7047
S'var'
p7048
aS'bool'
p7049
asg1536
S'bBlocksTeleport'
p7050
sg31
I482
sba(iUnrealScriptIDEData
Variable
p7051
(dp7052
g19
S'/** Controls whether move operations should collide with destructible pieces or not. */\nvar\t\t\t\t\t\tbool\t\tbMoveIgnoresDestruction;\n'
p7053
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7054
sg1553
g95
sg1554
(lp7055
S'var'
p7056
aS'bool'
p7057
asg1536
S'bMoveIgnoresDestruction'
p7058
sg31
I484
sba(iUnrealScriptIDEData
Variable
p7059
(dp7060
g19
S'/** When in PHYS_Projectile, this actor will move with the MOVE_SingleBlocking flag */\nvar\t\t\t\t\t\tbool\t\tbProjectileMoveSingleBlocking;\n'
p7061
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7062
sg1553
g95
sg1554
(lp7063
S'var'
p7064
aS'bool'
p7065
asg1536
S'bProjectileMoveSingleBlocking'
p7066
sg31
I486
sba(iUnrealScriptIDEData
Variable
p7067
(dp7068
g19
S"/**\n *\tFor encroachers, don't do the overlap check when they move. You will not get touch events for this actor moving, but it is much faster.\n *\tSo if you want touch events from volumes or triggers you need to set this to be FALSE.\n *\tThis is an optimisation for large numbers of PHYS_RigidBody actors for example.\n */\nvar(Collision)\t\t\tbool\t\tbNoEncroachCheck;\n"
p7069
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7070
sg1553
g95
sg1554
(lp7071
S'var(Collision)'
p7072
aS'bool'
p7073
asg1536
S'bNoEncroachCheck'
p7074
sg31
I493
sba(iUnrealScriptIDEData
Variable
p7075
(dp7076
g19
S'/** If true, this actor collides as an encroacher, even if its physics is not PHYS_RigidBody or PHYS_Interpolating */\nvar\t\t\t\t\t\tbool\t\tbCollideAsEncroacher;\n'
p7077
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7078
sg1553
g95
sg1554
(lp7079
S'var'
p7080
aS'bool'
p7081
asg1536
S'bCollideAsEncroacher'
p7082
sg31
I496
sba(iUnrealScriptIDEData
Variable
p7083
(dp7084
g19
S'/** If true, do a zero-extent trace each frame from old to new Location when in PHYS_RigidBody. If it hits the world (ie might be tunneling), call FellOutOfWorld. */\nvar(Collision)\t\t\tbool\t\tbPhysRigidBodyOutOfWorldCheck;\n'
p7085
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7086
sg1553
g95
sg1554
(lp7087
S'var(Collision)'
p7088
aS'bool'
p7089
asg1536
S'bPhysRigidBodyOutOfWorldCheck'
p7090
sg31
I499
sba(iUnrealScriptIDEData
Variable
p7091
(dp7092
g19
S'/** Set TRUE if a component is ever attached which is outside the world. OutsideWorldBounds will be called in Tick in this case. */\nvar\tconst transient\t\tbool\t\tbComponentOutsideWorld;\n'
p7093
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7094
sg1553
g95
sg1554
(lp7095
S'var'
p7096
aS'const'
p7097
aS'transient'
p7098
aS'bool'
p7099
asg1536
S'bComponentOutsideWorld'
p7100
sg31
I502
sba(iUnrealScriptIDEData
Variable
p7101
(dp7102
g19
S'/** If TRUE, components of this Actor will only ever be placed into one node of the octree. This makes insertion faster, but may impact runtime performance */\nvar                     bool        bForceOctreeSNFilter;\n'
p7103
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7104
sg1553
g95
sg1554
(lp7105
S'var'
p7106
aS'bool'
p7107
asg1536
S'bForceOctreeSNFilter'
p7108
sg31
I505
sba(iUnrealScriptIDEData
Variable
p7109
(dp7110
g19
S'/** If TRUE, components of this actor will always be added using multinodefilter, even if game is up and the actor is dynamic */\nvar                     bool        bForceOctreeMNFilter;\n'
p7111
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7112
sg1553
g95
sg1554
(lp7113
S'var'
p7114
aS'bool'
p7115
asg1536
S'bForceOctreeMNFilter'
p7116
sg31
I507
sba(iUnrealScriptIDEData
Variable
p7117
(dp7118
g19
S'/** RigidBody of CollisionComponent was awake last frame -- used to call OnWakeRBPhysics/OnSleepRBPhysics events */\nvar const transient\t\tbool\t\tbRigidBodyWasAwake;\n'
p7119
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7120
sg1553
g95
sg1554
(lp7121
S'var'
p7122
aS'const'
p7123
aS'transient'
p7124
aS'bool'
p7125
asg1536
S'bRigidBodyWasAwake'
p7126
sg31
I510
sba(iUnrealScriptIDEData
Variable
p7127
(dp7128
g19
S'// Options.\nvar\t\t\t  bool        bBounce;           // Bounces when hits ground fast.\n'
p7129
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7130
sg1553
S' Bounces when hits ground fast.'
p7131
sg1554
(lp7132
S'var'
p7133
aS'bool'
p7134
asg1536
S'bBounce'
p7135
sg31
I518
sba(iUnrealScriptIDEData
Variable
p7136
(dp7137
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7138
sg1553
S' Used by engine physics - not valid for scripts.'
p7139
sg1554
(lp7140
S'var'
p7141
aS'const'
p7142
aS'bool'
p7143
asg1536
S'bJustTeleported'
p7144
sg31
I519
sba(iUnrealScriptIDEData
Variable
p7145
(dp7146
g19
S'// Physics properties.\nvar(Movement) rotator\t  RotationRate;\t\t// Change in rotation per second.\n'
p7147
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7148
sg1553
S' Change in rotation per second.'
p7149
sg1554
(lp7150
S'var(Movement)'
p7151
aS'rotator'
p7152
asg1536
S'RotationRate'
p7153
sg31
I522
sba(iUnrealScriptIDEData
Variable
p7154
(dp7155
g19
S"/**\n  * PLEASE NOTE DesiredRotation is removed\n  * This DesiredRotation is moved to Pawn to remove redundant variables usage. (i.e. between Pawn and Controller)\n  * Pawn now handles all DesiredRotation and it is only one place.\n  * All Actor's DesiredRotation won't work anymore - Use RotationRate to control Actor's rotation\n  **/\nvar\t\t\t  Actor\t\t  PendingTouch;\t\t// Actor touched during move which wants to add an effect after the movement completes\n"
p7156
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7157
sg1553
S' Actor touched during move which wants to add an effect after the movement completes'
p7158
sg1554
(lp7159
S'var'
p7160
aS'Actor'
p7161
asg1536
S'PendingTouch'
p7162
sg31
I529
sba(iUnrealScriptIDEData
Variable
p7163
(dp7164
g19
S'/** Enable this actor to receive the OnMobileTouch event when a player touches this actor when using a touch screen device */\nvar(Mobile) bool bEnableMobileTouch;\n'
p7165
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7166
sg1553
g95
sg1554
(lp7167
S'var(Mobile)'
p7168
aS'bool'
p7169
asg1536
S'bEnableMobileTouch'
p7170
sg31
I596
sba(iUnrealScriptIDEData
Variable
p7171
(dp7172
g19
S'// Symmetric network flags, valid during replication only.\nvar const bool bNetInitial;       // Initial network update.\n'
p7173
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7174
sg1553
S' Initial network update.'
p7175
sg1554
(lp7176
S'var'
p7177
aS'const'
p7178
aS'bool'
p7179
asg1536
S'bNetInitial'
p7180
sg31
I602
sba(iUnrealScriptIDEData
Variable
p7181
(dp7182
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7183
sg1553
S' Player owns this actor.'
p7184
sg1554
(lp7185
S'var'
p7186
aS'const'
p7187
aS'bool'
p7188
asg1536
S'bNetOwner'
p7189
sg31
I603
sba(iUnrealScriptIDEData
Variable
p7190
(dp7191
g19
S'//Editing flags\nvar const bool  bHiddenEd;     // Is hidden within the editor at its startup.\n'
p7192
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7193
sg1553
S' Is hidden within the editor at its startup.'
p7194
sg1554
(lp7195
S'var'
p7196
aS'const'
p7197
aS'bool'
p7198
asg1536
S'bHiddenEd'
p7199
sg31
I606
sba(iUnrealScriptIDEData
Variable
p7200
(dp7201
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7202
sg1553
S' Whether the actor can be manipulated by editor operations.'
p7203
sg1554
(lp7204
S'var'
p7205
aS'const'
p7206
aS'bool'
p7207
asg1536
S'bEditable'
p7208
sg31
I607
sba(iUnrealScriptIDEData
Variable
p7209
(dp7210
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7211
sg1553
S' Is hidden by the group browser.'
p7212
sg1554
(lp7213
S'var'
p7214
aS'deprecated'
p7215
aS'const'
p7216
aS'bool'
p7217
asg1536
S'bHiddenEdGroup'
p7218
sg31
I608
sba(iUnrealScriptIDEData
Variable
p7219
(dp7220
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7221
sg1553
S' Is hidden by the layer browser.'
p7222
sg1554
(lp7223
S'var'
p7224
aS'const'
p7225
aS'bool'
p7226
asg1536
S'bHiddenEdLayer'
p7227
sg31
I609
sba(iUnrealScriptIDEData
Variable
p7228
(dp7229
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7230
sg1553
S' custom visibility flag for game-specific editor modes; not used by base editor functionality'
p7231
sg1554
(lp7232
S'var'
p7233
aS'const'
p7234
aS'bool'
p7235
asg1536
S'bHiddenEdCustom'
p7236
sg31
I610
sba(iUnrealScriptIDEData
Variable
p7237
(dp7238
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7239
sg1553
S' Is temporarily hidden within the editor; used for show/hide/etc. functionality w/o dirtying the actor'
p7240
sg1554
(lp7241
S'var'
p7242
aS'transient'
p7243
aS'editoronly'
p7244
aS'bool'
p7245
asg1536
S'bHiddenEdTemporary'
p7246
sg31
I611
sba(iUnrealScriptIDEData
Variable
p7247
(dp7248
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7249
sg1553
S' Is hidden by the level browser.'
p7250
sg1554
(lp7251
S'var'
p7252
aS'transient'
p7253
aS'editoronly'
p7254
aS'bool'
p7255
asg1536
S'bHiddenEdLevel'
p7256
sg31
I612
sba(iUnrealScriptIDEData
Variable
p7257
(dp7258
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7259
sg1553
S' Is hidden by the scene browser.'
p7260
sg1554
(lp7261
S'var'
p7262
aS'transient'
p7263
aS'editoronly'
p7264
aS'bool'
p7265
asg1536
S'bHiddenEdScene'
p7266
sg31
I613
sba(iUnrealScriptIDEData
Variable
p7267
(dp7268
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7269
sg1553
S' Snap to grid in editor.'
p7270
sg1554
(lp7271
S'var(Advanced)'
p7272
aS'bool'
p7273
asg1536
S'bEdShouldSnap'
p7274
sg31
I614
sba(iUnrealScriptIDEData
Variable
p7275
(dp7276
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7277
sg1553
S' Internal UnrealEd.'
p7278
sg1554
(lp7279
S'var'
p7280
aS'transient'
p7281
aS'const'
p7282
aS'bool'
p7283
asg1536
S'bTempEditor'
p7284
sg31
I615
sba(iUnrealScriptIDEData
Variable
p7285
(dp7286
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7287
sg1553
S' this actor should collide (if bWorldGeometry && bBlockActors is true) during path building (ignored if bStatic is true, as actor will always collide during path building)'
p7288
sg1554
(lp7289
S'var(Collision)'
p7290
aS'bool'
p7291
asg1536
S'bPathColliding'
p7292
sg31
I616
sba(iUnrealScriptIDEData
Variable
p7293
(dp7294
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7295
sg1553
S' Internal/path building'
p7296
sg1554
(lp7297
S'var'
p7298
aS'transient'
p7299
aS'bool'
p7300
asg1536
S'bPathTemp'
p7301
sg31
I617
sba(iUnrealScriptIDEData
Variable
p7302
(dp7303
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7304
sg1553
S' set to prevent re-initializing of actors spawned during level startup'
p7305
sg1554
(lp7306
S'var'
p7307
aS'bool'
p7308
asg1536
S'bScriptInitialized'
p7309
sg31
I618
sba(iUnrealScriptIDEData
Variable
p7310
(dp7311
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7312
sg1553
S' Prevent the actor from being moved in the editor.'
p7313
sg1554
(lp7314
S'var(Advanced)'
p7315
aS'bool'
p7316
asg1536
S'bLockLocation'
p7317
sg31
I619
sba(iUnrealScriptIDEData
Variable
p7318
(dp7319
g19
S"/** always allow Kismet to modify this Actor, even if it's static and not networked (e.g. for server side only stuff) */\nvar const bool bForceAllowKismetModification;\n"
p7320
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7321
sg1553
g95
sg1554
(lp7322
S'var'
p7323
aS'const'
p7324
aS'bool'
p7325
asg1536
S'bForceAllowKismetModification'
p7326
sg31
I621
sba(iUnrealScriptIDEData
Variable
p7327
(dp7328
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7329
sg1553
g95
sg1554
(lp7330
S'var'
p7331
aS'class<LocalMessage>'
p7332
asg1536
S'MessageClass'
p7333
sg31
I623
sba(iUnrealScriptIDEData
Variable
p7334
(dp7335
g19
S'/** The ticking group this actor belongs to */\nvar const ETickingGroup TickGroup;\n'
p7336
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7337
sg1553
g95
sg1554
(lp7338
S'var'
p7339
aS'const'
p7340
aS'ETickingGroup'
p7341
asg1536
S'TickGroup'
p7342
sg31
I650
sba(iUnrealScriptIDEData
Variable
p7343
(dp7344
g19
S'/** List of all latent actions currently active on this actor */\nvar array<SeqAct_Latent> LatentActions;\n'
p7345
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7346
sg1553
g95
sg1554
(lp7347
S'var'
p7348
aS'array<SeqAct_Latent>'
p7349
asg1536
S'LatentActions'
p7350
sg31
I662
sba(iUnrealScriptIDEData
Variable
p7351
(dp7352
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cActor.uc
p7353
sg1553
g95
sg1554
(lp7354
S'var(Debug)'
p7355
aS'bool'
p7356
asg1536
S'bDebugEffectIsRelevant'
p7357
sg31
I772
sbasba(iUnrealScriptIDEData
ClassReference
p7358
(dp7359
g6
g3826
sg7
g12
sg90
I00
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005ccalabazaActor.uc
p7360
sg74
(lp7361
sg1531
S'actor'
p7362
sg19
S' /* Victor Macho\n    Clase PAWN del Objeto Calabaza\nDefine Modelo - Animaciones - Afecta Luz o no\n */\n\nclass CalabazaActor extends Actor\n'
p7363
sg1534
(lp7364
sg1536
VcalabazaActor
p7365
sg1538
(lp7366
sg1540
(lp7367
sg82
(lp7368
sba(iUnrealScriptIDEData
ClassReference
p7369
(dp7370
g6
Nsg7
g12
sg90
I01
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7371
sg74
(lp7372
(iUnrealScriptIDEData
Function
p7373
(dp7374
g19
S'// Attachment functions.\nnative final function AttachComponent(ActorComponent Component,name BoneName,optional vector RelativeLocation,optional rotator RelativeRotation,optional vector RelativeScale);\n'
p7375
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7376
sg23
S'ActorComponent Component,name BoneName,optional vector RelativeLocation,optional rotator RelativeRotation,optional vector RelativeScale'
p7377
sg25
g95
sg27
S'native final'
p7378
sg29
S'AttachComponent'
p7379
sg31
I811
sg32
I01
sba(iUnrealScriptIDEData
Function
p7380
(dp7381
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7382
sg23
S'ActorComponent Component'
p7383
sg25
g95
sg27
S'native final'
p7384
sg29
S'DetachComponent'
p7385
sg31
I812
sg32
I01
sba(iUnrealScriptIDEData
Function
p7386
(dp7387
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7388
sg23
S'ActorComponent Component, name SocketName'
p7389
sg25
g95
sg27
S'native final'
p7390
sg29
S'AttachComponentToSocket'
p7391
sg31
I819
sg32
I01
sba(iUnrealScriptIDEData
Function
p7392
(dp7393
g19
S'/**\n *\tFind the current world space location and rotation of a named socket on the skeletal mesh component.\n *\tIf the socket is not found, then it returns false and does not change the OutLocation/OutRotation variables.\n *\t@param InSocketName the name of the socket to find\n *\t@param OutLocation (out) set to the world space location of the socket\n *\t@param OutRotation (out) if specified, set to the world space rotation of the socket\n *\t@return whether or not the socket was found\n */\nnative final function bool GetSocketWorldLocationAndRotation(name InSocketName, out vector OutLocation, optional out rotator OutRotation, optional int Space ); // 0 == World, 1 == Local (Component)\n'
p7394
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7395
sg23
S'name InSocketName, out vector OutLocation, optional out rotator OutRotation, optional int Space ); // 0 == World, 1 == Local (Component'
p7396
sg25
S'bool'
p7397
sg27
S'native final'
p7398
sg29
S'GetSocketWorldLocationAndRotation'
p7399
sg31
I829
sg32
I01
sba(iUnrealScriptIDEData
Function
p7400
(dp7401
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7402
sg23
S'Name InSocketName'
p7403
sg25
S'SkeletalMeshSocket'
p7404
sg27
S'native final'
p7405
sg29
S'GetSocketByName'
p7406
sg31
I837
sg32
I01
sba(iUnrealScriptIDEData
Function
p7407
(dp7408
g19
S"/**\n * Returns bone name linked to a given named socket on the skeletal mesh component.\n * If you're unsure to deal with sockets or bones names, you can use this function to filter through, and always return the bone name.\n * @input\tbone name or socket name\n * @output\tbone name\n */\nnative final function Name GetSocketBoneName(Name InSocketName);\n"
p7409
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7410
sg23
S'Name InSocketName'
p7411
sg25
S'Name'
p7412
sg27
S'native final'
p7413
sg29
S'GetSocketBoneName'
p7414
sg31
I845
sg32
I01
sba(iUnrealScriptIDEData
Function
p7415
(dp7416
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7417
sg23
S'name InBoneName'
p7418
sg25
S'ActorComponent'
p7419
sg27
S'native final'
p7420
sg29
S'FindComponentAttachedToBone'
p7421
sg31
I853
sg32
I01
sba(iUnrealScriptIDEData
Function
p7422
(dp7423
g19
S'/**\n * Returns true if component is attached to skeletal mesh.\n * @param\tComponent\tActorComponent to check for.\n * @return\ttrue if Component is attached to SkeletalMesh.\n */\nnative final function bool IsComponentAttached( ActorComponent Component, optional Name BoneName );\n'
p7424
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7425
sg23
S'ActorComponent Component, optional Name BoneName'
p7426
sg25
S'bool'
p7427
sg27
S'native final'
p7428
sg29
S'IsComponentAttached'
p7429
sg31
I861
sg32
I01
sba(iUnrealScriptIDEData
Function
p7430
(dp7431
g19
S'/** returns all attached components that are of the specified class or a subclass\n * @param BaseClass the base class of ActorComponent to return\n * @param (out) OutComponent the returned ActorComponent for each iteration\n */\nnative final iterator function AttachedComponents(class<ActorComponent> BaseClass, out ActorComponent OutComponent);\n'
p7432
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7433
sg23
S'class<ActorComponent> BaseClass, out ActorComponent OutComponent'
p7434
sg25
g95
sg27
S'native final iterator'
p7435
sg29
S'AttachedComponents'
p7436
sg31
I867
sg32
I01
sba(iUnrealScriptIDEData
Function
p7437
(dp7438
g19
S'/**\n * Return Transform Matrix for SkeletalMeshComponent considering root motion setups\n * \n * @param SkelComp SkeletalMeshComponent to get transform matrix from\n */\nnative final function Matrix GetTransformMatrix();\n'
p7439
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7440
sg23
g95
sg25
S'Matrix'
p7441
sg27
S'native final'
p7442
sg29
S'GetTransformMatrix'
p7443
sg31
I874
sg32
I01
sba(iUnrealScriptIDEData
Function
p7444
(dp7445
g19
S'/** Change the SkeletalMesh that is rendered for this Component. Will re-initialize the animation tree etc. */\nsimulated native final function SetSkeletalMesh(SkeletalMesh NewMesh, optional bool bKeepSpaceBases);\n'
p7446
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7447
sg23
S'SkeletalMesh NewMesh, optional bool bKeepSpaceBases'
p7448
sg25
g95
sg27
S'simulated native final'
p7449
sg29
S'SetSkeletalMesh'
p7450
sg31
I879
sg32
I01
sba(iUnrealScriptIDEData
Function
p7451
(dp7452
g19
S'/** Change the Physics Asset of the mesh */\nsimulated native final function SetPhysicsAsset(PhysicsAsset NewPhysicsAsset, optional bool bForceReInit);\n'
p7453
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7454
sg23
S'PhysicsAsset NewPhysicsAsset, optional bool bForceReInit'
p7455
sg25
g95
sg27
S'simulated native final'
p7456
sg29
S'SetPhysicsAsset'
p7457
sg31
I882
sg32
I01
sba(iUnrealScriptIDEData
Function
p7458
(dp7459
g19
S'/** Change whether to force mesh into ref pose (and use cheaper vertex shader) */\nsimulated native final function SetForceRefPose(bool bNewForceRefPose);\n'
p7460
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7461
sg23
S'bool bNewForceRefPose'
p7462
sg25
g95
sg27
S'simulated native final'
p7463
sg29
S'SetForceRefPose'
p7464
sg31
I885
sg32
I01
sba(iUnrealScriptIDEData
Function
p7465
(dp7466
g19
S'/** Turn on and off cloth simulation for this skeletal mesh. */\nsimulated native final function SetEnableClothSimulation(bool bInEnable);\n'
p7467
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7468
sg23
S'bool bInEnable'
p7469
sg25
g95
sg27
S'simulated native final'
p7470
sg29
S'SetEnableClothSimulation'
p7471
sg31
I890
sg32
I01
sba(iUnrealScriptIDEData
Function
p7472
(dp7473
g19
S'/** Toggle active simulation of cloth. Cheaper than doing SetEnableClothSimulation, and keeps its shape while frozen. */\nsimulated native final function SetClothFrozen(bool bNewFrozen);\n'
p7474
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7475
sg23
S'bool bNewFrozen'
p7476
sg25
g95
sg27
S'simulated native final'
p7477
sg29
S'SetClothFrozen'
p7478
sg31
I893
sg32
I01
sba(iUnrealScriptIDEData
Function
p7479
(dp7480
g19
S'/** Toggle active simulation of clothing and keeps its shape while frozen. */\nsimulated native final function SetEnableClothingSimulation(bool bInEnable);\n'
p7481
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7482
sg23
S'bool bInEnable'
p7483
sg25
g95
sg27
S'simulated native final'
p7484
sg29
S'SetEnableClothingSimulation'
p7485
sg31
I896
sg32
I01
sba(iUnrealScriptIDEData
Function
p7486
(dp7487
g19
S'/** Update params of the this components internal cloth sim from the SkeletalMesh properties. */\nsimulated native final function UpdateClothParams();\n'
p7488
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7489
sg23
g95
sg25
g95
sg27
S'simulated native final'
p7490
sg29
S'UpdateClothParams'
p7491
sg31
I899
sg32
I01
sba(iUnrealScriptIDEData
Function
p7492
(dp7493
g19
S'/** Modify the external force that is applied to the cloth. Will continue to be applied until it is changed. */\nsimulated native final function SetClothExternalForce(vector InForce);\n'
p7494
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7495
sg23
S'vector InForce'
p7496
sg25
g95
sg27
S'simulated native final'
p7497
sg29
S'SetClothExternalForce'
p7498
sg31
I902
sg32
I01
sba(iUnrealScriptIDEData
Function
p7499
(dp7500
g19
S'/** Attach/detach verts from physics body that this components actor is attached to. */\nsimulated native final function SetAttachClothVertsToBaseBody(bool bAttachVerts);\n'
p7501
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7502
sg23
S'bool bAttachVerts'
p7503
sg25
g95
sg27
S'simulated native final'
p7504
sg29
S'SetAttachClothVertsToBaseBody'
p7505
sg31
I905
sg32
I01
sba(iUnrealScriptIDEData
Function
p7506
(dp7507
g19
S'/** Move all vertices in the cloth to the reference pose and zero their velocity. */\nsimulated native final function ResetClothVertsToRefPose();\n'
p7508
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7509
sg23
g95
sg25
g95
sg27
S'simulated native final'
p7510
sg29
S'ResetClothVertsToRefPose'
p7511
sg31
I908
sg32
I01
sba(iUnrealScriptIDEData
Function
p7512
(dp7513
g19
S"/** Forces apex clothing to use 'teleport and reset' for the next update */\nsimulated native final function ForceApexClothingTeleportAndReset();\n"
p7514
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7515
sg23
g95
sg25
g95
sg27
S'simulated native final'
p7516
sg29
S'ForceApexClothingTeleportAndReset'
p7517
sg31
I911
sg32
I01
sba(iUnrealScriptIDEData
Function
p7518
(dp7519
g19
S"/** Forces apex clothing to use 'teleport' for the next update */\nsimulated native final function ForceApexClothingTeleport();\n"
p7520
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7521
sg23
g95
sg25
g95
sg27
S'simulated native final'
p7522
sg29
S'ForceApexClothingTeleport'
p7523
sg31
I913
sg32
I01
sba(iUnrealScriptIDEData
Function
p7524
(dp7525
g19
S'//Some get*() APIs\nsimulated native final function float GetClothAttachmentResponseCoefficient();\n'
p7526
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7527
sg23
g95
sg25
S'float'
p7528
sg27
S'simulated native final'
p7529
sg29
S'GetClothAttachmentResponseCoefficient'
p7530
sg31
I916
sg32
I01
sba(iUnrealScriptIDEData
Function
p7531
(dp7532
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7533
sg23
g95
sg25
S'float'
p7534
sg27
S'simulated native final'
p7535
sg29
S'GetClothAttachmentTearFactor'
p7536
sg31
I917
sg32
I01
sba(iUnrealScriptIDEData
Function
p7537
(dp7538
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7539
sg23
g95
sg25
S'float'
p7540
sg27
S'simulated native final'
p7541
sg29
S'GetClothBendingStiffness'
p7542
sg31
I918
sg32
I01
sba(iUnrealScriptIDEData
Function
p7543
(dp7544
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7545
sg23
g95
sg25
S'float'
p7546
sg27
S'simulated native final'
p7547
sg29
S'GetClothCollisionResponseCoefficient'
p7548
sg31
I919
sg32
I01
sba(iUnrealScriptIDEData
Function
p7549
(dp7550
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7551
sg23
g95
sg25
S'float'
p7552
sg27
S'simulated native final'
p7553
sg29
S'GetClothDampingCoefficient'
p7554
sg31
I920
sg32
I01
sba(iUnrealScriptIDEData
Function
p7555
(dp7556
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7557
sg23
g95
sg25
S'int'
p7558
sg27
S'simulated native final'
p7559
sg29
S'GetClothFlags'
p7560
sg31
I921
sg32
I01
sba(iUnrealScriptIDEData
Function
p7561
(dp7562
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7563
sg23
g95
sg25
S'float'
p7564
sg27
S'simulated native final'
p7565
sg29
S'GetClothFriction'
p7566
sg31
I922
sg32
I01
sba(iUnrealScriptIDEData
Function
p7567
(dp7568
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7569
sg23
g95
sg25
S'float'
p7570
sg27
S'simulated native final'
p7571
sg29
S'GetClothPressure'
p7572
sg31
I923
sg32
I01
sba(iUnrealScriptIDEData
Function
p7573
(dp7574
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7575
sg23
g95
sg25
S'float'
p7576
sg27
S'simulated native final'
p7577
sg29
S'GetClothSleepLinearVelocity'
p7578
sg31
I924
sg32
I01
sba(iUnrealScriptIDEData
Function
p7579
(dp7580
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7581
sg23
g95
sg25
S'int'
p7582
sg27
S'simulated native final'
p7583
sg29
S'GetClothSolverIterations'
p7584
sg31
I925
sg32
I01
sba(iUnrealScriptIDEData
Function
p7585
(dp7586
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7587
sg23
g95
sg25
S'float'
p7588
sg27
S'simulated native final'
p7589
sg29
S'GetClothStretchingStiffness'
p7590
sg31
I926
sg32
I01
sba(iUnrealScriptIDEData
Function
p7591
(dp7592
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7593
sg23
g95
sg25
S'float'
p7594
sg27
S'simulated native final'
p7595
sg29
S'GetClothTearFactor'
p7596
sg31
I927
sg32
I01
sba(iUnrealScriptIDEData
Function
p7597
(dp7598
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7599
sg23
g95
sg25
S'float'
p7600
sg27
S'simulated native final'
p7601
sg29
S'GetClothThickness'
p7602
sg31
I928
sg32
I01
sba(iUnrealScriptIDEData
Function
p7603
(dp7604
g19
S'//some set*() APIs\nsimulated native final function SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient);\n'
p7605
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7606
sg23
S'float ClothAttachmentResponseCoefficient'
p7607
sg25
g95
sg27
S'simulated native final'
p7608
sg29
S'SetClothAttachmentResponseCoefficient'
p7609
sg31
I930
sg32
I01
sba(iUnrealScriptIDEData
Function
p7610
(dp7611
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7612
sg23
S'float ClothAttachTearFactor'
p7613
sg25
g95
sg27
S'simulated native final'
p7614
sg29
S'SetClothAttachmentTearFactor'
p7615
sg31
I931
sg32
I01
sba(iUnrealScriptIDEData
Function
p7616
(dp7617
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7618
sg23
S'float ClothBendingStiffness'
p7619
sg25
g95
sg27
S'simulated native final'
p7620
sg29
S'SetClothBendingStiffness'
p7621
sg31
I932
sg32
I01
sba(iUnrealScriptIDEData
Function
p7622
(dp7623
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7624
sg23
S'float ClothCollisionResponseCoefficient'
p7625
sg25
g95
sg27
S'simulated native final'
p7626
sg29
S'SetClothCollisionResponseCoefficient'
p7627
sg31
I933
sg32
I01
sba(iUnrealScriptIDEData
Function
p7628
(dp7629
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7630
sg23
S'float ClothDampingCoefficient'
p7631
sg25
g95
sg27
S'simulated native final'
p7632
sg29
S'SetClothDampingCoefficient'
p7633
sg31
I934
sg32
I01
sba(iUnrealScriptIDEData
Function
p7634
(dp7635
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7636
sg23
S'int ClothFlags'
p7637
sg25
g95
sg27
S'simulated native final'
p7638
sg29
S'SetClothFlags'
p7639
sg31
I935
sg32
I01
sba(iUnrealScriptIDEData
Function
p7640
(dp7641
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7642
sg23
S'float ClothFriction'
p7643
sg25
g95
sg27
S'simulated native final'
p7644
sg29
S'SetClothFriction'
p7645
sg31
I936
sg32
I01
sba(iUnrealScriptIDEData
Function
p7646
(dp7647
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7648
sg23
S'float ClothPressure'
p7649
sg25
g95
sg27
S'simulated native final'
p7650
sg29
S'SetClothPressure'
p7651
sg31
I937
sg32
I01
sba(iUnrealScriptIDEData
Function
p7652
(dp7653
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7654
sg23
S'float ClothSleepLinearVelocity'
p7655
sg25
g95
sg27
S'simulated native final'
p7656
sg29
S'SetClothSleepLinearVelocity'
p7657
sg31
I938
sg32
I01
sba(iUnrealScriptIDEData
Function
p7658
(dp7659
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7660
sg23
S'int ClothSolverIterations'
p7661
sg25
g95
sg27
S'simulated native final'
p7662
sg29
S'SetClothSolverIterations'
p7663
sg31
I939
sg32
I01
sba(iUnrealScriptIDEData
Function
p7664
(dp7665
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7666
sg23
S'float ClothStretchingStiffness'
p7667
sg25
g95
sg27
S'simulated native final'
p7668
sg29
S'SetClothStretchingStiffness'
p7669
sg31
I940
sg32
I01
sba(iUnrealScriptIDEData
Function
p7670
(dp7671
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7672
sg23
S'float ClothTearFactor'
p7673
sg25
g95
sg27
S'simulated native final'
p7674
sg29
S'SetClothTearFactor'
p7675
sg31
I941
sg32
I01
sba(iUnrealScriptIDEData
Function
p7676
(dp7677
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7678
sg23
S'float ClothThickness'
p7679
sg25
g95
sg27
S'simulated native final'
p7680
sg29
S'SetClothThickness'
p7681
sg31
I942
sg32
I01
sba(iUnrealScriptIDEData
Function
p7682
(dp7683
g19
S'//Other APIs\nsimulated native final function SetClothSleep(bool IfClothSleep);\n'
p7684
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7685
sg23
S'bool IfClothSleep'
p7686
sg25
g95
sg27
S'simulated native final'
p7687
sg29
S'SetClothSleep'
p7688
sg31
I944
sg32
I01
sba(iUnrealScriptIDEData
Function
p7689
(dp7690
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7691
sg23
S'vector ClothOffSet'
p7692
sg25
g95
sg27
S'simulated native final'
p7693
sg29
S'SetClothPosition'
p7694
sg31
I945
sg32
I01
sba(iUnrealScriptIDEData
Function
p7695
(dp7696
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7697
sg23
S'vector VelocityOffSet'
p7698
sg25
g95
sg27
S'simulated native final'
p7699
sg29
S'SetClothVelocity'
p7700
sg31
I946
sg32
I01
sba(iUnrealScriptIDEData
Function
p7701
(dp7702
g19
S'//Attachment API\nsimulated native final function AttachClothToCollidingShapes(bool AttatchTwoWay, bool AttachTearable);\n'
p7703
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7704
sg23
S'bool AttatchTwoWay, bool AttachTearable'
p7705
sg25
g95
sg27
S'simulated native final'
p7706
sg29
S'AttachClothToCollidingShapes'
p7707
sg31
I948
sg32
I01
sba(iUnrealScriptIDEData
Function
p7708
(dp7709
g19
S'//ValidBounds APIs\nsimulated native final function EnableClothValidBounds(bool IfEnableClothValidBounds);\n'
p7710
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7711
sg23
S'bool IfEnableClothValidBounds'
p7712
sg25
g95
sg27
S'simulated native final'
p7713
sg29
S'EnableClothValidBounds'
p7714
sg31
I950
sg32
I01
sba(iUnrealScriptIDEData
Function
p7715
(dp7716
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7717
sg23
S'vector ClothValidBoundsMin, vector ClothValidBoundsMax'
p7718
sg25
g95
sg27
S'simulated native final'
p7719
sg29
S'SetClothValidBounds'
p7720
sg31
I951
sg32
I01
sba(iUnrealScriptIDEData
Function
p7721
(dp7722
g19
S'/** Update soft-body simulation from components params. */\nsimulated native final function UpdateSoftBodyParams();\n'
p7723
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7724
sg23
g95
sg25
g95
sg27
S'simulated native final'
p7725
sg29
S'UpdateSoftBodyParams'
p7726
sg31
I956
sg32
I01
sba(iUnrealScriptIDEData
Function
p7727
(dp7728
g19
S'/** Toggle active simulation of the soft-body. */\nsimulated native final function SetSoftBodyFrozen(bool bNewFrozen);\n'
p7729
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7730
sg23
S'bool bNewFrozen'
p7731
sg25
g95
sg27
S'simulated native final'
p7732
sg29
S'SetSoftBodyFrozen'
p7733
sg31
I959
sg32
I01
sba(iUnrealScriptIDEData
Function
p7734
(dp7735
g19
S'/** Force awake any soft body simulation on this component */\nsimulated native final function WakeSoftBody();\n'
p7736
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7737
sg23
g95
sg25
g95
sg27
S'simulated native final'
p7738
sg29
S'WakeSoftBody'
p7739
sg31
I962
sg32
I01
sba(iUnrealScriptIDEData
Function
p7740
(dp7741
g19
S'/**\n * Find a named AnimSequence from the AnimSets array in the SkeletalMeshComponent.\n * This searches array from end to start, so specific sequence can be replaced by putting a set containing a sequence with the same name later in the array.\n *\n * @param AnimSeqName Name of AnimSequence to look for.\n *\n * @return Pointer to found AnimSequence. Returns NULL if could not find sequence with that name.\n */\nnative final function AnimSequence FindAnimSequence( Name AnimSeqName );\n'
p7742
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7743
sg23
S'Name AnimSeqName'
p7744
sg25
S'AnimSequence'
p7745
sg27
S'native final'
p7746
sg29
S'FindAnimSequence'
p7747
sg31
I972
sg32
I01
sba(iUnrealScriptIDEData
Function
p7748
(dp7749
g19
S"/**\n * Saves the skeletal component's current AnimSets to a temporary buffer.  You can restore them later by calling\n * RestoreSavedAnimSets().\n */\nnative final function SaveAnimSets();\n"
p7750
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7751
sg23
g95
sg25
g95
sg27
S'native final'
p7752
sg29
S'SaveAnimSets'
p7753
sg31
I979
sg32
I01
sba(iUnrealScriptIDEData
Function
p7754
(dp7755
g19
S'/**\n * Restores saved AnimSets to the master list of AnimSets and clears the temporary saved list of AnimSets.\n */\nnative final function RestoreSavedAnimSets();\n'
p7756
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7757
sg23
g95
sg25
g95
sg27
S'native final'
p7758
sg29
S'RestoreSavedAnimSets'
p7759
sg31
I984
sg32
I01
sba(iUnrealScriptIDEData
Function
p7760
(dp7761
g19
S'/**\n * Finds play Rate for a named AnimSequence to match a specified Duration in seconds.\n *\n * @param\tAnimSeqName\tName of AnimSequence to look for.\n * @param\tDuration\tin seconds to match\n *\n * @return\tplay rate of animation, so it plays in <duration> seconds.\n */\nfinal function float GetAnimRateByDuration( Name AnimSeqName, float Duration )\n'
p7762
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7763
sg23
S'Name AnimSeqName, float Duration'
p7764
sg25
S'float'
p7765
sg27
S'final'
p7766
sg29
S'GetAnimRateByDuration'
p7767
sg31
I995
sg32
I01
sba(iUnrealScriptIDEData
Function
p7768
(dp7769
g19
S'/** Returns the duration (in seconds) for a named AnimSequence. Returns 0.f if no animation. */\nfinal function float GetAnimLength(Name AnimSeqName)\n'
p7770
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7771
sg23
S'Name AnimSeqName'
p7772
sg25
S'float'
p7773
sg27
S'final'
p7774
sg29
S'GetAnimLength'
p7775
sg31
I1010
sg32
I01
sba(iUnrealScriptIDEData
Function
p7776
(dp7777
g19
S'/**\n * Find a named MorphTarget from the MorphSets array in the SkeletalMeshComponent.\n * This searches the array in the same way as FindAnimSequence\n *\n * @param AnimSeqName Name of MorphTarget to look for.\n *\n * @return Pointer to found MorphTarget. Returns NULL if could not find target with that name.\n */\nnative final function MorphTarget FindMorphTarget( Name MorphTargetName );\n'
p7778
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7779
sg23
S'Name MorphTargetName'
p7780
sg25
S'MorphTarget'
p7781
sg27
S'native final'
p7782
sg29
S'FindMorphTarget'
p7783
sg31
I1032
sg32
I01
sba(iUnrealScriptIDEData
Function
p7784
(dp7785
g19
S'/**\n * Find an Animation Node in the Animation Tree whose NodeName matches InNodeName.\n * Warning: The search is O(n), so for large AnimTrees, cache result.\n */\nnative final function\tAnimNode\t\t\tFindAnimNode(name InNodeName);\n'
p7786
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7787
sg23
S'name InNodeName'
p7788
sg25
S'AnimNode'
p7789
sg27
S'native final'
p7790
sg29
S'FindAnimNode'
p7791
sg31
I1038
sg32
I01
sba(iUnrealScriptIDEData
Function
p7792
(dp7793
g19
S'/** returns all AnimNodes in the animation tree that are the specfied class or a subclass\n * @param BaseClass base class to return\n * @param Node (out) the returned AnimNode for each iteration\n */\nnative final iterator function AllAnimNodes(class<AnimNode> BaseClass, out AnimNode Node);\n'
p7794
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7795
sg23
S'class<AnimNode> BaseClass, out AnimNode Node'
p7796
sg25
g95
sg27
S'native final iterator'
p7797
sg29
S'AllAnimNodes'
p7798
sg31
I1044
sg32
I01
sba(iUnrealScriptIDEData
Function
p7799
(dp7800
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7801
sg23
S'name InControlName'
p7802
sg25
S'SkelControlBase'
p7803
sg27
S'native final'
p7804
sg29
S'FindSkelControl'
p7805
sg31
I1046
sg32
I01
sba(iUnrealScriptIDEData
Function
p7806
(dp7807
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7808
sg23
S'name InNodeName'
p7809
sg25
S'MorphNodeBase'
p7810
sg27
S'native final'
p7811
sg29
S'FindMorphNode'
p7812
sg31
I1048
sg32
I01
sba(iUnrealScriptIDEData
Function
p7813
(dp7814
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7815
sg23
S'name BoneName, optional int Space ); // 0 == World, 1 == Local (Component'
p7816
sg25
S'quat'
p7817
sg27
S'native final'
p7818
sg29
S'GetBoneQuaternion'
p7819
sg31
I1050
sg32
I01
sba(iUnrealScriptIDEData
Function
p7820
(dp7821
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7822
sg23
S'name BoneName, optional int Space ); // 0 == World, 1 == Local (Component'
p7823
sg25
S'vector'
p7824
sg27
S'native final'
p7825
sg29
S'GetBoneLocation'
p7826
sg31
I1051
sg32
I01
sba(iUnrealScriptIDEData
Function
p7827
(dp7828
g19
S"/** returns the bone index of the specified bone, or INDEX_NONE if it couldn't be found */\nnative final function int MatchRefBone( name BoneName );\n"
p7829
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7830
sg23
S'name BoneName'
p7831
sg25
S'int'
p7832
sg27
S'native final'
p7833
sg29
S'MatchRefBone'
p7834
sg31
I1054
sg32
I01
sba(iUnrealScriptIDEData
Function
p7835
(dp7836
g19
S'/** @return the name of the bone at the specified index */\nnative final function name GetBoneName(int BoneIndex);\n'
p7837
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7838
sg23
S'int BoneIndex'
p7839
sg25
S'name'
p7840
sg27
S'native final'
p7841
sg29
S'GetBoneName'
p7842
sg31
I1056
sg32
I01
sba(iUnrealScriptIDEData
Function
p7843
(dp7844
g19
S'/** returns the matrix of the bone at the specified index */\nnative final function matrix GetBoneMatrix( int BoneIndex );\n'
p7845
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7846
sg23
S'int BoneIndex'
p7847
sg25
S'matrix'
p7848
sg27
S'native final'
p7849
sg29
S'GetBoneMatrix'
p7850
sg31
I1059
sg32
I01
sba(iUnrealScriptIDEData
Function
p7851
(dp7852
g19
S"/** returns the name of the parent bone for the specified bone. Returns 'None' if the bone does not exist or it is the root bone */\nnative final function name GetParentBone(name BoneName);\n"
p7853
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7854
sg23
S'name BoneName'
p7855
sg25
S'name'
p7856
sg27
S'native final'
p7857
sg29
S'GetParentBone'
p7858
sg31
I1062
sg32
I01
sba(iUnrealScriptIDEData
Function
p7859
(dp7860
g19
S"/** fills the given array with the names of all the bones in this component's current SkeletalMesh */\nnative final function GetBoneNames(out array<name> BoneNames);\n"
p7861
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7862
sg23
S'out array<name> BoneNames'
p7863
sg25
g95
sg27
S'native final'
p7864
sg29
S'GetBoneNames'
p7865
sg31
I1065
sg32
I01
sba(iUnrealScriptIDEData
Function
p7866
(dp7867
g19
S'/**\n * Tests if BoneName is child of (or equal to) ParentBoneName.\n * Note - will return FALSE if ChildBoneIndex is the same as ParentBoneIndex ie. must be strictly a child.\n */\nnative final function bool BoneIsChildOf(name BoneName, name ParentBoneName);\n'
p7868
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7869
sg23
S'name BoneName, name ParentBoneName'
p7870
sg25
S'bool'
p7871
sg27
S'native final'
p7872
sg29
S'BoneIsChildOf'
p7873
sg31
I1071
sg32
I01
sba(iUnrealScriptIDEData
Function
p7874
(dp7875
g19
S'/** Gets the local-space position of a bone in the reference pose. */\nnative final function vector GetRefPosePosition(int BoneIndex);\n'
p7876
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7877
sg23
S'int BoneIndex'
p7878
sg25
S'vector'
p7879
sg27
S'native final'
p7880
sg29
S'GetRefPosePosition'
p7881
sg31
I1074
sg32
I01
sba(iUnrealScriptIDEData
Function
p7882
(dp7883
g19
S'/** finds a vector pointing along the given axis of the given bone\n * @param BoneName the name of the bone to find\n * @param Axis the axis of that bone to return\n * @return the direction of the specified axis, or (0,0,0) if the specified bone was not found\n */\nnative final function vector GetBoneAxis(name BoneName, EAxis Axis);\n'
p7884
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7885
sg23
S'name BoneName, EAxis Axis'
p7886
sg25
S'vector'
p7887
sg27
S'native final'
p7888
sg29
S'GetBoneAxis'
p7889
sg31
I1081
sg32
I01
sba(iUnrealScriptIDEData
Function
p7890
(dp7891
g19
S'/**\n *\tTransform a location/rotation from world space to bone relative space.\n *\tThis is handy if you know the location in world space for a bone attachment, as AttachComponent takes location/rotation in bone-relative space.\n */\nnative final function TransformToBoneSpace( name BoneName, vector InPosition, rotator InRotation, out vector OutPosition, out rotator OutRotation );\n'
p7892
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7893
sg23
S'name BoneName, vector InPosition, rotator InRotation, out vector OutPosition, out rotator OutRotation'
p7894
sg25
g95
sg27
S'native final'
p7895
sg29
S'TransformToBoneSpace'
p7896
sg31
I1087
sg32
I01
sba(iUnrealScriptIDEData
Function
p7897
(dp7898
g19
S'/**\n *\tTransform a location/rotation in bone relative space to world space.\n */\nnative final function TransformFromBoneSpace( name BoneName, vector InPosition, rotator InRotation, out vector OutPosition, out rotator OutRotation );\n'
p7899
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7900
sg23
S'name BoneName, vector InPosition, rotator InRotation, out vector OutPosition, out rotator OutRotation'
p7901
sg25
g95
sg27
S'native final'
p7902
sg29
S'TransformFromBoneSpace'
p7903
sg31
I1092
sg32
I01
sba(iUnrealScriptIDEData
Function
p7904
(dp7905
g19
S"/** finds the closest bone to the given location\n * @param TestLocation the location to test against\n * @param BoneLocation (optional, out) if specified, set to the world space location of the bone that was found, or (0,0,0) if no bone was found\n * @param IgnoreScale (optional) if specified, only bones with scaling larger than the specified factor are considered\n * @return the name of the bone that was found, or 'None' if no bone was found\n */\nnative final function name FindClosestBone(vector TestLocation, optional out vector BoneLocation, optional float IgnoreScale);\n"
p7906
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7907
sg23
S'vector TestLocation, optional out vector BoneLocation, optional float IgnoreScale'
p7908
sg25
S'name'
p7909
sg27
S'native final'
p7910
sg29
S'FindClosestBone'
p7911
sg31
I1100
sg32
I01
sba(iUnrealScriptIDEData
Function
p7912
(dp7913
g19
S'/** iterates through all bodies in our PhysicsAsset and returns the location of the closest bone associated\n * with a body that blocks the specified kind of traces\n * @note: only the collision flags on the PhysicsAsset are checked; the collision flags on the component are ignored\n * @param TestLocation - location to check against\n * @param bCheckZeroExtent - consider bodies that block zero extent traces\n * @param bCheckNonZeroExtent - consider bodies that block nonzero extent traces\n * @return location of closest colliding bone, or (0,0,0) if there were no bodies to test\n */\nnative final function vector GetClosestCollidingBoneLocation(vector TestLocation, bool bCheckZeroExtent, bool bCheckNonZeroExtent);\n'
p7914
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7915
sg23
S'vector TestLocation, bool bCheckZeroExtent, bool bCheckNonZeroExtent'
p7916
sg25
S'vector'
p7917
sg27
S'native final'
p7918
sg29
S'GetClosestCollidingBoneLocation'
p7919
sg31
I1110
sg32
I01
sba(iUnrealScriptIDEData
Function
p7920
(dp7921
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7922
sg23
S'AnimTree NewTemplate'
p7923
sg25
g95
sg27
S'native final'
p7924
sg29
S'SetAnimTreeTemplate'
p7925
sg31
I1112
sg32
I01
sba(iUnrealScriptIDEData
Function
p7926
(dp7927
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7928
sg23
S'SkeletalMeshComponent NewParentAnimComp'
p7929
sg25
g95
sg27
S'native final'
p7930
sg29
S'SetParentAnimComponent'
p7931
sg31
I1113
sg32
I01
sba(iUnrealScriptIDEData
Function
p7932
(dp7933
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7934
sg23
g95
sg25
g95
sg27
S'native final'
p7935
sg29
S'UpdateParentBoneMap'
p7936
sg31
I1115
sg32
I01
sba(iUnrealScriptIDEData
Function
p7937
(dp7938
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7939
sg23
g95
sg25
g95
sg27
S'native final'
p7940
sg29
S'InitSkelControls'
p7941
sg31
I1116
sg32
I01
sba(iUnrealScriptIDEData
Function
p7942
(dp7943
g19
S'/**\n*\tInitialize MorphSets look up table : MorphTargetIndexMap\n*/\nnative final function InitMorphTargets();\n'
p7944
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7945
sg23
g95
sg25
g95
sg27
S'native final'
p7946
sg29
S'InitMorphTargets'
p7947
sg31
I1120
sg32
I01
sba(iUnrealScriptIDEData
Function
p7948
(dp7949
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7950
sg23
S'name ConstraintName'
p7951
sg25
S'int'
p7952
sg27
S'final native'
p7953
sg29
S'FindConstraintIndex'
p7954
sg31
I1122
sg32
I01
sba(iUnrealScriptIDEData
Function
p7955
(dp7956
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7957
sg23
S'int ConstraintIndex'
p7958
sg25
S'name'
p7959
sg27
S'final native'
p7960
sg29
S'FindConstraintBoneName'
p7961
sg31
I1123
sg32
I01
sba(iUnrealScriptIDEData
Function
p7962
(dp7963
g19
S'/** Find a BodyInstance by BoneName */\nfinal native function\tRB_BodyInstance\tFindBodyInstanceNamed(Name BoneName);\n'
p7964
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7965
sg23
S'Name BoneName'
p7966
sg25
S'RB_BodyInstance'
p7967
sg27
S'final native'
p7968
sg29
S'FindBodyInstanceNamed'
p7969
sg31
I1126
sg32
I01
sba(iUnrealScriptIDEData
Function
p7970
(dp7971
g19
S'/**\n *\tSet value of bHasPhysicsAssetInstance flag.\n *\tWill create/destroy PhysicsAssetInstance as desired.\n *\t\n * @param bHasInstance - Sets value of flag\n * @param bUseCurrentPosition - If true, skip the skeletal update and use current positions\n */\nfinal native function SetHasPhysicsAssetInstance(bool bHasInstance, optional bool bUseCurrentPosition);\n'
p7972
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7973
sg23
S'bool bHasInstance, optional bool bUseCurrentPosition'
p7974
sg25
g95
sg27
S'final native'
p7975
sg29
S'SetHasPhysicsAssetInstance'
p7976
sg31
I1135
sg32
I01
sba(iUnrealScriptIDEData
Function
p7977
(dp7978
g19
S'/** Force an update of this meshes kinematic bodies and springs. */\nnative final function UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport);\n'
p7979
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7980
sg23
S'bool bMoveUnfixedBodies, bool bTeleport'
p7981
sg25
g95
sg27
S'native final'
p7982
sg29
S'UpdateRBBonesFromSpaceBases'
p7983
sg31
I1138
sg32
I01
sba(iUnrealScriptIDEData
Function
p7984
(dp7985
g19
S"/** forces an update to the mesh's skeleton/attachments, even if bUpdateSkelWhenNotRendered is false and it has not been recently rendered\n * @note if bUpdateSkelWhenNotRendered is true, there is no reason to call this function (but doing so anyway will have no effect)\n */\nnative final function ForceSkelUpdate();\n"
p7986
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7987
sg23
g95
sg25
g95
sg27
S'native final'
p7988
sg29
S'ForceSkelUpdate'
p7989
sg31
I1143
sg32
I01
sba(iUnrealScriptIDEData
Function
p7990
(dp7991
g19
S'/**\n * Force AnimTree to recache all animations.\n * Call this when the AnimSets array has been changed.\n */\nnative final function UpdateAnimations();\n'
p7992
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7993
sg23
g95
sg25
g95
sg27
S'native final'
p7994
sg29
S'UpdateAnimations'
p7995
sg31
I1149
sg32
I01
sba(iUnrealScriptIDEData
Function
p7996
(dp7997
g19
S'/**\n *\tFind all bones by name within given radius\n */\nnative final function bool GetBonesWithinRadius( Vector Origin, FLOAT Radius, INT TraceFlags, out array< Name > out_Bones );\n'
p7998
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p7999
sg23
S'Vector Origin, FLOAT Radius, INT TraceFlags, out array< Name > out_Bones'
p8000
sg25
S'bool'
p8001
sg27
S'native final'
p8002
sg29
S'GetBonesWithinRadius'
p8003
sg31
I1154
sg32
I01
sba(iUnrealScriptIDEData
Function
p8004
(dp8005
g19
S'/**\n * Add a new bone to the list of instance vertex weight bones\n *\n * @param BoneNames - set of bones (implicitly parented) to use for finding vertices\n */\nnative final function AddInstanceVertexWeightBoneParented(name BoneName, optional bool bPairWithParent = TRUE);\n'
p8006
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8007
sg23
S'name BoneName, optional bool bPairWithParent = TRUE'
p8008
sg25
g95
sg27
S'native final'
p8009
sg29
S'AddInstanceVertexWeightBoneParented'
p8010
sg31
I1161
sg32
I01
sba(iUnrealScriptIDEData
Function
p8011
(dp8012
g19
S'/**\n * Remove a new bone to the list of instance vertex weight bones\n *\n * @param BoneNames - set of bones (implicitly parented) to use for finding vertices\n */\nnative final function RemoveInstanceVertexWeightBoneParented(name BoneName);\n'
p8013
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8014
sg23
S'name BoneName'
p8015
sg25
g95
sg27
S'native final'
p8016
sg29
S'RemoveInstanceVertexWeightBoneParented'
p8017
sg31
I1168
sg32
I01
sba(iUnrealScriptIDEData
Function
p8018
(dp8019
g19
S'/**\n * Find an existing bone pair entry in the list of InstanceVertexWeightBones\n *\n * @param Bones - pair of bones to search for\n * @return index of entry found or -1 if not found\n */\nnative final function int FindInstanceVertexweightBonePair(BonePair Bones);\n'
p8020
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8021
sg23
S'BonePair Bones'
p8022
sg25
S'int'
p8023
sg27
S'native final'
p8024
sg29
S'FindInstanceVertexweightBonePair'
p8025
sg31
I1176
sg32
I01
sba(iUnrealScriptIDEData
Function
p8026
(dp8027
g19
S'/**\n * Update the bones that specify which vertices will use instanced influences\n * This will also trigger an update of the vertex weights.\n *\n * @param BonePairs - set of bone pairs to use for finding vertices.\n * A bone can be paired with None bone name to only match up a single bone.\n */\nnative final function UpdateInstanceVertexWeightBones(array<BonePair> BonePairs);\n'
p8028
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8029
sg23
S'array<BonePair> BonePairs'
p8030
sg25
g95
sg27
S'native final'
p8031
sg29
S'UpdateInstanceVertexWeightBones'
p8032
sg31
I1185
sg32
I01
sba(iUnrealScriptIDEData
Function
p8033
(dp8034
g19
S'/**\n * Enabled or disable the instanced vertex weights buffer for the skeletal mesh object\n *\n * @param bEnable - TRUE to enable, FALSE to disable\n * @param LODIdx - LOD to enable\n */\nnative final function ToggleInstanceVertexWeights(bool bEnable, INT LODIdx);\n'
p8035
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8036
sg23
S'bool bEnable, INT LODIdx'
p8037
sg25
g95
sg27
S'native final'
p8038
sg29
S'ToggleInstanceVertexWeights'
p8039
sg31
I1193
sg32
I01
sba(iUnrealScriptIDEData
Function
p8040
(dp8041
g19
S"/**\n * Play the specified FaceFX animation.\n * Returns TRUE if successful.\n * If animation couldn't be found, a log warning will be issued.\n */\nnative final function bool PlayFaceFXAnim(FaceFXAnimSet FaceFXAnimSetRef, string AnimName, string GroupName, SoundCue SoundCueToPlay);\n"
p8042
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8043
sg23
S'FaceFXAnimSet FaceFXAnimSetRef, string AnimName, string GroupName, SoundCue SoundCueToPlay'
p8044
sg25
S'bool'
p8045
sg27
S'native final'
p8046
sg29
S'PlayFaceFXAnim'
p8047
sg31
I1202
sg32
I01
sba(iUnrealScriptIDEData
Function
p8048
(dp8049
g19
S'/** Stop any currently playing FaceFX animation. */\nnative final function StopFaceFXAnim();\n'
p8050
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8051
sg23
g95
sg25
g95
sg27
S'native final'
p8052
sg29
S'StopFaceFXAnim'
p8053
sg31
I1205
sg32
I01
sba(iUnrealScriptIDEData
Function
p8054
(dp8055
g19
S'/** Is playing a FaceFX animation. */\nnative final function bool IsPlayingFaceFXAnim();\n'
p8056
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8057
sg23
g95
sg25
S'bool'
p8058
sg27
S'native final'
p8059
sg29
S'IsPlayingFaceFXAnim'
p8060
sg31
I1208
sg32
I01
sba(iUnrealScriptIDEData
Function
p8061
(dp8062
g19
S'/** Declare a new register in the FaceFX register system.  This is required\n  * before using the register name in GetRegister() or SetRegister(). */\nnative final function DeclareFaceFXRegister( string RegName );\n'
p8063
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8064
sg23
S'string RegName'
p8065
sg25
g95
sg27
S'native final'
p8066
sg29
S'DeclareFaceFXRegister'
p8067
sg31
I1212
sg32
I01
sba(iUnrealScriptIDEData
Function
p8068
(dp8069
g19
S'/** Retrieve the value of the specified FaceFX register. */\nnative final function float GetFaceFXRegister( string RegName );\n'
p8070
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8071
sg23
S'string RegName'
p8072
sg25
S'float'
p8073
sg27
S'native final'
p8074
sg29
S'GetFaceFXRegister'
p8075
sg31
I1215
sg32
I01
sba(iUnrealScriptIDEData
Function
p8076
(dp8077
g19
S'/** Set the value and operation of the specified FaceFX register. */\nnative final function SetFaceFXRegister( string RegName, float RegVal, EFaceFXRegOp RegOp, optional float InterpDuration );\n'
p8078
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8079
sg23
S'string RegName, float RegVal, EFaceFXRegOp RegOp, optional float InterpDuration'
p8080
sg25
g95
sg27
S'native final'
p8081
sg29
S'SetFaceFXRegister'
p8082
sg31
I1218
sg32
I01
sba(iUnrealScriptIDEData
Function
p8083
(dp8084
g19
S'/** Set the value and operation of the specified FaceFX register. */\nnative final function SetFaceFXRegisterEx( string RegName, EFaceFXRegOp RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration );\n'
p8085
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8086
sg23
S'string RegName, EFaceFXRegOp RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration'
p8087
sg25
g95
sg27
S'native final'
p8088
sg29
S'SetFaceFXRegisterEx'
p8089
sg31
I1220
sg32
I01
sba(iUnrealScriptIDEData
Function
p8090
(dp8091
g19
S'/**\n *\tHides the specified bone.  Currently this just enforces a scale of 0 for the hidden bones.\n *\t@param\tPhysBodyOption\t\tOption for physics bodies that attach to the bones to be hidden\n */\nnative final function HideBone( int BoneIndex, EPhysBodyOp PhysBodyOption );\n'
p8092
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8093
sg23
S'int BoneIndex, EPhysBodyOp PhysBodyOption'
p8094
sg25
g95
sg27
S'native final'
p8095
sg29
S'HideBone'
p8096
sg31
I1226
sg32
I01
sba(iUnrealScriptIDEData
Function
p8097
(dp8098
g19
S'/** Unhides the specified bone. */\nnative final function UnHideBone( int BoneIndex );\n'
p8099
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8100
sg23
S'int BoneIndex'
p8101
sg25
g95
sg27
S'native final'
p8102
sg29
S'UnHideBone'
p8103
sg31
I1228
sg32
I01
sba(iUnrealScriptIDEData
Function
p8104
(dp8105
g19
S'/** Determines if the specified bone is hidden. */\nnative final function bool IsBoneHidden( int BoneIndex );\n'
p8106
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8107
sg23
S'int BoneIndex'
p8108
sg25
S'bool'
p8109
sg27
S'native final'
p8110
sg29
S'IsBoneHidden'
p8111
sg31
I1230
sg32
I01
sba(iUnrealScriptIDEData
Function
p8112
(dp8113
g19
S'/**\n *\tHides the specified bone with name.  Currently this just enforces a scale of 0 for the hidden bones.\n *\tCompoared to HideBone By Index - This keeps track of list of bones and update when LOD changes\n *\t@param  BoneName            Name of bone to hide\n *\t@param\tPhysBodyOption\t\tOption for physics bodies that attach to the bones to be hidden\n */\nnative final function HideBoneByName( name BoneName, EPhysBodyOp PhysBodyOption );\n'
p8114
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8115
sg23
S'name BoneName, EPhysBodyOp PhysBodyOption'
p8116
sg25
g95
sg27
S'native final'
p8117
sg29
S'HideBoneByName'
p8118
sg31
I1238
sg32
I01
sba(iUnrealScriptIDEData
Function
p8119
(dp8120
g19
S'/**\n *\tUnHide the specified bone with name.  Currently this just enforces a scale of 0 for the hidden bones.\n *\tCompoared to HideBone By Index - This keeps track of list of bones and update when LOD changes\n *\t@param  BoneName            Name of bone to unhide\n */\nnative final function UnHideBoneByName( name BoneName );\n'
p8121
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8122
sg23
S'name BoneName'
p8123
sg25
g95
sg27
S'native final'
p8124
sg29
S'UnHideBoneByName'
p8125
sg31
I1245
sg32
I01
sba(iUnrealScriptIDEData
Function
p8126
(dp8127
g19
S'/**\n* Looks up all bodies for broken constraints.\n* Makes sure child bodies of a broken constraints are not fixed and using bone springs, and child joints not motorized.\n*/\nsimulated final native function UpdateMeshForBrokenConstraints();\n'
p8128
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8129
sg23
g95
sg25
g95
sg27
S'simulated final native'
p8130
sg29
S'UpdateMeshForBrokenConstraints'
p8131
sg31
I1251
sg32
I01
sba(iUnrealScriptIDEData
Function
p8132
(dp8133
g19
S'/**\n *  Show/Hide Material - technical correct name for this is Section, but seems Material is mostly used\n *  This disable rendering of certain Material ID (Section)\n *\n * @param MaterialID - id of the material to match a section on and to show/hide\n * @param bShow - TRUE to show the section, otherwise hide it\n * @param LODIndex - index of the lod entry since material mapping is unique to each LOD\n */\nsimulated final native function ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);\n'
p8134
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8135
sg23
S'int MaterialID, bool bShow, int LODIndex'
p8136
sg25
g95
sg27
S'simulated final native'
p8137
sg29
S'ShowMaterialSection'
p8138
sg31
I1261
sg32
I01
sba(iUnrealScriptIDEData
Function
p8139
(dp8140
g19
S'/** simple generic case animation player\n * requires that the one and only animation node in the AnimTree is an AnimNodeSequence\n * @param AnimName name of the animation to play\n * @param Duration (optional) override duration for the animation\n * @param bLoop (optional) whether the animation should loop\n * @param bRestartIfAlreadyPlaying whether or not to restart the animation if the specified anim is already playing\n * @param StartTime (optional) What time to start the animation at\n * @param bPlayBackwards (optional) Play this animation backwards\n */\nfunction PlayAnim(name AnimName, optional float Duration, optional bool bLoop, optional bool bRestartIfAlreadyPlaying = true, optional float StartTime=0.0f, optional bool bPlayBackwards=false)\n'
p8141
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8142
sg23
S'name AnimName, optional float Duration, optional bool bLoop, optional bool bRestartIfAlreadyPlaying = true, optional float StartTime=0.0f, optional bool bPlayBackwards=false'
p8143
sg25
g95
sg27
g95
sg29
S'PlayAnim'
p8144
sg31
I1273
sg32
I01
sba(iUnrealScriptIDEData
Function
p8145
(dp8146
g19
S'/** simple generic case animation stopper\n * requires that the one and only animation node in the AnimTree is an AnimNodeSequence\n */\nfunction StopAnim()\n'
p8147
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8148
sg23
g95
sg25
g95
sg27
g95
sg29
S'StopAnim'
p8149
sg31
I1319
sg32
I01
sba(iUnrealScriptIDEData
Function
p8150
(dp8151
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8152
sg23
S'const AnimNotify_Forcefield AnimNotifyData'
p8153
sg25
S'bool'
p8154
sg27
g95
sg29
S'CreateForceField'
p8155
sg31
I1347
sg32
I00
sba(iUnrealScriptIDEData
Function
p8156
(dp8157
g19
S'/**\n* Called by AnimNotify_PlayParticleEffect\n* Looks for a socket name first then bone name\n*\n* @param AnimNotifyData The AnimNotify_PlayParticleEffect which will have all of the various params on it\n*/\nevent bool PlayParticleEffect( const AnimNotify_PlayParticleEffect AnimNotifyData )\n'
p8158
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8159
sg23
S'const AnimNotify_PlayParticleEffect AnimNotifyData'
p8160
sg25
S'bool'
p8161
sg27
g95
sg29
S'PlayParticleEffect'
p8162
sg31
I1373
sg32
I00
sba(iUnrealScriptIDEData
Function
p8163
(dp8164
g19
S'/** We so we detach the Component once we are done playing it **/\nsimulated function SkelMeshCompOnParticleSystemFinished( ParticleSystemComponent PSC )\n'
p8165
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8166
sg23
S'ParticleSystemComponent PSC'
p8167
sg25
g95
sg27
S'simulated'
p8168
sg29
S'SkelMeshCompOnParticleSystemFinished'
p8169
sg31
I1512
sg32
I01
sba(iUnrealScriptIDEData
Function
p8170
(dp8171
g19
S'/** Break a constraint off a Gore mesh. */\nsimulated final function BreakConstraint(Vector Impulse, Vector HitLocation, Name InBoneName, optional bool bVelChange)\n'
p8172
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8173
sg23
S'Vector Impulse, Vector HitLocation, Name InBoneName, optional bool bVelChange'
p8174
sg25
g95
sg27
S'simulated final'
p8175
sg29
S'BreakConstraint'
p8176
sg31
I1518
sg32
I01
sba(iUnrealScriptIDEData
Function
p8177
(dp8178
g19
S'/** Returns position of the component, in world space. */\nnative function vector GetPosition();\n'
p8179
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8180
sg23
g95
sg25
S'vector'
p8181
sg27
S'native'
p8182
sg29
S'GetPosition'
p8183
sg31
I1571
sg32
I01
sba(iUnrealScriptIDEData
Function
p8184
(dp8185
g19
S'/** Returns rotation of the component, in world space. */\nnative function rotator GetRotation();\n'
p8186
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8187
sg23
g95
sg25
S'rotator'
p8188
sg27
S'native'
p8189
sg29
S'GetRotation'
p8190
sg31
I1573
sg32
I01
sba(iUnrealScriptIDEData
Function
p8191
(dp8192
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8193
sg23
S'int ElementIndex, MaterialInterface Material'
p8194
sg25
g95
sg27
S'native virtual'
p8195
sg29
S'SetMaterial'
p8196
sg31
I1574
sg32
I01
sbasg1531
S'meshcomponent'
p8197
sg19
S'/**\n * Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\n */\nclass SkeletalMeshComponent extends MeshComponent\n'
p8198
sg1534
(lp8199
sg1536
VSkeletalMeshComponent
p8200
sg1538
(lp8201
sg1540
(lp8202
(iUnrealScriptIDEData
Struct
p8203
(dp8204
g1544
S'struct ActiveMorph\n'
p8205
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8206
sg19
S'/** Struct used to indicate one active morph target that should be applied to this SkeletalMesh when rendered. */\nstruct ActiveMorph\n'
p8207
sg1536
S'ActiveMorph'
p8208
sg82
(lp8209
(iUnrealScriptIDEData
Variable
p8210
(dp8211
g19
S'\t/** The morph target that we want to apply. */\n\tvar\tMorphTarget\t\tTarget;\n'
p8212
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8213
sg1553
g95
sg1554
(lp8214
S'var'
p8215
aS'MorphTarget'
p8216
asg1536
S'Target'
p8217
sg31
I148
sba(iUnrealScriptIDEData
Variable
p8218
(dp8219
g19
S'\t/** Strength of the morph target, between 0.0 and 1.0 */\n\tvar\tfloat\t\t\tWeight;\n'
p8220
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8221
sg1553
g95
sg1554
(lp8222
S'var'
p8223
aS'float'
p8224
asg1536
S'Weight'
p8225
sg31
I151
sbasg31
I145
sba(iUnrealScriptIDEData
Struct
p8226
(dp8227
g1544
S'struct Attachment\n'
p8228
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8229
sg19
g95
sg1536
S'Attachment'
p8230
sg82
(lp8231
(iUnrealScriptIDEData
Variable
p8232
(dp8233
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8234
sg1553
g95
sg1554
(lp8235
S'var()'
p8236
aS'editinline'
p8237
aS'ActorComponent'
p8238
asg1536
S'Component'
p8239
sg31
I167
sba(iUnrealScriptIDEData
Variable
p8240
(dp8241
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8242
sg1553
g95
sg1554
(lp8243
S'var()'
p8244
aS'name'
p8245
asg1536
S'BoneName'
p8246
sg31
I168
sba(iUnrealScriptIDEData
Variable
p8247
(dp8248
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8249
sg1553
g95
sg1554
(lp8250
S'var()'
p8251
aS'vector'
p8252
asg1536
S'RelativeLocation'
p8253
sg31
I169
sba(iUnrealScriptIDEData
Variable
p8254
(dp8255
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8256
sg1553
g95
sg1554
(lp8257
S'var()'
p8258
aS'rotator'
p8259
asg1536
S'RelativeRotation'
p8260
sg31
I170
sba(iUnrealScriptIDEData
Variable
p8261
(dp8262
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8263
sg1553
g95
sg1554
(lp8264
S'var()'
p8265
aS'vector'
p8266
asg1536
S'RelativeScale'
p8267
sg31
I171
sbasg31
I165
sba(iUnrealScriptIDEData
Struct
p8268
(dp8269
g1544
S'struct BonePair\n'
p8270
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8271
sg19
S'/**\n* Set of bones which will be used to find vertices to switch to using instanced influence weights\n* instead of the default skeletal mesh weighting.\n*/\nstruct BonePair\n'
p8272
sg1536
S'BonePair'
p8273
sg82
(lp8274
(iUnrealScriptIDEData
Variable
p8275
(dp8276
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8277
sg1553
g95
sg1554
(lp8278
S'var'
p8279
aS'name'
p8280
asg1536
S'Bones[2]'
p8281
sg31
I481
sbasg31
I479
sba(iUnrealScriptIDEData
Struct
p8282
(dp8283
g1544
S'struct SkelMeshComponentLODInfo\n'
p8284
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8285
sg19
S'/** LOD specific setup for the skeletal mesh component */\nstruct SkelMeshComponentLODInfo\n'
p8286
sg1536
S'SkelMeshComponentLODInfo'
p8287
sg82
(lp8288
(iUnrealScriptIDEData
Variable
p8289
(dp8290
g19
S'\t/** Material corresponds to section. To show/hide each section, use this **/\n\tvar const array<bool> HiddenMaterials;\n'
p8291
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8292
sg1553
g95
sg1554
(lp8293
S'var'
p8294
aS'const'
p8295
aS'array<bool>'
p8296
asg1536
S'HiddenMaterials'
p8297
sg31
I489
sba(iUnrealScriptIDEData
Variable
p8298
(dp8299
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8300
sg1553
g95
sg1554
(lp8301
S'var'
p8302
aS'const'
p8303
aS'bool'
p8304
asg1536
S'bNeedsInstanceWeightUpdate'
p8305
sg31
I490
sba(iUnrealScriptIDEData
Variable
p8306
(dp8307
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8308
sg1553
g95
sg1554
(lp8309
S'var'
p8310
aS'const'
p8311
aS'bool'
p8312
asg1536
S'bAlwaysUseInstanceWeights'
p8313
sg31
I491
sba(iUnrealScriptIDEData
Variable
p8314
(dp8315
g19
S'\t/** Whether the instance weights are used for a partial/full swap */\n\tvar const transient EInstanceWeightUsage InstanceWeightUsage;\n'
p8316
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8317
sg1553
g95
sg1554
(lp8318
S'var'
p8319
aS'const'
p8320
aS'transient'
p8321
aS'EInstanceWeightUsage'
p8322
asg1536
S'InstanceWeightUsage'
p8323
sg31
I493
sba(iUnrealScriptIDEData
Variable
p8324
(dp8325
g19
S'\t/** Current index into the skeletal mesh VertexInfluences for the current LOD */\n\tvar const transient int InstanceWeightIdx;\n'
p8326
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8327
sg1553
g95
sg1554
(lp8328
S'var'
p8329
aS'const'
p8330
aS'transient'
p8331
aS'int'
p8332
asg1536
S'InstanceWeightIdx'
p8333
sg31
I495
sbasg31
I486
sbasg82
(lp8334
(iUnrealScriptIDEData
Variable
p8335
(dp8336
g19
S'/** The skeletal mesh used by this component. */\nvar()\tSkeletalMesh\t\t\tSkeletalMesh;\n'
p8337
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8338
sg1553
g95
sg1554
(lp8339
S'var()'
p8340
aS'SkeletalMesh'
p8341
asg1536
S'SkeletalMesh'
p8342
sg31
I13
sba(iUnrealScriptIDEData
Variable
p8343
(dp8344
g19
S'/** The SkeletalMeshComponent that this one is possibly attached to. */\nvar\t\tSkeletalMeshComponent\tAttachedToSkelComponent;\n'
p8345
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8346
sg1553
g95
sg1554
(lp8347
S'var'
p8348
aS'SkeletalMeshComponent'
p8349
asg1536
S'AttachedToSkelComponent'
p8350
sg31
I16
sba(iUnrealScriptIDEData
Variable
p8351
(dp8352
g19
S'/**\n *\tThis should point to the AnimTree in a content package.\n *\tBeginPlay on this SkeletalMeshComponent will instance (copy) the tree and assign the instance to the Animations pointer.\n */\nvar()   const\t\t\t\t\tAnimTree\tAnimTreeTemplate;\n'
p8353
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8354
sg1553
g95
sg1554
(lp8355
S'var()'
p8356
aS'const'
p8357
aS'AnimTree'
p8358
asg1536
S'AnimTreeTemplate'
p8359
sg31
I22
sba(iUnrealScriptIDEData
Variable
p8360
(dp8361
g19
S'/**\n *\tThis is the unique instance of the AnimTree used by this SkeletalMeshComponent.\n *\tTHIS SHOULD NEVER POINT TO AN ANIMTREE IN A CONTENT PACKAGE.\n */\nvar()\tconst editinline export AnimNode Animations <MaxPropertyDepth=3>;\n'
p8362
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8363
sg1553
g95
sg1554
(lp8364
S'var()'
p8365
aS'const'
p8366
aS'editinline'
p8367
aS'export'
p8368
aS'AnimNode'
p8369
aS'Animations'
p8370
asg1536
g95
sg31
I28
sba(iUnrealScriptIDEData
Variable
p8371
(dp8372
g19
S'/** Array of all AnimNodes in entire tree, in the order they should be ticked - that is, all parents appear before a child. */\nvar\tconst transient array<AnimNode> AnimTickArray;\n'
p8373
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8374
sg1553
g95
sg1554
(lp8375
S'var'
p8376
aS'const'
p8377
aS'transient'
p8378
aS'array<AnimNode>'
p8379
asg1536
S'AnimTickArray'
p8380
sg31
I31
sba(iUnrealScriptIDEData
Variable
p8381
(dp8382
g19
S'/** Special Array of nodes that should always be ticked, even when not relevant. */\nvar const transient array<AnimNode> AnimAlwaysTickArray;\n'
p8383
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8384
sg1553
g95
sg1554
(lp8385
S'var'
p8386
aS'const'
p8387
aS'transient'
p8388
aS'array<AnimNode>'
p8389
asg1536
S'AnimAlwaysTickArray'
p8390
sg31
I33
sba(iUnrealScriptIDEData
Variable
p8391
(dp8392
g19
S'/** Anim nodes relevancy status. Matching AnimTickArray size and indices. */\nvar const transient array<INT> AnimTickRelevancyArray;\n'
p8393
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8394
sg1553
g95
sg1554
(lp8395
S'var'
p8396
aS'const'
p8397
aS'transient'
p8398
aS'array<INT>'
p8399
asg1536
S'AnimTickRelevancyArray'
p8400
sg31
I35
sba(iUnrealScriptIDEData
Variable
p8401
(dp8402
g19
S'/** Anim nodes weights. Matching AnimTickArray size and indices. */\nvar const transient array<FLOAT> AnimTickWeightsArray;\n'
p8403
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8404
sg1553
g95
sg1554
(lp8405
S'var'
p8406
aS'const'
p8407
aS'transient'
p8408
aS'array<FLOAT>'
p8409
asg1536
S'AnimTickWeightsArray'
p8410
sg31
I37
sba(iUnrealScriptIDEData
Variable
p8411
(dp8412
g19
S'/** Linear Array for ticking SkelControls faster */\nvar const transient Array<SkelControlBase> SkelControlTickArray;\n'
p8413
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8414
sg1553
g95
sg1554
(lp8415
S'var'
p8416
aS'const'
p8417
aS'transient'
p8418
aS'Array<SkelControlBase>'
p8419
asg1536
S'SkelControlTickArray'
p8420
sg31
I39
sba(iUnrealScriptIDEData
Variable
p8421
(dp8422
g19
S'/**\n *\tPhysics and collision information used for this SkeletalMesh, set up in PhAT.\n *\tThis is used for per-bone hit detection, accurate bounding box calculation and ragdoll physics for example.\n */\nvar()\tconst PhysicsAsset\t\t\t\t\t\t\t\t\t\tPhysicsAsset;\n'
p8423
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8424
sg1553
g95
sg1554
(lp8425
S'var()'
p8426
aS'const'
p8427
aS'PhysicsAsset'
p8428
asg1536
S'PhysicsAsset'
p8429
sg31
I45
sba(iUnrealScriptIDEData
Variable
p8430
(dp8431
g19
S'/**\n *\tAny instanced physics engine information for this SkeletalMeshComponent.\n *\tThis is only required when you want to run physics or you want physical interaction with this skeletal mesh.\n */\nvar\t\tconst transient editinline export PhysicsAssetInstance\tPhysicsAssetInstance;\n'
p8432
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8433
sg1553
g95
sg1554
(lp8434
S'var'
p8435
aS'const'
p8436
aS'transient'
p8437
aS'editinline'
p8438
aS'export'
p8439
aS'PhysicsAssetInstance'
p8440
asg1536
S'PhysicsAssetInstance'
p8441
sg31
I51
sba(iUnrealScriptIDEData
Variable
p8442
(dp8443
g19
S'/**\n * Contains a pointer to the active APEX clothing instance.\n */\nvar const native transient pointer ApexClothing;\n'
p8444
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8445
sg1553
g95
sg1554
(lp8446
S'var'
p8447
aS'const'
p8448
aS'native'
p8449
aS'transient'
p8450
aS'pointer'
p8451
asg1536
S'ApexClothing'
p8452
sg31
I56
sba(iUnrealScriptIDEData
Variable
p8453
(dp8454
g19
S"/**\n *\tInfluence of rigid body physics on the mesh's pose (0.0 == use only animation, 1.0 == use only physics)\n */\nvar()\tinterp float\t\t\tPhysicsWeight;\n"
p8455
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8456
sg1553
g95
sg1554
(lp8457
S'var()'
p8458
aS'interp'
p8459
aS'float'
p8460
asg1536
S'PhysicsWeight'
p8461
sg31
I73
sba(iUnrealScriptIDEData
Variable
p8462
(dp8463
g19
S'/** Used to scale speed of all animations on this skeletal mesh. */\nvar()\tfloat\t\t\t\t\tGlobalAnimRateScale;\n'
p8464
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8465
sg1553
g95
sg1554
(lp8466
S'var()'
p8467
aS'float'
p8468
asg1536
S'GlobalAnimRateScale'
p8469
sg31
I76
sba(iUnrealScriptIDEData
Variable
p8470
(dp8471
g19
S'/**\n * Allows adjusting the desired streaming distance of streaming textures that uses UV 0.\n * 1.0 is the default, whereas a higher value makes the textures stream in sooner from far away.\n * A lower value (0.0-1.0) makes the textures stream in later (you have to be closer).\n */\nvar()\tfloat\tStreamingDistanceMultiplier;\n'
p8472
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8473
sg1553
g95
sg1554
(lp8474
S'var()'
p8475
aS'float'
p8476
asg1536
S'StreamingDistanceMultiplier'
p8477
sg31
I83
sba(iUnrealScriptIDEData
Variable
p8478
(dp8479
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8480
sg1553
g95
sg1554
(lp8481
S'var'
p8482
aS'native'
p8483
aS'transient'
p8484
aS'const'
p8485
aS'pointer'
p8486
asg1536
S'MeshObject'
p8487
sg31
I85
sba(iUnrealScriptIDEData
Variable
p8488
(dp8489
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8490
sg1553
g95
sg1554
(lp8491
S'var()'
p8492
aS'Color'
p8493
asg1536
S'WireframeColor'
p8494
sg31
I86
sba(iUnrealScriptIDEData
Variable
p8495
(dp8496
g19
S'/** Temporary array of of component-space bone matrices, update each frame and used for rendering the mesh. */\nvar native transient const array<AnimNode.BoneAtom>\t\t\tSpaceBases;\n'
p8497
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8498
sg1553
g95
sg1554
(lp8499
S'var'
p8500
aS'native'
p8501
aS'transient'
p8502
aS'const'
p8503
aS'array<AnimNode.BoneAtom>'
p8504
asg1536
S'SpaceBases'
p8505
sg31
I89
sba(iUnrealScriptIDEData
Variable
p8506
(dp8507
g19
S'/** Temporary array of local-space (ie relative to parent bone) rotation/translation for each bone. */\nvar native transient const array<AnimNode.BoneAtom>\t\t    LocalAtoms;\n'
p8508
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8509
sg1553
g95
sg1554
(lp8510
S'var'
p8511
aS'native'
p8512
aS'transient'
p8513
aS'const'
p8514
aS'array<AnimNode.BoneAtom>'
p8515
asg1536
S'LocalAtoms'
p8516
sg31
I92
sba(iUnrealScriptIDEData
Variable
p8517
(dp8518
g19
S'/** Cached Bones, for performance. */\nvar native transient const array<AnimNode.BoneAtom>\t\t    CachedLocalAtoms;\n'
p8519
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8520
sg1553
g95
sg1554
(lp8521
S'var'
p8522
aS'native'
p8523
aS'transient'
p8524
aS'const'
p8525
aS'array<AnimNode.BoneAtom>'
p8526
asg1536
S'CachedLocalAtoms'
p8527
sg31
I95
sba(iUnrealScriptIDEData
Variable
p8528
(dp8529
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8530
sg1553
g95
sg1554
(lp8531
S'var'
p8532
aS'native'
p8533
aS'transient'
p8534
aS'const'
p8535
aS'array<AnimNode.BoneAtom>'
p8536
asg1536
S'CachedSpaceBases'
p8537
sg31
I96
sba(iUnrealScriptIDEData
Variable
p8538
(dp8539
g19
S"/** When updated at low frequency, rate of update.\n *  For example if set to 3, animations will be updated once every three frames.\n *  if games runs at 30 FPS, that's 10 FPS.\n *  Not recommended to change during gameplay. */\nvar const globalconfig INT LowUpdateFrameRate;\n"
p8540
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8541
sg1553
g95
sg1554
(lp8542
S'var'
p8543
aS'const'
p8544
aS'globalconfig'
p8545
aS'INT'
p8546
asg1536
S'LowUpdateFrameRate'
p8547
sg31
I102
sba(iUnrealScriptIDEData
Variable
p8548
(dp8549
g19
S'/** Temporary array of bone indices required this frame. Filled in by UpdateSkelPose. */\nvar native const transient Array<byte> RequiredBones;\n'
p8550
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8551
sg1553
g95
sg1554
(lp8552
S'var'
p8553
aS'native'
p8554
aS'const'
p8555
aS'transient'
p8556
aS'Array<byte>'
p8557
asg1536
S'RequiredBones'
p8558
sg31
I105
sba(iUnrealScriptIDEData
Variable
p8559
(dp8560
g19
S'/** Required Bones array, re-ordered for 3 pass skeleton composing */\nvar native const transient Array<Byte> ComposeOrderedRequiredBones;\n'
p8561
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8562
sg1553
g95
sg1554
(lp8563
S'var'
p8564
aS'native'
p8565
aS'const'
p8566
aS'transient'
p8567
aS'Array<Byte>'
p8568
asg1536
S'ComposeOrderedRequiredBones'
p8569
sg31
I107
sba(iUnrealScriptIDEData
Variable
p8570
(dp8571
g19
S'/**\n *\tIf set, this SkeletalMeshComponent will not use its Animations pointer to do its own animation blending, but will\n *\tuse the SpaceBases array in the ParentAnimComponent. This is used when constructing a character using multiple skeletal meshes sharing the same\n *\tskeleton within the same Actor.\n */\nvar()\tconst SkeletalMeshComponent\tParentAnimComponent;\n'
p8572
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8573
sg1553
g95
sg1554
(lp8574
S'var()'
p8575
aS'const'
p8576
aS'SkeletalMeshComponent'
p8577
asg1536
S'ParentAnimComponent'
p8578
sg31
I114
sba(iUnrealScriptIDEData
Variable
p8579
(dp8580
g19
S'/**\n *\tMapping between bone indices in this component and the parent one. Each element is the index of the bone in the ParentAnimComponent.\n *\tSize should be the same as SkeletalMesh.RefSkeleton size (ie number of bones in this skeleton).\n */\nvar native transient const array<int> ParentBoneMap;\n'
p8581
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8582
sg1553
g95
sg1554
(lp8583
S'var'
p8584
aS'native'
p8585
aS'transient'
p8586
aS'const'
p8587
aS'array<int>'
p8588
asg1536
S'ParentBoneMap'
p8589
sg31
I120
sba(iUnrealScriptIDEData
Variable
p8590
(dp8591
g19
S'/**\n *\tThe set of AnimSets that will be looked in to find a particular sequence, specified by name in an AnimNodeSequence.\n *\tArray is search from last to first element, so you can replace a particular sequence but putting a set containing the new version later in the array.\n *\tYou will need to call SetAnim again on nodes that may be affected by any changes you make to this array.\n */\nvar()\tarray<AnimSet>\t\t\tAnimSets;\n'
p8592
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8593
sg1553
g95
sg1554
(lp8594
S'var()'
p8595
aS'array<AnimSet>'
p8596
asg1536
S'AnimSets'
p8597
sg31
I127
sba(iUnrealScriptIDEData
Variable
p8598
(dp8599
g19
S"/**\n *  Temporary array of AnimSets that are used as a backup target when the engine needs to temporarily modify the\n *\tactor's animation set list. (e.g. Matinee playback)\n */\nvar native transient const array<AnimSet> TemporarySavedAnimSets;\n"
p8600
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8601
sg1553
g95
sg1554
(lp8602
S'var'
p8603
aS'native'
p8604
aS'transient'
p8605
aS'const'
p8606
aS'array<AnimSet>'
p8607
asg1536
S'TemporarySavedAnimSets'
p8608
sg31
I133
sba(iUnrealScriptIDEData
Variable
p8609
(dp8610
g19
S'/**\n *\tArray of MorphTargetSets that will be looked in to find a particular MorphTarget, specified by name.\n *\tIt is searched in the same way as the AnimSets array above.\n */\nvar()\tarray<MorphTargetSet>\tMorphSets;\n'
p8611
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8612
sg1553
g95
sg1554
(lp8613
S'var()'
p8614
aS'array<MorphTargetSet>'
p8615
asg1536
S'MorphSets'
p8616
sg31
I142
sba(iUnrealScriptIDEData
Variable
p8617
(dp8618
g19
S"/** Array indicating all active MorphTargets. This array is updated inside UpdateSkelPose based on the AnimTree's st of MorphNodes. */\nvar\ttransient array<ActiveMorph>\tActiveMorphs;\n"
p8619
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8620
sg1553
g95
sg1554
(lp8621
S'var'
p8622
aS'transient'
p8623
aS'array<ActiveMorph>'
p8624
asg1536
S'ActiveMorphs'
p8625
sg31
I155
sba(iUnrealScriptIDEData
Variable
p8626
(dp8627
g19
S"/** Array indicating all active MorphTargets. This array is updated inside UpdateSkelPose based on the AnimTree's st of MorphNodes. */\nvar\ttransient array<ActiveMorph>\tActiveCurveMorphs;\n"
p8628
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8629
sg1553
g95
sg1554
(lp8630
S'var'
p8631
aS'transient'
p8632
aS'array<ActiveMorph>'
p8633
asg1536
S'ActiveCurveMorphs'
p8634
sg31
I158
sba(iUnrealScriptIDEData
Variable
p8635
(dp8636
g19
S'/** Map of morph target to name **/\nvar\t\tconst native\tmap{FName, UMorphTarget*}\t\t\tMorphTargetIndexMap;\n'
p8637
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8638
sg1553
g95
sg1554
(lp8639
S'var'
p8640
aS'const'
p8641
aS'native'
p8642
aS'map{FName,'
p8643
aS'UMorphTarget*}'
p8644
asg1536
S'MorphTargetIndexMap'
p8645
sg31
I161
sba(iUnrealScriptIDEData
Variable
p8646
(dp8647
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8648
sg1553
g95
sg1554
(lp8649
S'var'
p8650
aS'duplicatetransient'
p8651
aS'const'
p8652
aS'array<Attachment>'
p8653
asg1536
S'Attachments'
p8654
sg31
I179
sba(iUnrealScriptIDEData
Variable
p8655
(dp8656
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8657
sg1553
g95
sg1554
(lp8658
S'var'
p8659
aS'transient'
p8660
aS'const'
p8661
aS'array<byte>'
p8662
asg1536
S'SkelControlIndex'
p8663
sg31
I181
sba(iUnrealScriptIDEData
Variable
p8664
(dp8665
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8666
sg1553
g95
sg1554
(lp8667
S'var'
p8668
aS'transient'
p8669
aS'const'
p8670
aS'array<byte>'
p8671
asg1536
S'PostPhysSkelControlIndex'
p8672
sg31
I182
sba(iUnrealScriptIDEData
Variable
p8673
(dp8674
g19
S'/** If 0, auto-select LOD level. if >0, force to (ForcedLodModel-1). */\nvar() int\t\tForcedLodModel;\n'
p8675
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8676
sg1553
g95
sg1554
(lp8677
S'var()'
p8678
aS'int'
p8679
asg1536
S'ForcedLodModel'
p8680
sg31
I185
sba(iUnrealScriptIDEData
Variable
p8681
(dp8682
g19
S'/**\n * This is the min LOD that this component will use.  (e.g. if set to 2 then only 2+ LOD Models will be used.) This is useful to set on\n * meshes which are known to be a certain distance away and still want to have better LODs when zoomed in on them.\n **/\nvar() int\t\tMinLodModel;\n'
p8683
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8684
sg1553
g95
sg1554
(lp8685
S'var()'
p8686
aS'int'
p8687
asg1536
S'MinLodModel'
p8688
sg31
I190
sba(iUnrealScriptIDEData
Variable
p8689
(dp8690
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8691
sg1553
g95
sg1554
(lp8692
S'var'
p8693
aS'int'
p8694
asg1536
S'PredictedLODLevel'
p8695
sg31
I191
sba(iUnrealScriptIDEData
Variable
p8696
(dp8697
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8698
sg1553
S' LOD level from previous frame, so we can detect changes in LOD to recalc required bones'
p8699
sg1554
(lp8700
S'var'
p8701
aS'int'
p8702
asg1536
S'OldPredictedLODLevel'
p8703
sg31
I192
sba(iUnrealScriptIDEData
Variable
p8704
(dp8705
g19
S'/** If MaxDistanceFactor goes below this value (and it is non 0), start playing animations at a lower frame rate */\nvar() float     AnimationLODDistanceFactor;\n'
p8706
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8707
sg1553
g95
sg1554
(lp8708
S'var()'
p8709
aS'float'
p8710
asg1536
S'AnimationLODDistanceFactor'
p8711
sg31
I195
sba(iUnrealScriptIDEData
Variable
p8712
(dp8713
g19
S'/** Rate of update for skeletal meshes that are below AnimationLODDistanceFactor. For example if set to 3, animations will be updated once every three frames. */\nvar() int       AnimationLODFrameRate;\n'
p8714
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8715
sg1553
g95
sg1554
(lp8716
S'var()'
p8717
aS'int'
p8718
asg1536
S'AnimationLODFrameRate'
p8719
sg31
I198
sba(iUnrealScriptIDEData
Variable
p8720
(dp8721
g19
S'/**\tHigh (best) DistanceFactor that was desired for rendering this SkeletalMesh last frame. Represents how big this mesh was in screen space   */\nvar const float\t\tMaxDistanceFactor;\n'
p8722
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8723
sg1553
g95
sg1554
(lp8724
S'var'
p8725
aS'const'
p8726
aS'float'
p8727
asg1536
S'MaxDistanceFactor'
p8728
sg31
I201
sba(iUnrealScriptIDEData
Variable
p8729
(dp8730
g19
S'/** Index of the chunk to preview... If set to -1, all chunks will be rendered */\nvar editoronly transient int\tChunkIndexPreview;\n'
p8731
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8732
sg1553
g95
sg1554
(lp8733
S'var'
p8734
aS'editoronly'
p8735
aS'transient'
p8736
aS'int'
p8737
asg1536
S'ChunkIndexPreview'
p8738
sg31
I204
sba(iUnrealScriptIDEData
Variable
p8739
(dp8740
g19
S'/** Index of the section to preview... If set to -1, all section will be rendered */\nvar editoronly transient int\tSectionIndexPreview;\n'
p8741
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8742
sg1553
g95
sg1554
(lp8743
S'var'
p8744
aS'editoronly'
p8745
aS'transient'
p8746
aS'int'
p8747
asg1536
S'SectionIndexPreview'
p8748
sg31
I206
sba(iUnrealScriptIDEData
Variable
p8749
(dp8750
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8751
sg1553
S' Forces the mesh to draw in wireframe mode.'
p8752
sg1554
(lp8753
S'var'
p8754
aS'int'
p8755
asg1536
S'bForceWireframe'
p8756
sg31
I208
sba(iUnrealScriptIDEData
Variable
p8757
(dp8758
g19
S'/** If true, force the mesh into the reference pose - is an optimization. */\nvar int\t\t\tbForceRefpose;\n'
p8759
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8760
sg1553
g95
sg1554
(lp8761
S'var'
p8762
aS'int'
p8763
asg1536
S'bForceRefpose'
p8764
sg31
I211
sba(iUnrealScriptIDEData
Variable
p8765
(dp8766
g19
S'/** If bForceRefPose was set last tick. */\nvar int\t\t\tbOldForceRefPose;\n'
p8767
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8768
sg1553
g95
sg1554
(lp8769
S'var'
p8770
aS'int'
p8771
asg1536
S'bOldForceRefPose'
p8772
sg31
I213
sba(iUnrealScriptIDEData
Variable
p8773
(dp8774
g19
S'/** Skip UpdateSkelPose. */\nvar() bool\t\tbNoSkeletonUpdate;\n'
p8775
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8776
sg1553
g95
sg1554
(lp8777
S'var()'
p8778
aS'bool'
p8779
asg1536
S'bNoSkeletonUpdate'
p8780
sg31
I216
sba(iUnrealScriptIDEData
Variable
p8781
(dp8782
g19
S'/** Draw the skeleton hierarchy for this skel mesh. */\nvar int\t\t\tbDisplayBones;\n'
p8783
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8784
sg1553
g95
sg1554
(lp8785
S'var'
p8786
aS'int'
p8787
asg1536
S'bDisplayBones'
p8788
sg31
I219
sba(iUnrealScriptIDEData
Variable
p8789
(dp8790
g19
S'/** Bool that enables debug drawing of the skeleton before it is passed to the physics. Useful for debugging animation-driven physics. */\nvar int\t\t\tbShowPrePhysBones;\n'
p8791
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8792
sg1553
g95
sg1554
(lp8793
S'var'
p8794
aS'int'
p8795
asg1536
S'bShowPrePhysBones'
p8796
sg31
I222
sba(iUnrealScriptIDEData
Variable
p8797
(dp8798
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8799
sg1553
g95
sg1554
(lp8800
S'var'
p8801
aS'int'
p8802
asg1536
S'bHideSkin'
p8803
sg31
I224
sba(iUnrealScriptIDEData
Variable
p8804
(dp8805
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8806
sg1553
g95
sg1554
(lp8807
S'var'
p8808
aS'int'
p8809
asg1536
S'bForceRawOffset'
p8810
sg31
I225
sba(iUnrealScriptIDEData
Variable
p8811
(dp8812
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8813
sg1553
g95
sg1554
(lp8814
S'var'
p8815
aS'int'
p8816
asg1536
S'bIgnoreControllers'
p8817
sg31
I226
sba(iUnrealScriptIDEData
Variable
p8818
(dp8819
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8820
sg1553
g95
sg1554
(lp8821
S'var'
p8822
aS'int'
p8823
asg1536
S'bTransformFromAnimParent'
p8824
sg31
I227
sba(iUnrealScriptIDEData
Variable
p8825
(dp8826
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8827
sg1553
g95
sg1554
(lp8828
S'var'
p8829
aS'const'
p8830
aS'transient'
p8831
aS'int'
p8832
asg1536
S'TickTag'
p8833
sg31
I228
sba(iUnrealScriptIDEData
Variable
p8834
(dp8835
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8836
sg1553
g95
sg1554
(lp8837
S'var'
p8838
aS'const'
p8839
aS'transient'
p8840
aS'int'
p8841
asg1536
S'InitTag'
p8842
sg31
I229
sba(iUnrealScriptIDEData
Variable
p8843
(dp8844
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8845
sg1553
g95
sg1554
(lp8846
S'var'
p8847
aS'const'
p8848
aS'transient'
p8849
aS'int'
p8850
asg1536
S'CachedAtomsTag'
p8851
sg31
I230
sba(iUnrealScriptIDEData
Variable
p8852
(dp8853
g19
S'/**\n * Only instance Root Bone rigid body for physics. Mostly used by Vehicles.\n * Other Rigid Bodies are ignored for physics, but still considered for traces.\n */\nvar\tconst int\tbUseSingleBodyPhysics;\n'
p8854
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8855
sg1553
g95
sg1554
(lp8856
S'var'
p8857
aS'const'
p8858
aS'int'
p8859
asg1536
S'bUseSingleBodyPhysics'
p8860
sg31
I236
sba(iUnrealScriptIDEData
Variable
p8861
(dp8862
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8863
sg1553
g95
sg1554
(lp8864
S'var'
p8865
aS'transient'
p8866
aS'int'
p8867
asg1536
S'bRequiredBonesUpToDate'
p8868
sg31
I238
sba(iUnrealScriptIDEData
Variable
p8869
(dp8870
g19
S"/**\n *\tIf non-zero, skeletal mesh component will not update kinematic bones and bone springs when distance factor is greater than this (or has not been rendered for a while).\n *\tThis also turns off BlockRigidBody, so you do not get collisions with 'left behind' ragdoll setups.  Items will fall through\n * the world if you move too far away from them and they are in RigigBody.\n */\nvar float\t\tMinDistFactorForKinematicUpdate;\n"
p8871
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8872
sg1553
g95
sg1554
(lp8873
S'var'
p8874
aS'float'
p8875
asg1536
S'MinDistFactorForKinematicUpdate'
p8876
sg31
I245
sba(iUnrealScriptIDEData
Variable
p8877
(dp8878
g19
S'/** Used to keep track of how many frames physics has been asleep for (when using PHYS_RigidBody). */\nvar transient int\t\tFramesPhysicsAsleep;\n'
p8879
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8880
sg1553
g95
sg1554
(lp8881
S'var'
p8882
aS'transient'
p8883
aS'int'
p8884
asg1536
S'FramesPhysicsAsleep'
p8885
sg31
I248
sba(iUnrealScriptIDEData
Variable
p8886
(dp8887
g19
S'/** <2 means no skip, 2 means every other frame, 3 means 1 out of three frames, etc  */\nvar const transient int SkipRateForTickAnimNodesAndGetBoneAtoms;\n'
p8888
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8889
sg1553
g95
sg1554
(lp8890
S'var'
p8891
aS'const'
p8892
aS'transient'
p8893
aS'int'
p8894
asg1536
S'SkipRateForTickAnimNodesAndGetBoneAtoms'
p8895
sg31
I251
sba(iUnrealScriptIDEData
Variable
p8896
(dp8897
g19
S'/** If TRUE, we will not tick the anim nodes */\nvar const transient bool bSkipTickAnimNodes;\n'
p8898
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8899
sg1553
g95
sg1554
(lp8900
S'var'
p8901
aS'const'
p8902
aS'transient'
p8903
aS'bool'
p8904
asg1536
S'bSkipTickAnimNodes'
p8905
sg31
I254
sba(iUnrealScriptIDEData
Variable
p8906
(dp8907
g19
S'/** If TRUE, we will not call GetBonesAtoms, and instead use cached data */\nvar const transient bool bSkipGetBoneAtoms;\n'
p8908
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8909
sg1553
g95
sg1554
(lp8910
S'var'
p8911
aS'const'
p8912
aS'transient'
p8913
aS'bool'
p8914
asg1536
S'bSkipGetBoneAtoms'
p8915
sg31
I257
sba(iUnrealScriptIDEData
Variable
p8916
(dp8917
g19
S'/** If TRUE, then bSkipGetBoneAtoms is also true; we will interpolate cached data */\nvar const transient bool bInterpolateBoneAtoms;\n'
p8918
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8919
sg1553
g95
sg1554
(lp8920
S'var'
p8921
aS'const'
p8922
aS'transient'
p8923
aS'bool'
p8924
asg1536
S'bInterpolateBoneAtoms'
p8925
sg31
I260
sba(iUnrealScriptIDEData
Variable
p8926
(dp8927
g19
S'/** If TRUE, there is at least one body in the current PhysicsAsset with a valid bone in the current SkeletalMesh */\nvar const transient bool bHasValidBodies;\n'
p8928
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8929
sg1553
g95
sg1554
(lp8930
S'var'
p8931
aS'const'
p8932
aS'transient'
p8933
aS'bool'
p8934
asg1536
S'bHasValidBodies'
p8935
sg31
I263
sba(iUnrealScriptIDEData
Variable
p8936
(dp8937
g19
S'/**\n * When true, if owned by a PHYS_RigidBody Actor, skip all update (bones and bounds) when physics are asleep.   This is a very top level\n * optimization flag for things we know are just physics (e.g. Kassets).  Lots of things have physics on them that are asleep while the\n * actor moves around the level and then are woken up.  Setting this flag to true will stop those actors from having any updates which is not\n * what we want in the general case.\n */\nvar bool\t\tbSkipAllUpdateWhenPhysicsAsleep;\n'
p8938
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8939
sg1553
g95
sg1554
(lp8940
S'var'
p8941
aS'bool'
p8942
asg1536
S'bSkipAllUpdateWhenPhysicsAsleep'
p8943
sg31
I271
sba(iUnrealScriptIDEData
Variable
p8944
(dp8945
g19
S'/** When true, skip using the physics asset etc. and always use the fixed bounds defined in the SkeletalMesh. */\nvar() bool\t\tbComponentUseFixedSkelBounds;\n'
p8946
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8947
sg1553
g95
sg1554
(lp8948
S'var()'
p8949
aS'bool'
p8950
asg1536
S'bComponentUseFixedSkelBounds'
p8951
sg31
I274
sba(iUnrealScriptIDEData
Variable
p8952
(dp8953
g19
S'/** \n * When true, we will just using the bounds from our ParentAnimComponent.  This is useful for when we have a Mesh Parented\n * to the main SkelMesh (e.g. outline mesh or a full body overdraw effect that is toggled) that is always going to be the same\n * bounds as parent.  We want to do no calculations in that case.\n */\nvar() bool\t\tbUseBoundsFromParentAnimComponent;\n'
p8954
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8955
sg1553
g95
sg1554
(lp8956
S'var()'
p8957
aS'bool'
p8958
asg1536
S'bUseBoundsFromParentAnimComponent'
p8959
sg31
I281
sba(iUnrealScriptIDEData
Variable
p8960
(dp8961
g19
S'/** If TRUE, when updating bounds from a PhysicsAsset, consider _all_ BodySetups, not just those flagged with bConsiderForBounds. */\nvar() bool\t\tbConsiderAllBodiesForBounds;\n'
p8962
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8963
sg1553
g95
sg1554
(lp8964
S'var()'
p8965
aS'bool'
p8966
asg1536
S'bConsiderAllBodiesForBounds'
p8967
sg31
I284
sba(iUnrealScriptIDEData
Variable
p8968
(dp8969
g19
S'/** If true, update skeleton/attachments even when our Owner has not been rendered recently\n * @note if this is false, bone information may not be accurate, so be careful setting this to false if bone info is relevant to gameplay\n * @note you can use ForceSkelUpdate() to force an update\n * @note: In the output from SHOWSKELCOMPTICKTIME you want UpdatePoseTotal to be 0 when this is FALSE for a specific component\n */\nvar() bool bUpdateSkelWhenNotRendered;\n'
p8970
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8971
sg1553
g95
sg1554
(lp8972
S'var()'
p8973
aS'bool'
p8974
asg1536
S'bUpdateSkelWhenNotRendered'
p8975
sg31
I291
sba(iUnrealScriptIDEData
Variable
p8976
(dp8977
g19
S'/** If true, do not apply any SkelControls when owner has not been rendered recently. */\nvar bool bIgnoreControllersWhenNotRendered;\n'
p8978
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8979
sg1553
g95
sg1554
(lp8980
S'var'
p8981
aS'bool'
p8982
asg1536
S'bIgnoreControllersWhenNotRendered'
p8983
sg31
I294
sba(iUnrealScriptIDEData
Variable
p8984
(dp8985
g19
S'/** If true, tick anim nodes even when our Owner has not been rendered recently  */\nvar bool bTickAnimNodesWhenNotRendered;\n'
p8986
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8987
sg1553
g95
sg1554
(lp8988
S'var'
p8989
aS'bool'
p8990
asg1536
S'bTickAnimNodesWhenNotRendered'
p8991
sg31
I297
sba(iUnrealScriptIDEData
Variable
p8992
(dp8993
g19
S'/** If this is true, we are not updating kinematic bones and motors based on animation because the skeletal mesh is too far from any viewer. */\nvar\tconst bool bNotUpdatingKinematicDueToDistance;\n'
p8994
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p8995
sg1553
g95
sg1554
(lp8996
S'var'
p8997
aS'const'
p8998
aS'bool'
p8999
asg1536
S'bNotUpdatingKinematicDueToDistance'
p9000
sg31
I300
sba(iUnrealScriptIDEData
Variable
p9001
(dp9002
g19
S'/** force root motion to be discarded, no matter what the AnimNodeSequence(s) are set to do */\nvar() bool bForceDiscardRootMotion;\n'
p9003
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9004
sg1553
g95
sg1554
(lp9005
S'var()'
p9006
aS'bool'
p9007
asg1536
S'bForceDiscardRootMotion'
p9008
sg31
I303
sba(iUnrealScriptIDEData
Variable
p9009
(dp9010
g19
S'/** Call RootMotionProcessed notification on Owner */\nvar() bool bNotifyRootMotionProcessed;\n'
p9011
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9012
sg1553
g95
sg1554
(lp9013
S'var()'
p9014
aS'bool'
p9015
asg1536
S'bNotifyRootMotionProcessed'
p9016
sg31
I305
sba(iUnrealScriptIDEData
Variable
p9017
(dp9018
g19
S'/**\n * if TRUE, notify owning actor of root motion mode changes.\n * This calls the Actor.RootMotionModeChanged() event.\n * This is useful for synchronizing movements.\n * For intance, when using RMM_Translate, and the event is called, we know that root motion will kick in on next frame.\n * It is possible to kill in-game physics, and then use root motion seemlessly.\n */\nvar bool bRootMotionModeChangeNotify;\n'
p9019
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9020
sg1553
g95
sg1554
(lp9021
S'var'
p9022
aS'bool'
p9023
asg1536
S'bRootMotionModeChangeNotify'
p9024
sg31
I314
sba(iUnrealScriptIDEData
Variable
p9025
(dp9026
g19
S"/**\n * if TRUE, the event RootMotionExtracted() will be called on this owning actor,\n * after root motion has been extracted, and before it's been used.\n * This notification can be used to alter extracted root motion before it is forwarded to physics.\n */\nvar bool bRootMotionExtractedNotify;\n"
p9027
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9028
sg1553
g95
sg1554
(lp9029
S'var'
p9030
aS'bool'
p9031
asg1536
S'bRootMotionExtractedNotify'
p9032
sg31
I321
sba(iUnrealScriptIDEData
Variable
p9033
(dp9034
g19
S'/** Flag set when processing root motion. */\nvar transient bool bProcessingRootMotion;\n'
p9035
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9036
sg1553
g95
sg1554
(lp9037
S'var'
p9038
aS'transient'
p9039
aS'bool'
p9040
asg1536
S'bProcessingRootMotion'
p9041
sg31
I324
sba(iUnrealScriptIDEData
Variable
p9042
(dp9043
g19
S'/** If true, FaceFX will not automatically create material instances. */\nvar() bool bDisableFaceFXMaterialInstanceCreation;\n'
p9044
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9045
sg1553
g95
sg1554
(lp9046
S'var()'
p9047
aS'bool'
p9048
asg1536
S'bDisableFaceFXMaterialInstanceCreation'
p9049
sg31
I327
sba(iUnrealScriptIDEData
Variable
p9050
(dp9051
g19
S'/** If true, disable FaceFX entirely for this component */\nvar() bool bDisableFaceFX;\n'
p9052
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9053
sg1553
g95
sg1554
(lp9054
S'var()'
p9055
aS'bool'
p9056
asg1536
S'bDisableFaceFX'
p9057
sg31
I330
sba(iUnrealScriptIDEData
Variable
p9058
(dp9059
g19
S'/** If true, AnimTree has been initialised. */\nvar const transient bool bAnimTreeInitialised;\n'
p9060
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9061
sg1553
g95
sg1554
(lp9062
S'var'
p9063
aS'const'
p9064
aS'transient'
p9065
aS'bool'
p9066
asg1536
S'bAnimTreeInitialised'
p9067
sg31
I333
sba(iUnrealScriptIDEData
Variable
p9068
(dp9069
g19
S'/** If TRUE, UpdateTransform will always result in a call to MeshObject->Update. */\nvar private transient bool\tbForceMeshObjectUpdate;\n'
p9070
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9071
sg1553
g95
sg1554
(lp9072
S'var'
p9073
aS'private'
p9074
aS'transient'
p9075
aS'bool'
p9076
asg1536
S'bForceMeshObjectUpdate'
p9077
sg31
I336
sba(iUnrealScriptIDEData
Variable
p9078
(dp9079
g19
S'/**\n *\tIndicates whether this SkeletalMeshComponent should have a physics engine representation of its state.\n *\t@see SetHasPhysicsAssetInstance\n */\nvar() const bool bHasPhysicsAssetInstance;\n'
p9080
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9081
sg1553
g95
sg1554
(lp9082
S'var()'
p9083
aS'const'
p9084
aS'bool'
p9085
asg1536
S'bHasPhysicsAssetInstance'
p9086
sg31
I342
sba(iUnrealScriptIDEData
Variable
p9087
(dp9088
g19
S'/** If we are running physics, should we update bFixed bones based on the animation bone positions. */\nvar() bool\tbUpdateKinematicBonesFromAnimation;\n'
p9089
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9090
sg1553
g95
sg1554
(lp9091
S'var()'
p9092
aS'bool'
p9093
asg1536
S'bUpdateKinematicBonesFromAnimation'
p9094
sg31
I345
sba(iUnrealScriptIDEData
Variable
p9095
(dp9096
g19
S'/**\n *\tIf we should pass joint position to joints each frame, so that they can be used by motorized joints to drive the\n *\tragdoll based on the animation.\n */\nvar() bool\tbUpdateJointsFromAnimation;\n'
p9097
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9098
sg1553
g95
sg1554
(lp9099
S'var()'
p9100
aS'bool'
p9101
asg1536
S'bUpdateJointsFromAnimation'
p9102
sg31
I351
sba(iUnrealScriptIDEData
Variable
p9103
(dp9104
g19
S"/** Indicates whether this SkeletalMeshComponent is currently considered 'fixed' (ie kinematic) */\nvar const bool\tbSkelCompFixed;\n"
p9105
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9106
sg1553
g95
sg1554
(lp9107
S'var'
p9108
aS'const'
p9109
aS'bool'
p9110
asg1536
S'bSkelCompFixed'
p9111
sg31
I354
sba(iUnrealScriptIDEData
Variable
p9112
(dp9113
g19
S'/** Used for consistency checking. Indicates that the results of physics have been blended into SpaceBases this frame. */\nvar\tconst bool\tbHasHadPhysicsBlendedIn;\n'
p9114
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9115
sg1553
g95
sg1554
(lp9116
S'var'
p9117
aS'const'
p9118
aS'bool'
p9119
asg1536
S'bHasHadPhysicsBlendedIn'
p9120
sg31
I357
sba(iUnrealScriptIDEData
Variable
p9121
(dp9122
g19
S"/**\n *\tIf true, attachments will be updated twice a frame - once in Tick and again when UpdateTransform is called.\n *\tThis can resolve some 'frame behind' issues if an attachment need to be in the correct location for it's Tick, but at a cost.\n */\nvar() bool\tbForceUpdateAttachmentsInTick;\n"
p9123
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9124
sg1553
g95
sg1554
(lp9125
S'var()'
p9126
aS'bool'
p9127
asg1536
S'bForceUpdateAttachmentsInTick'
p9128
sg31
I363
sba(iUnrealScriptIDEData
Variable
p9129
(dp9130
g19
S'/** Enables blending in of physics bodies with the bAlwaysFullAnimWeight flag set. (e.g. hair and other flappy bits!)*/\nvar transient bool\tbEnableFullAnimWeightBodies;\n'
p9131
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9132
sg1553
g95
sg1554
(lp9133
S'var'
p9134
aS'transient'
p9135
aS'bool'
p9136
asg1536
S'bEnableFullAnimWeightBodies'
p9137
sg31
I366
sba(iUnrealScriptIDEData
Variable
p9138
(dp9139
g19
S'/**\n *\tIf true, when this skeletal mesh overlaps a physics volume, each body of it will be tested against the volume, so only limbs\n *\tactually in the volume will be affected. Useful when gibbing bodies.\n */\nvar() bool\t\tbPerBoneVolumeEffects;\n'
p9140
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9141
sg1553
g95
sg1554
(lp9142
S'var()'
p9143
aS'bool'
p9144
asg1536
S'bPerBoneVolumeEffects'
p9145
sg31
I372
sba(iUnrealScriptIDEData
Variable
p9146
(dp9147
g19
S'/**\n *\tIf true, use per-bone motion blur on this skeletal mesh.\n */\nvar() bool\t\tbPerBoneMotionBlur;\n'
p9148
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9149
sg1553
g95
sg1554
(lp9150
S'var()'
p9151
aS'bool'
p9152
asg1536
S'bPerBoneMotionBlur'
p9153
sg31
I377
sba(iUnrealScriptIDEData
Variable
p9154
(dp9155
g19
S'/** If true, will move the Actors Location to match the root rigid body location when in PHYS_RigidBody. */\nvar() bool\t\tbSyncActorLocationToRootRigidBody;\n'
p9156
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9157
sg1553
g95
sg1554
(lp9158
S'var()'
p9159
aS'bool'
p9160
asg1536
S'bSyncActorLocationToRootRigidBody'
p9161
sg31
I380
sba(iUnrealScriptIDEData
Variable
p9162
(dp9163
g19
S'/** If TRUE, force usage of raw animation data when animating this skeletal mesh; if FALSE, use compressed data. */\nvar const bool\tbUseRawData;\n'
p9164
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9165
sg1553
g95
sg1554
(lp9166
S'var'
p9167
aS'const'
p9168
aS'bool'
p9169
asg1536
S'bUseRawData'
p9170
sg31
I383
sba(iUnrealScriptIDEData
Variable
p9171
(dp9172
g19
S'/** Disable warning when an AnimSequence is not found. FALSE by default. */\nvar bool\t\tbDisableWarningWhenAnimNotFound;\n'
p9173
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9174
sg1553
g95
sg1554
(lp9175
S'var'
p9176
aS'bool'
p9177
asg1536
S'bDisableWarningWhenAnimNotFound'
p9178
sg31
I386
sba(iUnrealScriptIDEData
Variable
p9179
(dp9180
g19
S'/** if set, components that are attached to us have their bOwnerNoSee and bOnlyOwnerSee properties overridden by ours */\nvar bool bOverrideAttachmentOwnerVisibility;\n'
p9181
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9182
sg1553
g95
sg1554
(lp9183
S'var'
p9184
aS'bool'
p9185
asg1536
S'bOverrideAttachmentOwnerVisibility'
p9186
sg31
I389
sba(iUnrealScriptIDEData
Variable
p9187
(dp9188
g19
S'/** if TRUE, when detach, send message to renderthread to delete this component from hit mask list **/\nvar const transient bool bNeedsToDeleteHitMask;\n'
p9189
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9190
sg1553
g95
sg1554
(lp9191
S'var'
p9192
aS'const'
p9193
aS'transient'
p9194
aS'bool'
p9195
asg1536
S'bNeedsToDeleteHitMask'
p9196
sg31
I392
sba(iUnrealScriptIDEData
Variable
p9197
(dp9198
g19
S"/** pauses this component's animations (doesn't tick them) */\nvar bool bPauseAnims;\n"
p9199
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9200
sg1553
g95
sg1554
(lp9201
S'var'
p9202
aS'bool'
p9203
asg1536
S'bPauseAnims'
p9204
sg31
I395
sba(iUnrealScriptIDEData
Variable
p9205
(dp9206
g19
S'/** If true, DistanceFactor for this SkeletalMeshComponent will be added to global chart. */\nvar bool\tbChartDistanceFactor;\n'
p9207
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9208
sg1553
g95
sg1554
(lp9209
S'var'
p9210
aS'bool'
p9211
asg1536
S'bChartDistanceFactor'
p9212
sg31
I397
sba(iUnrealScriptIDEData
Variable
p9213
(dp9214
g19
S'/** If TRUE, line checks will test against the bounding box of this skeletal mesh component and return a hit if there is a collision. */\nvar bool\tbEnableLineCheckWithBounds;\n'
p9215
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9216
sg1553
g95
sg1554
(lp9217
S'var'
p9218
aS'bool'
p9219
asg1536
S'bEnableLineCheckWithBounds'
p9220
sg31
I399
sba(iUnrealScriptIDEData
Variable
p9221
(dp9222
g19
S'/** Whether or not we can highlight selected sections - this should really only be done in the editor */\nvar transient bool bCanHighlightSelectedSections;\n'
p9223
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9224
sg1553
g95
sg1554
(lp9225
S'var'
p9226
aS'transient'
p9227
aS'bool'
p9228
asg1536
S'bCanHighlightSelectedSections'
p9229
sg31
I402
sba(iUnrealScriptIDEData
Variable
p9230
(dp9231
g19
S'/** Update Morph when ParentAnimComponent exists **/\nvar() bool bUpdateMorphWhenParentAnimComponentExists;\n'
p9232
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9233
sg1553
g95
sg1554
(lp9234
S'var()'
p9235
aS'bool'
p9236
asg1536
S'bUpdateMorphWhenParentAnimComponentExists'
p9237
sg31
I405
sba(iUnrealScriptIDEData
Variable
p9238
(dp9239
g19
S'/** If bEnableLineCheckWithBounds is TRUE, scale the bounds by this value before doing line check. */\nvar\tvector\tLineCheckBoundsScale;\n'
p9240
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9241
sg1553
g95
sg1554
(lp9242
S'var'
p9243
aS'vector'
p9244
asg1536
S'LineCheckBoundsScale'
p9245
sg31
I408
sba(iUnrealScriptIDEData
Variable
p9246
(dp9247
g19
S'/**\n *\tWhether cloth simulation should currently be used on this SkeletalMeshComponent.\n *\t@see SetEnableClothSimulation\n */\nvar(Cloth)\tconst bool\t\tbEnableClothSimulation;\n'
p9248
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9249
sg1553
g95
sg1554
(lp9250
S'var(Cloth)'
p9251
aS'const'
p9252
aS'bool'
p9253
asg1536
S'bEnableClothSimulation'
p9254
sg31
I416
sba(iUnrealScriptIDEData
Variable
p9255
(dp9256
g19
S'/** Turns off all cloth collision so not checks are done (improves performance). */\nvar(Cloth)\tconst bool\t\tbDisableClothCollision;\n'
p9257
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9258
sg1553
g95
sg1554
(lp9259
S'var(Cloth)'
p9260
aS'const'
p9261
aS'bool'
p9262
asg1536
S'bDisableClothCollision'
p9263
sg31
I419
sba(iUnrealScriptIDEData
Variable
p9264
(dp9265
g19
S"/** If true, cloth is 'frozen' and no simulation is taking place for it, though it will keep its shape. */\nvar(Cloth)\tconst bool\t\tbClothFrozen;\n"
p9266
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9267
sg1553
g95
sg1554
(lp9268
S'var(Cloth)'
p9269
aS'const'
p9270
aS'bool'
p9271
asg1536
S'bClothFrozen'
p9272
sg31
I422
sba(iUnrealScriptIDEData
Variable
p9273
(dp9274
g19
S'/** If true, cloth will automatically have bClothFrozen set when it is not rendered, and have it turned off when it is seen. */\nvar(Cloth)\tbool\t\t\tbAutoFreezeClothWhenNotRendered;\n'
p9275
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9276
sg1553
g95
sg1554
(lp9277
S'var(Cloth)'
p9278
aS'bool'
p9279
asg1536
S'bAutoFreezeClothWhenNotRendered'
p9280
sg31
I425
sba(iUnrealScriptIDEData
Variable
p9281
(dp9282
g19
S'/** If true, cloth will be awake when a level is started, otherwise it will be instantly put to sleep. */\nvar(Cloth)\tbool\t\t\tbClothAwakeOnStartup;\n'
p9283
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9284
sg1553
g95
sg1554
(lp9285
S'var(Cloth)'
p9286
aS'bool'
p9287
asg1536
S'bClothAwakeOnStartup'
p9288
sg31
I428
sba(iUnrealScriptIDEData
Variable
p9289
(dp9290
g19
S'/** It true, clamp velocity of cloth particles to be within ClothBaseVelClampRange of Base velocity. */\nvar(Cloth)\tbool\t\t\tbClothBaseVelClamp;\n'
p9291
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9292
sg1553
g95
sg1554
(lp9293
S'var(Cloth)'
p9294
aS'bool'
p9295
asg1536
S'bClothBaseVelClamp'
p9296
sg31
I431
sba(iUnrealScriptIDEData
Variable
p9297
(dp9298
g19
S'/** It true, interp velocity of cloth particles towards Base velocity, using ClothBaseVelClampRange as the interp rate (0..1). */\nvar(Cloth)\tbool\t\t\tbClothBaseVelInterp;\n'
p9299
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9300
sg1553
g95
sg1554
(lp9301
S'var(Cloth)'
p9302
aS'bool'
p9303
asg1536
S'bClothBaseVelInterp'
p9304
sg31
I434
sba(iUnrealScriptIDEData
Variable
p9305
(dp9306
g19
S'/** If true, fixed verts of the cloth are attached in the physics to the physics body that this components actor is attached to. */\nvar(Cloth)\tbool\t\t\tbAttachClothVertsToBaseBody;\n'
p9307
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9308
sg1553
g95
sg1554
(lp9309
S'var(Cloth)'
p9310
aS'bool'
p9311
asg1536
S'bAttachClothVertsToBaseBody'
p9312
sg31
I437
sba(iUnrealScriptIDEData
Variable
p9313
(dp9314
g19
S'/** Whether this cloth is on a non-animating static object. */\nvar(Cloth)\tbool\t\t\tbIsClothOnStaticObject;\n'
p9315
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9316
sg1553
g95
sg1554
(lp9317
S'var(Cloth)'
p9318
aS'bool'
p9319
asg1536
S'bIsClothOnStaticObject'
p9320
sg31
I440
sba(iUnrealScriptIDEData
Variable
p9321
(dp9322
g19
S"/** Whether we've updated fixed cloth verts since last attachment. */\nvar\t\t\tbool\t\t\tbUpdatedFixedClothVerts;\n"
p9323
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9324
sg1553
g95
sg1554
(lp9325
S'var'
p9326
aS'bool'
p9327
asg1536
S'bUpdatedFixedClothVerts'
p9328
sg31
I442
sba(iUnrealScriptIDEData
Variable
p9329
(dp9330
g19
S'/** Whether should do positional box dampening */\nvar(Cloth)\tbool\t\t\tbClothPositionalDampening;\n'
p9331
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9332
sg1553
g95
sg1554
(lp9333
S'var(Cloth)'
p9334
aS'bool'
p9335
asg1536
S'bClothPositionalDampening'
p9336
sg31
I445
sba(iUnrealScriptIDEData
Variable
p9337
(dp9338
g19
S'/** Whether wind direction is relative to owner rotation or not */\nvar(Cloth)\tbool\t\t\tbClothWindRelativeToOwner;\n'
p9339
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9340
sg1553
g95
sg1554
(lp9341
S'var(Cloth)'
p9342
aS'bool'
p9343
asg1536
S'bClothWindRelativeToOwner'
p9344
sg31
I447
sba(iUnrealScriptIDEData
Variable
p9345
(dp9346
g19
S'/**\n * TRUE if mesh has been recently rendered, FALSE otherwise\n */\nvar\ttransient bool bRecentlyRendered;\n'
p9347
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9348
sg1553
g95
sg1554
(lp9349
S'var'
p9350
aS'transient'
p9351
aS'bool'
p9352
asg1536
S'bRecentlyRendered'
p9353
sg31
I452
sba(iUnrealScriptIDEData
Variable
p9354
(dp9355
g19
S'/** Should anim sequence nodes cache the calculated values when not actually playing an animation? */\nvar bool bCacheAnimSequenceNodes;\n'
p9356
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9357
sg1553
g95
sg1554
(lp9358
S'var'
p9359
aS'bool'
p9360
asg1536
S'bCacheAnimSequenceNodes'
p9361
sg31
I455
sba(iUnrealScriptIDEData
Variable
p9362
(dp9363
g19
S'/** If TRUE, update the instanced vertex influences for this mesh during the next update */\nvar const transient bool bNeedsInstanceWeightUpdate;\n'
p9364
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9365
sg1553
g95
sg1554
(lp9366
S'var'
p9367
aS'const'
p9368
aS'transient'
p9369
aS'bool'
p9370
asg1536
S'bNeedsInstanceWeightUpdate'
p9371
sg31
I458
sba(iUnrealScriptIDEData
Variable
p9372
(dp9373
g19
S'/** If TRUE, always use instanced vertex influences for this mesh */\nvar const transient bool bAlwaysUseInstanceWeights;\n'
p9374
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9375
sg1553
g95
sg1554
(lp9376
S'var'
p9377
aS'const'
p9378
aS'transient'
p9379
aS'bool'
p9380
asg1536
S'bAlwaysUseInstanceWeights'
p9381
sg31
I460
sba(iUnrealScriptIDEData
Variable
p9382
(dp9383
g19
S'/** TRUE if it needs to rebuild the required bones array for multi pass compose */\nvar const transient bool    bUpdateComposeSkeletonPasses;\n'
p9384
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9385
sg1553
g95
sg1554
(lp9386
S'var'
p9387
aS'const'
p9388
aS'transient'
p9389
aS'bool'
p9390
asg1536
S'bUpdateComposeSkeletonPasses'
p9391
sg31
I462
sba(iUnrealScriptIDEData
Variable
p9392
(dp9393
g19
S'/** Flag to remember if cache saved is valid or not to make sure Save/Restore always happens with a pair **/\nvar native transient const bool             bValidTemporarySavedAnimSets;\n'
p9394
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9395
sg1553
g95
sg1554
(lp9396
S'var'
p9397
aS'native'
p9398
aS'transient'
p9399
aS'const'
p9400
aS'bool'
p9401
asg1536
S'bValidTemporarySavedAnimSets'
p9402
sg31
I464
sba(iUnrealScriptIDEData
Variable
p9403
(dp9404
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9405
sg1553
g95
sg1554
(lp9406
S'var'
p9407
aS'native'
p9408
aS'transient'
p9409
aS'const'
p9410
aS'array<BonePair>'
p9411
asg1536
S'InstanceVertexWeightBones'
p9412
sg31
I483
sba(iUnrealScriptIDEData
Variable
p9413
(dp9414
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9415
sg1553
g95
sg1554
(lp9416
S'var'
p9417
aS'const'
p9418
aS'transient'
p9419
aS'array<SkelMeshComponentLODInfo>'
p9420
asg1536
S'LODInfo'
p9421
sg31
I497
sba(iUnrealScriptIDEData
Variable
p9422
(dp9423
g19
S'/** The state of the LocalToWorld pos at the point the cloth was frozen. */\nvar const vector\t\t\tFrozenLocalToWorldPos;\n'
p9424
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9425
sg1553
g95
sg1554
(lp9426
S'var'
p9427
aS'const'
p9428
aS'vector'
p9429
asg1536
S'FrozenLocalToWorldPos'
p9430
sg31
I502
sba(iUnrealScriptIDEData
Variable
p9431
(dp9432
g19
S'/** The state of the LocalToWorld rotation at the point the cloth was frozen. */\nvar const rotator\t\t\tFrozenLocalToWorldRot;\n'
p9433
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9434
sg1553
g95
sg1554
(lp9435
S'var'
p9436
aS'const'
p9437
aS'rotator'
p9438
asg1536
S'FrozenLocalToWorldRot'
p9439
sg31
I505
sba(iUnrealScriptIDEData
Variable
p9440
(dp9441
g19
S'/** Constant force applied to all vertices in the cloth. */\nvar(Cloth)\tconst vector\tClothExternalForce;\n'
p9442
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9443
sg1553
g95
sg1554
(lp9444
S'var(Cloth)'
p9445
aS'const'
p9446
aS'vector'
p9447
asg1536
S'ClothExternalForce'
p9448
sg31
I508
sba(iUnrealScriptIDEData
Variable
p9449
(dp9450
g19
S"/** 'Wind' force applied to cloth. Force on each vertex is based on the dot product between the wind vector and the surface normal. */\nvar(Cloth)\tvector\t\t\tClothWind;\n"
p9451
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9452
sg1553
g95
sg1554
(lp9453
S'var(Cloth)'
p9454
aS'vector'
p9455
asg1536
S'ClothWind'
p9456
sg31
I511
sba(iUnrealScriptIDEData
Variable
p9457
(dp9458
g19
S"/**\n *\tIf bClothBaseVelClamp is TRUE, amount of variance from base's velocity the cloth is allowed.\n *\tIf bClothBaseVelInterp is TRUE, how fast cloth verts are pushed towards base velocity (0..1)\n */\nvar(Cloth)\tvector\t\t\tClothBaseVelClampRange;\n"
p9459
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9460
sg1553
g95
sg1554
(lp9461
S'var(Cloth)'
p9462
aS'vector'
p9463
asg1536
S'ClothBaseVelClampRange'
p9464
sg31
I517
sba(iUnrealScriptIDEData
Variable
p9465
(dp9466
g19
S'/** How much to blend in results from cloth simulation with results from regular skinning. */\nvar(Cloth)\tfloat\t\t\tClothBlendWeight;\n'
p9467
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9468
sg1553
g95
sg1554
(lp9469
S'var(Cloth)'
p9470
aS'float'
p9471
asg1536
S'ClothBlendWeight'
p9472
sg31
I520
sba(iUnrealScriptIDEData
Variable
p9473
(dp9474
g19
S'/** Cloth blend weight, controlled by distance from camera. */\nvar\tfloat ClothDynamicBlendWeight;\n'
p9475
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9476
sg1553
g95
sg1554
(lp9477
S'var'
p9478
aS'float'
p9479
asg1536
S'ClothDynamicBlendWeight'
p9480
sg31
I523
sba(iUnrealScriptIDEData
Variable
p9481
(dp9482
g19
S'/** Distance factor below which cloth should be fully animated. -1.0 indicates always physics. */\nvar(Cloth)\tfloat\t\t\tClothBlendMinDistanceFactor;\n'
p9483
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9484
sg1553
g95
sg1554
(lp9485
S'var(Cloth)'
p9486
aS'float'
p9487
asg1536
S'ClothBlendMinDistanceFactor'
p9488
sg31
I526
sba(iUnrealScriptIDEData
Variable
p9489
(dp9490
g19
S'/** Distance factor above which cloth should be fully simulated. */\nvar(Cloth)\tfloat\t\t\tClothBlendMaxDistanceFactor;\n'
p9491
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9492
sg1553
g95
sg1554
(lp9493
S'var(Cloth)'
p9494
aS'float'
p9495
asg1536
S'ClothBlendMaxDistanceFactor'
p9496
sg31
I529
sba(iUnrealScriptIDEData
Variable
p9497
(dp9498
g19
S'/** Distance from the owner in relative frame (max == pos XYZ, min == neg XYZ) */\nvar(Cloth)\tVector\t\t\tMinPosDampRange, MaxPosDampRange;\n'
p9499
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9500
sg1553
g95
sg1554
(lp9501
S'var(Cloth)'
p9502
aS'Vector'
p9503
asg1536
S'MaxPosDampRange'
p9504
sg31
I532
sba(iUnrealScriptIDEData
Variable
p9505
(dp9506
g19
g9499
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9507
sg1553
g95
sg1554
g9501
sg1536
S'MinPosDampRange'
p9508
sg31
I532
sba(iUnrealScriptIDEData
Variable
p9509
(dp9510
g19
S'/** Dampening scale applied to cloth particle velocity when approaching boundaries of *PosDampRange */\nvar(Cloth)\tVector\t\t\tMinPosDampScale, MaxPosDampScale;\n'
p9511
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9512
sg1553
g95
sg1554
(lp9513
S'var(Cloth)'
p9514
aS'Vector'
p9515
asg1536
S'MaxPosDampScale'
p9516
sg31
I534
sba(iUnrealScriptIDEData
Variable
p9517
(dp9518
g19
g9511
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9519
sg1553
g95
sg1554
g9513
sg1536
S'MinPosDampScale'
p9520
sg31
I534
sba(iUnrealScriptIDEData
Variable
p9521
(dp9522
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9523
sg1553
g95
sg1554
(lp9524
S'var'
p9525
aS'const'
p9526
aS'native'
p9527
aS'transient'
p9528
aS'pointer'
p9529
asg1536
S'ClothSim'
p9530
sg31
I536
sba(iUnrealScriptIDEData
Variable
p9531
(dp9532
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9533
sg1553
g95
sg1554
(lp9534
S'var'
p9535
aS'const'
p9536
aS'native'
p9537
aS'transient'
p9538
aS'int'
p9539
asg1536
S'SceneIndex'
p9540
sg31
I537
sba(iUnrealScriptIDEData
Variable
p9541
(dp9542
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9543
sg1553
g95
sg1554
(lp9544
S'var'
p9545
aS'const'
p9546
aS'array<vector>'
p9547
asg1536
S'ClothMeshPosData'
p9548
sg31
I539
sba(iUnrealScriptIDEData
Variable
p9549
(dp9550
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9551
sg1553
g95
sg1554
(lp9552
S'var'
p9553
aS'const'
p9554
aS'array<vector>'
p9555
asg1536
S'ClothMeshNormalData'
p9556
sg31
I540
sba(iUnrealScriptIDEData
Variable
p9557
(dp9558
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9559
sg1553
g95
sg1554
(lp9560
S'var'
p9561
aS'const'
p9562
aS'array<int>'
p9563
asg1536
S'ClothMeshIndexData'
p9564
sg31
I541
sba(iUnrealScriptIDEData
Variable
p9565
(dp9566
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9567
sg1553
g95
sg1554
(lp9568
S'var'
p9569
aS'int'
p9570
asg1536
S'NumClothMeshVerts'
p9571
sg31
I542
sba(iUnrealScriptIDEData
Variable
p9572
(dp9573
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9574
sg1553
g95
sg1554
(lp9575
S'var'
p9576
aS'int'
p9577
asg1536
S'NumClothMeshIndices'
p9578
sg31
I543
sba(iUnrealScriptIDEData
Variable
p9579
(dp9580
g19
S'/** Cloth parent indices contain the index of the original vertex when a vertex is created during tearing.\n *  If it is an original vertex then the parent index is the same as the vertex index.\n */\nvar const array<int> ClothMeshParentData;\n'
p9581
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9582
sg1553
g95
sg1554
(lp9583
S'var'
p9584
aS'const'
p9585
aS'array<int>'
p9586
asg1536
S'ClothMeshParentData'
p9587
sg31
I548
sba(iUnrealScriptIDEData
Variable
p9588
(dp9589
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9590
sg1553
g95
sg1554
(lp9591
S'var'
p9592
aS'int'
p9593
asg1536
S'NumClothMeshParentIndices'
p9594
sg31
I549
sba(iUnrealScriptIDEData
Variable
p9595
(dp9596
g19
S'/** buffers used for reverse lookups to unweld vertices to support wrapped UVs. */\nvar const native transient array<vector>\tClothMeshWeldedPosData;\n'
p9597
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9598
sg1553
g95
sg1554
(lp9599
S'var'
p9600
aS'const'
p9601
aS'native'
p9602
aS'transient'
p9603
aS'array<vector>'
p9604
asg1536
S'ClothMeshWeldedPosData'
p9605
sg31
I552
sba(iUnrealScriptIDEData
Variable
p9606
(dp9607
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9608
sg1553
g95
sg1554
(lp9609
S'var'
p9610
aS'const'
p9611
aS'native'
p9612
aS'transient'
p9613
aS'array<vector>'
p9614
asg1536
S'ClothMeshWeldedNormalData'
p9615
sg31
I553
sba(iUnrealScriptIDEData
Variable
p9616
(dp9617
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9618
sg1553
g95
sg1554
(lp9619
S'var'
p9620
aS'const'
p9621
aS'native'
p9622
aS'transient'
p9623
aS'array<int>'
p9624
asg1536
S'ClothMeshWeldedIndexData'
p9625
sg31
I554
sba(iUnrealScriptIDEData
Variable
p9626
(dp9627
g19
S'/** flags to indicate which buffers were recently updated by the cloth simulation. */\nvar int ClothDirtyBufferFlag;\n'
p9628
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9629
sg1553
g95
sg1554
(lp9630
S'var'
p9631
aS'int'
p9632
asg1536
S'ClothDirtyBufferFlag'
p9633
sg31
I557
sba(iUnrealScriptIDEData
Variable
p9634
(dp9635
g19
S'/** Enum indicating what type of object this cloth should be considered for rigid body collision. */\nvar(Cloth)\tconst ERBCollisionChannel\t\t\tClothRBChannel;\n'
p9636
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9637
sg1553
g95
sg1554
(lp9638
S'var(Cloth)'
p9639
aS'const'
p9640
aS'ERBCollisionChannel'
p9641
asg1536
S'ClothRBChannel'
p9642
sg31
I560
sba(iUnrealScriptIDEData
Variable
p9643
(dp9644
g19
S'/** Types of objects that this cloth will collide with. */\nvar(Cloth)\tconst RBCollisionChannelContainer\tClothRBCollideWithChannels;\n'
p9645
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9646
sg1553
g95
sg1554
(lp9647
S'var(Cloth)'
p9648
aS'const'
p9649
aS'RBCollisionChannelContainer'
p9650
asg1536
S'ClothRBCollideWithChannels'
p9651
sg31
I563
sba(iUnrealScriptIDEData
Variable
p9652
(dp9653
g19
S'/** How much force to apply to cloth, in relation to the force(from a force field) applied to rigid bodies(zero applies no force to cloth, 1 applies the same) */\nvar(Cloth)\tconst float\t\t\t\tClothForceScale;\n'
p9654
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9655
sg1553
g95
sg1554
(lp9656
S'var(Cloth)'
p9657
aS'const'
p9658
aS'float'
p9659
asg1536
S'ClothForceScale'
p9660
sg31
I566
sba(iUnrealScriptIDEData
Variable
p9661
(dp9662
g19
S'/** Amount to scale impulses applied to cloth simulation. */\nvar(Cloth)\tfloat\t\t\t\t\tClothImpulseScale;\n'
p9663
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9664
sg1553
g95
sg1554
(lp9665
S'var(Cloth)'
p9666
aS'float'
p9667
asg1536
S'ClothImpulseScale'
p9668
sg31
I569
sba(iUnrealScriptIDEData
Variable
p9669
(dp9670
g19
S'/**\n    The cloth tear factor for this SkeletalMeshComponent, negative values take the tear factor from the SkeletalMesh.\n    Note: UpdateClothParams() should be called after modification so that the changes are reflected in the simulation.\n*/\nvar(Cloth)\tconst float\t\t\t\tClothAttachmentTearFactor;\n'
p9671
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9672
sg1553
g95
sg1554
(lp9673
S'var(Cloth)'
p9674
aS'const'
p9675
aS'float'
p9676
asg1536
S'ClothAttachmentTearFactor'
p9677
sg31
I575
sba(iUnrealScriptIDEData
Variable
p9678
(dp9679
g19
S'/** If TRUE, soft body uses compartment in physics scene (usually with fixed timstep for better behaviour) */\nvar(Cloth)\tconst bool\t\t\t\tbClothUseCompartment;\n'
p9680
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9681
sg1553
g95
sg1554
(lp9682
S'var(Cloth)'
p9683
aS'const'
p9684
aS'bool'
p9685
asg1536
S'bClothUseCompartment'
p9686
sg31
I578
sba(iUnrealScriptIDEData
Variable
p9687
(dp9688
g19
S'/** If the distance traveled between frames exceeds this value the vertices will be reset to avoid stretching. */\nvar(Cloth)\tconst float\t\t\t\tMinDistanceForClothReset;\n'
p9689
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9690
sg1553
g95
sg1554
(lp9691
S'var(Cloth)'
p9692
aS'const'
p9693
aS'float'
p9694
asg1536
S'MinDistanceForClothReset'
p9695
sg31
I581
sba(iUnrealScriptIDEData
Variable
p9696
(dp9697
g19
S'/** Last location of our owner/base for checking MinDistanceForClothReset. */\nvar const transient vector LastClothLocation;\n'
p9698
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9699
sg1553
g95
sg1554
(lp9700
S'var'
p9701
aS'const'
p9702
aS'transient'
p9703
aS'vector'
p9704
asg1536
S'LastClothLocation'
p9705
sg31
I584
sba(iUnrealScriptIDEData
Variable
p9706
(dp9707
g19
S'/** Enum indicating what type of object this apex clothing should be considered for rigid body collision. */\nvar(ApexClothing) const ERBCollisionChannel\t\tApexClothingRBChannel;\n'
p9708
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9709
sg1553
g95
sg1554
(lp9710
S'var(ApexClothing)'
p9711
aS'const'
p9712
aS'ERBCollisionChannel'
p9713
asg1536
S'ApexClothingRBChannel'
p9714
sg31
I587
sba(iUnrealScriptIDEData
Variable
p9715
(dp9716
g19
S'/** Types of objects that this clothing will collide with. */\nvar(ApexClothing)\tconst RBCollisionChannelContainer\tApexClothingRBCollideWithChannels;\n'
p9717
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9718
sg1553
g95
sg1554
(lp9719
S'var(ApexClothing)'
p9720
aS'const'
p9721
aS'RBCollisionChannelContainer'
p9722
asg1536
S'ApexClothingRBCollideWithChannels'
p9723
sg31
I590
sba(iUnrealScriptIDEData
Variable
p9724
(dp9725
g19
S'/** Enum indicating what channel the apex clothing collision shapes should be placed in */\nvar(ApexClothing) const ERBCollisionChannel\t\tApexClothingCollisionRBChannel;\n'
p9726
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9727
sg1553
g95
sg1554
(lp9728
S'var(ApexClothing)'
p9729
aS'const'
p9730
aS'ERBCollisionChannel'
p9731
asg1536
S'ApexClothingCollisionRBChannel'
p9732
sg31
I593
sba(iUnrealScriptIDEData
Variable
p9733
(dp9734
g19
S'/** If true, the clothing actor will stop simulating when it is not rendered */\nvar(ApexClothing) bool\t\t\t\t\t\t\t\tbAutoFreezeApexClothingWhenNotRendered;\n'
p9735
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9736
sg1553
g95
sg1554
(lp9737
S'var(ApexClothing)'
p9738
aS'bool'
p9739
asg1536
S'bAutoFreezeApexClothingWhenNotRendered'
p9740
sg31
I596
sba(iUnrealScriptIDEData
Variable
p9741
(dp9742
g19
S'/** If TRUE, WindVelocity is applied in the local space of the component, rather than world space. */\nvar(ApexClothing) bool                  bLocalSpaceWind;\n'
p9743
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9744
sg1553
g95
sg1554
(lp9745
S'var(ApexClothing)'
p9746
aS'bool'
p9747
asg1536
S'bLocalSpaceWind'
p9748
sg31
I599
sba(iUnrealScriptIDEData
Variable
p9749
(dp9750
g19
S'/** The Wind Velocity applied to Apex Clothing */\nvar(ApexClothing) interp vector\t\t\tWindVelocity;\n'
p9751
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9752
sg1553
g95
sg1554
(lp9753
S'var(ApexClothing)'
p9754
aS'interp'
p9755
aS'vector'
p9756
asg1536
S'WindVelocity'
p9757
sg31
I602
sba(iUnrealScriptIDEData
Variable
p9758
(dp9759
g19
S'/** Time taken for ApexClothing to reach WindVelocity */\nvar(ApexClothing) interp float\t\t\tWindVelocityBlendTime;\n'
p9760
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9761
sg1553
g95
sg1554
(lp9762
S'var(ApexClothing)'
p9763
aS'interp'
p9764
aS'float'
p9765
asg1536
S'WindVelocityBlendTime'
p9766
sg31
I605
sba(iUnrealScriptIDEData
Variable
p9767
(dp9768
g19
S"/** Don't attempt to initialize clothing when component is attached */\nvar const transient bool\t\t\t\t\t\t\tbSkipInitClothing;\n"
p9769
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9770
sg1553
g95
sg1554
(lp9771
S'var'
p9772
aS'const'
p9773
aS'transient'
p9774
aS'bool'
p9775
asg1536
S'bSkipInitClothing'
p9776
sg31
I608
sba(iUnrealScriptIDEData
Variable
p9777
(dp9778
g19
S'/** Pointer to the simulated NxSoftBody object. */\nvar const native transient pointer\t\t\t\t\tSoftBodySim;\n'
p9779
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9780
sg1553
g95
sg1554
(lp9781
S'var'
p9782
aS'const'
p9783
aS'native'
p9784
aS'transient'
p9785
aS'pointer'
p9786
asg1536
S'SoftBodySim'
p9787
sg31
I611
sba(iUnrealScriptIDEData
Variable
p9788
(dp9789
g19
S'/** Index of the Novodex scene the soft-body resides in. */\nvar const native transient int\t\t\t\t\t\tSoftBodySceneIndex;\n'
p9790
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9791
sg1553
g95
sg1554
(lp9792
S'var'
p9793
aS'const'
p9794
aS'native'
p9795
aS'transient'
p9796
aS'int'
p9797
asg1536
S'SoftBodySceneIndex'
p9798
sg31
I614
sba(iUnrealScriptIDEData
Variable
p9799
(dp9800
g19
S'/** Whether soft-body simulation should currently be used on this SkeletalMeshComponent. */\nvar(Softbody) const bool\t\t\t\t\t\t\tbEnableSoftBodySimulation;\n'
p9801
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9802
sg1553
g95
sg1554
(lp9803
S'var(Softbody)'
p9804
aS'const'
p9805
aS'bool'
p9806
asg1536
S'bEnableSoftBodySimulation'
p9807
sg31
I617
sba(iUnrealScriptIDEData
Variable
p9808
(dp9809
g19
S'/** Buffer of the updated tetrahedron-vertex positions. */\nvar const array<vector>\t\t\t\t\t\t\t\tSoftBodyTetraPosData;\n'
p9810
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9811
sg1553
g95
sg1554
(lp9812
S'var'
p9813
aS'const'
p9814
aS'array<vector>'
p9815
asg1536
S'SoftBodyTetraPosData'
p9816
sg31
I620
sba(iUnrealScriptIDEData
Variable
p9817
(dp9818
g19
S'/** Buffer of the updated tetrahedron-indices. */\nvar const array<int>\t\t\t\t\t\t\t\tSoftBodyTetraIndexData;\n'
p9819
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9820
sg1553
g95
sg1554
(lp9821
S'var'
p9822
aS'const'
p9823
aS'array<int>'
p9824
asg1536
S'SoftBodyTetraIndexData'
p9825
sg31
I623
sba(iUnrealScriptIDEData
Variable
p9826
(dp9827
g19
S'/** Number of tetrahedron vertices of the soft-body mesh. */\nvar int\t\t\t\t\t\t\t\t\t\t\t\tNumSoftBodyTetraVerts;\n'
p9828
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9829
sg1553
g95
sg1554
(lp9830
S'var'
p9831
aS'int'
p9832
asg1536
S'NumSoftBodyTetraVerts'
p9833
sg31
I626
sba(iUnrealScriptIDEData
Variable
p9834
(dp9835
g19
S'/** Number of tetrahedron indices of the soft-body mesh (equal to four times the number of tetrahedra). */\nvar int\t\t\t\t\t\t\t\t\t\t\t\tNumSoftBodyTetraIndices;\n'
p9836
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9837
sg1553
g95
sg1554
(lp9838
S'var'
p9839
aS'int'
p9840
asg1536
S'NumSoftBodyTetraIndices'
p9841
sg31
I629
sba(iUnrealScriptIDEData
Variable
p9842
(dp9843
g19
S'/** Amount to scale impulses applied to soft body simulation. */\nvar(SoftBody)\tfloat\t\t\t\t\t\t\t\tSoftBodyImpulseScale;\n'
p9844
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9845
sg1553
g95
sg1554
(lp9846
S'var(SoftBody)'
p9847
aS'float'
p9848
asg1536
S'SoftBodyImpulseScale'
p9849
sg31
I632
sba(iUnrealScriptIDEData
Variable
p9850
(dp9851
g19
S"/** If true, the soft-body is 'frozen' and no simulation is taking place for it, though it will keep its shape. */\nvar(SoftBody)\tconst bool\t\t\t\t\t\t\tbSoftBodyFrozen;\n"
p9852
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9853
sg1553
g95
sg1554
(lp9854
S'var(SoftBody)'
p9855
aS'const'
p9856
aS'bool'
p9857
asg1536
S'bSoftBodyFrozen'
p9858
sg31
I635
sba(iUnrealScriptIDEData
Variable
p9859
(dp9860
g19
S'/** If true, the soft-body will automatically have bSoftBodyFrozen set when it is not rendered, and have it turned off when it is seen. */\nvar(SoftBody)\tbool\t\t\t\t\t\t\t\tbAutoFreezeSoftBodyWhenNotRendered;\n'
p9861
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9862
sg1553
g95
sg1554
(lp9863
S'var(SoftBody)'
p9864
aS'bool'
p9865
asg1536
S'bAutoFreezeSoftBodyWhenNotRendered'
p9866
sg31
I638
sba(iUnrealScriptIDEData
Variable
p9867
(dp9868
g19
S'/** If true, the soft-body will be awake when a level is started, otherwise it will be instantly put to sleep. */\nvar(SoftBody)\tbool\t\t\t\t\t\t\t\tbSoftBodyAwakeOnStartup;\n'
p9869
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9870
sg1553
g95
sg1554
(lp9871
S'var(SoftBody)'
p9872
aS'bool'
p9873
asg1536
S'bSoftBodyAwakeOnStartup'
p9874
sg31
I641
sba(iUnrealScriptIDEData
Variable
p9875
(dp9876
g19
S'/** If TRUE, soft body uses compartment in physics scene (usually with fixed timstep for better behaviour) */\nvar(SoftBody)\tconst bool\t\t\t\t\t\t\tbSoftBodyUseCompartment;\n'
p9877
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9878
sg1553
g95
sg1554
(lp9879
S'var(SoftBody)'
p9880
aS'const'
p9881
aS'bool'
p9882
asg1536
S'bSoftBodyUseCompartment'
p9883
sg31
I644
sba(iUnrealScriptIDEData
Variable
p9884
(dp9885
g19
S'/** Enum indicating what type of object this soft-body should be considered for rigid body collision. */\nvar(SoftBody)\tconst ERBCollisionChannel\t\t\tSoftBodyRBChannel;\n'
p9886
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9887
sg1553
g95
sg1554
(lp9888
S'var(SoftBody)'
p9889
aS'const'
p9890
aS'ERBCollisionChannel'
p9891
asg1536
S'SoftBodyRBChannel'
p9892
sg31
I647
sba(iUnrealScriptIDEData
Variable
p9893
(dp9894
g19
S'/** Types of objects that this soft-body will collide with. */\nvar(SoftBody)\tconst RBCollisionChannelContainer\tSoftBodyRBCollideWithChannels;\n'
p9895
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9896
sg1553
g95
sg1554
(lp9897
S'var(SoftBody)'
p9898
aS'const'
p9899
aS'RBCollisionChannelContainer'
p9900
asg1536
S'SoftBodyRBCollideWithChannels'
p9901
sg31
I650
sba(iUnrealScriptIDEData
Variable
p9902
(dp9903
g19
S'/** Pointer to the Novodex plane-actor used when previewing the soft-body in the AnimSet Editor. */\nvar const native transient pointer\t\t\t\t\tSoftBodyASVPlane;\n'
p9904
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9905
sg1553
g95
sg1554
(lp9906
S'var'
p9907
aS'const'
p9908
aS'native'
p9909
aS'transient'
p9910
aS'pointer'
p9911
asg1536
S'SoftBodyASVPlane'
p9912
sg31
I653
sba(iUnrealScriptIDEData
Variable
p9913
(dp9914
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9915
sg1553
g95
sg1554
(lp9916
S'var'
p9917
aS'material'
p9918
asg1536
S'LimitMaterial'
p9919
sg31
I656
sba(iUnrealScriptIDEData
Variable
p9920
(dp9921
g19
S'/** Root Motion extracted from animation. */\nvar\ttransient\tBoneAtom\tRootMotionDelta;\n'
p9922
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9923
sg1553
g95
sg1554
(lp9924
S'var'
p9925
aS'transient'
p9926
aS'BoneAtom'
p9927
asg1536
S'RootMotionDelta'
p9928
sg31
I659
sba(iUnrealScriptIDEData
Variable
p9929
(dp9930
g19
S'/** Root Motion velocity for this frame, set from RootMotionDelta. */\nvar\t\t\ttransient\tVector\t\tRootMotionVelocity;\n'
p9931
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9932
sg1553
g95
sg1554
(lp9933
S'var'
p9934
aS'transient'
p9935
aS'Vector'
p9936
asg1536
S'RootMotionVelocity'
p9937
sg31
I661
sba(iUnrealScriptIDEData
Variable
p9938
(dp9939
g19
S'/**\n * Offset of the root bone from the reference pose.\n * Used to offset bounding box.\n */\nvar const transient Vector\tRootBoneTranslation;\n'
p9940
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9941
sg1553
g95
sg1554
(lp9942
S'var'
p9943
aS'const'
p9944
aS'transient'
p9945
aS'Vector'
p9946
asg1536
S'RootBoneTranslation'
p9947
sg31
I667
sba(iUnrealScriptIDEData
Variable
p9948
(dp9949
g19
S'/** Scale applied in physics when RootMotionMode == RMM_Accel */\nvar vector RootMotionAccelScale;\n'
p9950
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9951
sg1553
g95
sg1554
(lp9952
S'var'
p9953
aS'vector'
p9954
asg1536
S'RootMotionAccelScale'
p9955
sg31
I670
sba(iUnrealScriptIDEData
Variable
p9956
(dp9957
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9958
sg1553
g95
sg1554
(lp9959
S'var()'
p9960
aS'ERootMotionMode'
p9961
asg1536
S'RootMotionMode'
p9962
sg31
I680
sba(iUnrealScriptIDEData
Variable
p9963
(dp9964
g19
S'/** Previous Root Motion Mode, to catch changes */\nvar\tconst ERootMotionMode\tPreviousRMM;\n'
p9965
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9966
sg1553
g95
sg1554
(lp9967
S'var'
p9968
aS'const'
p9969
aS'ERootMotionMode'
p9970
asg1536
S'PreviousRMM'
p9971
sg31
I682
sba(iUnrealScriptIDEData
Variable
p9972
(dp9973
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9974
sg1553
g95
sg1554
(lp9975
S'var'
p9976
aS'ERootMotionMode'
p9977
asg1536
S'PendingRMM'
p9978
sg31
I684
sba(iUnrealScriptIDEData
Variable
p9979
(dp9980
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9981
sg1553
g95
sg1554
(lp9982
S'var'
p9983
aS'ERootMotionMode'
p9984
asg1536
S'OldPendingRMM'
p9985
sg31
I685
sba(iUnrealScriptIDEData
Variable
p9986
(dp9987
g19
S'/** Handle one frame delay with PendingRMM */\nvar\tconst INT\t\t\t\tbRMMOneFrameDelay;\n'
p9988
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9989
sg1553
g95
sg1554
(lp9990
S'var'
p9991
aS'const'
p9992
aS'INT'
p9993
asg1536
S'bRMMOneFrameDelay'
p9994
sg31
I688
sba(iUnrealScriptIDEData
Variable
p9995
(dp9996
g19
S'\t/** Apply rotation delta to actor */\n\tRMRM_RotateActor,\n};\nvar() ERootMotionRotationMode RootMotionRotationMode;\n'
p9997
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p9998
sg1553
g95
sg1554
(lp9999
S'var()'
p10000
aS'ERootMotionRotationMode'
p10001
asg1536
S'RootMotionRotationMode'
p10002
sg31
I698
sba(iUnrealScriptIDEData
Variable
p10003
(dp10004
g19
S'/** SkeletalMeshComponent settings for AnimRotationOnly */\nvar() EAnimRotationOnly AnimRotationOnly;\n'
p10005
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10006
sg1553
g95
sg1554
(lp10007
S'var()'
p10008
aS'EAnimRotationOnly'
p10009
asg1536
S'AnimRotationOnly'
p10010
sg31
I711
sba(iUnrealScriptIDEData
Variable
p10011
(dp10012
g19
S'/** How FaceFX transforms should be blended with skeletal mesh */\nvar()\tEFaceFXBlendMode\tFaceFXBlendMode;\n'
p10013
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10014
sg1553
g95
sg1554
(lp10015
S'var()'
p10016
aS'EFaceFXBlendMode'
p10017
asg1536
S'FaceFXBlendMode'
p10018
sg31
I728
sba(iUnrealScriptIDEData
Variable
p10019
(dp10020
g19
S'/** The FaceFX actor instance associated with the skeletal mesh component. */\nvar transient native pointer FaceFXActorInstance;\n'
p10021
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10022
sg1553
g95
sg1554
(lp10023
S'var'
p10024
aS'transient'
p10025
aS'native'
p10026
aS'pointer'
p10027
asg1536
S'FaceFXActorInstance'
p10028
sg31
I747
sba(iUnrealScriptIDEData
Variable
p10029
(dp10030
g19
S'/**\n *\tThe audio component that we are using to play audio for a facial animation.\n *\tAssigned in PlayFaceFXAnim and cleared in StopFaceFXAnim.\n */\nvar AudioComponent\tCachedFaceFXAudioComp;\n'
p10031
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10032
sg1553
g95
sg1554
(lp10033
S'var'
p10034
aS'AudioComponent'
p10035
asg1536
S'CachedFaceFXAudioComp'
p10036
sg31
I753
sba(iUnrealScriptIDEData
Variable
p10037
(dp10038
g19
S'/** Array of bone visibilities (containing one of the values in EBoneVisibilityStatus for each bone).  A bone is only visible if it is *exactly* 1 (BVS_Visible) */\nvar\ttransient const array<byte>\tBoneVisibilityStates;\n'
p10039
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10040
sg1553
g95
sg1554
(lp10041
S'var'
p10042
aS'transient'
p10043
aS'const'
p10044
aS'array<byte>'
p10045
asg1536
S'BoneVisibilityStates'
p10046
sg31
I756
sba(iUnrealScriptIDEData
Variable
p10047
(dp10048
g19
S'/** Cache of LocalToWorld BoneAtom. */\nvar\ttransient const boneatom\tLocalToWorldBoneAtom;\n'
p10049
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10050
sg1553
g95
sg1554
(lp10051
S'var'
p10052
aS'transient'
p10053
aS'const'
p10054
aS'boneatom'
p10055
asg1536
S'LocalToWorldBoneAtom'
p10056
sg31
I759
sba(iUnrealScriptIDEData
Variable
p10057
(dp10058
g19
S'/** Editor only. Used for visualizing drawing order in Animset Viewer. If < 1.0,\n  * only the specified fraction of triangles will be rendered\n  */\nvar transient float ProgressiveDrawingFraction;\n'
p10059
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10060
sg1553
g95
sg1554
(lp10061
S'var'
p10062
aS'transient'
p10063
aS'float'
p10064
asg1536
S'ProgressiveDrawingFraction'
p10065
sg31
I764
sba(iUnrealScriptIDEData
Variable
p10066
(dp10067
g19
S'/** Editor only. Used for manually selecting the alternate indices for\n  * TRISORT_CustomLeftRight sections.\n  */\nvar transient byte CustomSortAlternateIndexMode;\n'
p10068
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10069
sg1553
g95
sg1554
(lp10070
S'var'
p10071
aS'transient'
p10072
aS'byte'
p10073
asg1536
S'CustomSortAlternateIndexMode'
p10074
sg31
I769
sba(iUnrealScriptIDEData
Variable
p10075
(dp10076
g19
S"/** Editor only. Used to keep track of the morph targets we've reported \n  * the user as having bad LODs (to prevent LOD spam)\n  */\nvar transient array<Name>\t\tMorphTargetsQueried;\n"
p10077
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10078
sg1553
g95
sg1554
(lp10079
S'var'
p10080
aS'transient'
p10081
aS'array<Name>'
p10082
asg1536
S'MorphTargetsQueried'
p10083
sg31
I774
sba(iUnrealScriptIDEData
Variable
p10084
(dp10085
g19
S'/** Whether to use based on distance factor tick optimization. */\nvar(Optimization) const bool\tbUseTickOptimization;\n'
p10086
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10087
sg1553
g95
sg1554
(lp10088
S'var(Optimization)'
p10089
aS'const'
p10090
aS'bool'
p10091
asg1536
S'bUseTickOptimization'
p10092
sg31
I789
sba(iUnrealScriptIDEData
Variable
p10093
(dp10094
g19
S'/** How many times this component was ticked. */\nvar const int\t\t\t\t\tTickCount;\n'
p10095
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10096
sg1553
g95
sg1554
(lp10097
S'var'
p10098
aS'const'
p10099
aS'int'
p10100
asg1536
S'TickCount'
p10101
sg31
I792
sba(iUnrealScriptIDEData
Variable
p10102
(dp10103
g19
S'/** Last drop rate [0-2]. */\nvar transient const int\t\t\tLastDropRate;\n'
p10104
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10105
sg1553
g95
sg1554
(lp10106
S'var'
p10107
aS'transient'
p10108
aS'const'
p10109
aS'int'
p10110
asg1536
S'LastDropRate'
p10111
sg31
I795
sba(iUnrealScriptIDEData
Variable
p10112
(dp10113
g19
S"/** Time when LastDropRate changes, used to avoid 'flickering' when drop rates changes very frequently. */\nvar transient const float\t\tLastDropRateChange;\n"
p10114
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10115
sg1553
g95
sg1554
(lp10116
S'var'
p10117
aS'transient'
p10118
aS'const'
p10119
aS'float'
p10120
asg1536
S'LastDropRateChange'
p10121
sg31
I798
sba(iUnrealScriptIDEData
Variable
p10122
(dp10123
g19
S'/** Accumulated delta time when frames were dropped. */\nvar transient const float\t\tAccumulatedDroppedDeltaTime;\n'
p10124
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10125
sg1553
g95
sg1554
(lp10126
S'var'
p10127
aS'transient'
p10128
aS'const'
p10129
aS'float'
p10130
asg1536
S'AccumulatedDroppedDeltaTime'
p10131
sg31
I801
sba(iUnrealScriptIDEData
Variable
p10132
(dp10133
g19
S'/** Accumulated delta time when frames were dropped. */\nvar transient const float\t\tComponentDroppedDeltaTime;\n'
p10134
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cSkeletalMeshComponent.uc
p10135
sg1553
g95
sg1554
(lp10136
S'var'
p10137
aS'transient'
p10138
aS'const'
p10139
aS'float'
p10140
asg1536
S'ComponentDroppedDeltaTime'
p10141
sg31
I804
sbasba(iUnrealScriptIDEData
ClassReference
p10142
(dp10143
g6
Nsg7
g12
sg90
I01
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cAnimationCompressionAlgorithm_RemoveEverySecondKey.uc
p10144
sg74
(lp10145
sg1531
S'animationcompressionalgorithm'
p10146
sg19
S'/**\n * Keyframe reduction algorithm that simply removes every second key.\n *\n * Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\n */\n\nclass AnimationCompressionAlgorithm_RemoveEverySecondKey extends AnimationCompressionAlgorithm\n'
p10147
sg1534
(lp10148
sg1536
VAnimationCompressionAlgorithm_RemoveEverySecondKey
p10149
sg1538
(lp10150
sg1540
(lp10151
sg82
(lp10152
(iUnrealScriptIDEData
Variable
p10153
(dp10154
g19
S'/** Animations with fewer than MinKeys will not lose any keys. */\nvar()\tint\t\t\tMinKeys;\n'
p10155
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cAnimationCompressionAlgorithm_RemoveEverySecondKey.uc
p10156
sg1553
g95
sg1554
(lp10157
S'var()'
p10158
aS'int'
p10159
asg1536
S'MinKeys'
p10160
sg31
I11
sba(iUnrealScriptIDEData
Variable
p10161
(dp10162
g19
S'/**\n * If bStartAtSecondKey is TRUE, remove keys 1,3,5,etc.\n * If bStartAtSecondKey is FALSE, remove keys 0,2,4,etc.\n */\nvar()\tbool\t\tbStartAtSecondKey;\n'
p10163
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cAnimationCompressionAlgorithm_RemoveEverySecondKey.uc
p10164
sg1553
g95
sg1554
(lp10165
S'var()'
p10166
aS'bool'
p10167
asg1536
S'bStartAtSecondKey'
p10168
sg31
I17
sbasba(iUnrealScriptIDEData
ClassReference
p10169
(dp10170
g6
Nsg7
g12
sg90
I01
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10171
sg74
(lp10172
(iUnrealScriptIDEData
Function
p10173
(dp10174
g19
S'/** Change the StaticMesh used by this instance. */\nsimulated native function bool SetStaticMesh( StaticMesh NewMesh, optional bool bForce );\n'
p10175
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10176
sg23
S'StaticMesh NewMesh, optional bool bForce'
p10177
sg25
S'bool'
p10178
sg27
S'simulated native'
p10179
sg29
S'SetStaticMesh'
p10180
sg31
I110
sg32
I01
sba(iUnrealScriptIDEData
Function
p10181
(dp10182
g19
S'/** Disables physics collision between a specific pair of primitive components. */\nsimulated native function DisableRBCollisionWithSMC( PrimitiveComponent OtherSMC, bool bDisabled );\n'
p10183
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10184
sg23
S'PrimitiveComponent OtherSMC, bool bDisabled'
p10185
sg25
g95
sg27
S'simulated native'
p10186
sg29
S'DisableRBCollisionWithSMC'
p10187
sg31
I113
sg32
I01
sba(iUnrealScriptIDEData
Function
p10188
(dp10189
g19
S'/**\n * Changes the value of bForceStaticDecals.\n * @param bInForceStaticDecals - The value to assign to bForceStaticDecals.\n */\nnative final function SetForceStaticDecals(bool bInForceStaticDecals);\n'
p10190
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10191
sg23
S'bool bInForceStaticDecals'
p10192
sg25
g95
sg27
S'native final'
p10193
sg29
S'SetForceStaticDecals'
p10194
sg31
I119
sg32
I01
sba(iUnrealScriptIDEData
Function
p10195
(dp10196
g19
S'/**\n * @RETURNS true if this mesh can become dynamic\n */\nnative function bool CanBecomeDynamic();\n'
p10197
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10198
sg23
g95
sg25
S'bool'
p10199
sg27
S'native'
p10200
sg29
S'CanBecomeDynamic'
p10201
sg31
I124
sg32
I01
sbasg1531
S'meshcomponent'
p10202
sg19
S'/**\n * Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\n */\nclass StaticMeshComponent extends MeshComponent\n'
p10203
sg1534
(lp10204
sg1536
VStaticMeshComponent
p10205
sg1538
(lp10206
sg1540
(lp10207
(iUnrealScriptIDEData
Struct
p10208
(dp10209
g1544
S'struct PaintedVertex\n'
p10210
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10211
sg19
S'/** Cached vertex information at the time the mesh was painted. */\nstruct PaintedVertex\n'
p10212
sg1536
S'PaintedVertex'
p10213
sg82
(lp10214
(iUnrealScriptIDEData
Variable
p10215
(dp10216
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10217
sg1553
g95
sg1554
(lp10218
S'var'
p10219
aS'vector'
p10220
asg1536
S'Position'
p10221
sg31
I82
sba(iUnrealScriptIDEData
Variable
p10222
(dp10223
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10224
sg1553
g95
sg1554
(lp10225
S'var'
p10226
aS'packednormal'
p10227
asg1536
S'Normal'
p10228
sg31
I83
sba(iUnrealScriptIDEData
Variable
p10229
(dp10230
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10231
sg1553
g95
sg1554
(lp10232
S'var'
p10233
aS'color'
p10234
asg1536
S'Color'
p10235
sg31
I84
sbasg31
I80
sba(iUnrealScriptIDEData
Struct
p10236
(dp10237
g1544
S'struct StaticMeshComponentLODInfo\n'
p10238
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10239
sg19
g95
sg1536
S'StaticMeshComponentLODInfo'
p10240
sg82
(lp10241
(iUnrealScriptIDEData
Variable
p10242
(dp10243
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10244
sg1553
g95
sg1554
(lp10245
S'var'
p10246
aS'private'
p10247
aS'const'
p10248
aS'array<ShadowMap2D>'
p10249
asg1536
S'ShadowMaps'
p10250
sg31
I89
sba(iUnrealScriptIDEData
Variable
p10251
(dp10252
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10253
sg1553
g95
sg1554
(lp10254
S'var'
p10255
aS'private'
p10256
aS'const'
p10257
aS'array<Object>'
p10258
asg1536
S'ShadowVertexBuffers'
p10259
sg31
I90
sbasg31
I87
sbasg82
(lp10260
(iUnrealScriptIDEData
Variable
p10261
(dp10262
g19
S'/** If 0, auto-select LOD level. if >0, force to (ForcedLodModel-1). */\nvar() int\t\tForcedLodModel; \n'
p10263
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10264
sg1553
g95
sg1554
(lp10265
S'var()'
p10266
aS'int'
p10267
asg1536
S'ForcedLodModel'
p10268
sg31
I13
sba(iUnrealScriptIDEData
Variable
p10269
(dp10270
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10271
sg1553
S' Previous LOD level'
p10272
sg1554
(lp10273
S'var'
p10274
aS'int'
p10275
asg1536
S'PreviousLODLevel'
p10276
sg31
I14
sba(iUnrealScriptIDEData
Variable
p10277
(dp10278
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10279
sg1553
g95
sg1554
(lp10280
S'var()'
p10281
aS'const'
p10282
aS'StaticMesh'
p10283
asg1536
S'StaticMesh'
p10284
sg31
I16
sba(iUnrealScriptIDEData
Variable
p10285
(dp10286
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10287
sg1553
g95
sg1554
(lp10288
S'var()'
p10289
aS'Color'
p10290
asg1536
S'WireframeColor'
p10291
sg31
I17
sba(iUnrealScriptIDEData
Variable
p10292
(dp10293
g19
S'/**\n *\tIgnore this instance of this static mesh when calculating streaming information.\n *\tThis can be useful when doing things like applying character textures to static geometry,\n *\tto avoid them using distance-based streaming.\n */\nvar()\tbool\tbIgnoreInstanceForTextureStreaming;\n'
p10294
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10295
sg1553
g95
sg1554
(lp10296
S'var()'
p10297
aS'bool'
p10298
asg1536
S'bIgnoreInstanceForTextureStreaming'
p10299
sg31
I24
sba(iUnrealScriptIDEData
Variable
p10300
(dp10301
g19
S"/** Deprecated. Replaced by 'bOverrideLightMapRes'. */\nvar deprecated const bool bOverrideLightMapResolution;\n"
p10302
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10303
sg1553
g95
sg1554
(lp10304
S'var'
p10305
aS'deprecated'
p10306
aS'const'
p10307
aS'bool'
p10308
asg1536
S'bOverrideLightMapResolution'
p10309
sg31
I27
sba(iUnrealScriptIDEData
Variable
p10310
(dp10311
g19
S'/** Whether to override the lightmap resolution defined in the static mesh. */\nvar() const bool bOverrideLightMapRes;\n'
p10312
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10313
sg1553
g95
sg1554
(lp10314
S'var()'
p10315
aS'const'
p10316
aS'bool'
p10317
asg1536
S'bOverrideLightMapRes'
p10318
sg31
I30
sba(iUnrealScriptIDEData
Variable
p10319
(dp10320
g19
S"/** Deprecated. Replaced by 'OverriddenLightMapRes'. */\nvar deprecated const int OverriddenLightMapResolution;\n"
p10321
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10322
sg1553
g95
sg1554
(lp10323
S'var'
p10324
aS'deprecated'
p10325
aS'const'
p10326
aS'int'
p10327
asg1536
S'OverriddenLightMapResolution'
p10328
sg31
I33
sba(iUnrealScriptIDEData
Variable
p10329
(dp10330
g19
S'/** Light map resolution used if bOverrideLightMapRes is TRUE */\nvar() const int\t OverriddenLightMapRes;\n'
p10331
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10332
sg1553
g95
sg1554
(lp10333
S'var()'
p10334
aS'const'
p10335
aS'int'
p10336
asg1536
S'OverriddenLightMapRes'
p10337
sg31
I36
sba(iUnrealScriptIDEData
Variable
p10338
(dp10339
g19
S'/** With the default value of 0, the LODMaxRange from the UStaticMesh will be used to control LOD transitions, otherwise this value overrides. */\nvar() float OverriddenLODMaxRange;\n'
p10340
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10341
sg1553
g95
sg1554
(lp10342
S'var()'
p10343
aS'float'
p10344
asg1536
S'OverriddenLODMaxRange'
p10345
sg31
I39
sba(iUnrealScriptIDEData
Variable
p10346
(dp10347
g19
S'/**\n * Allows adjusting the desired streaming distance of streaming textures that uses UV 0.\n * 1.0 is the default, whereas a higher value makes the textures stream in sooner from far away.\n * A lower value (0.0-1.0) makes the textures stream in later (you have to be closer).\n */\nvar()\tfloat\tStreamingDistanceMultiplier;\n'
p10348
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10349
sg1553
g95
sg1554
(lp10350
S'var()'
p10351
aS'float'
p10352
asg1536
S'StreamingDistanceMultiplier'
p10353
sg31
I46
sba(iUnrealScriptIDEData
Variable
p10354
(dp10355
g19
S'/** Subdivision step size for static vertex lighting.\t\t\t\t*/\nvar const int\tSubDivisionStepSize;\n'
p10356
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10357
sg1553
g95
sg1554
(lp10358
S'var'
p10359
aS'const'
p10360
aS'int'
p10361
asg1536
S'SubDivisionStepSize'
p10362
sg31
I49
sba(iUnrealScriptIDEData
Variable
p10363
(dp10364
g19
S"/** Whether to use subdivisions or just the triangle's vertices.\t*/\nvar const bool bUseSubDivisions;\n"
p10365
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10366
sg1553
g95
sg1554
(lp10367
S'var'
p10368
aS'const'
p10369
aS'bool'
p10370
asg1536
S'bUseSubDivisions'
p10371
sg31
I51
sba(iUnrealScriptIDEData
Variable
p10372
(dp10373
g19
S'/** if True then decals will always use the fast path and will be treated as static wrt this mesh */\nvar const transient bool bForceStaticDecals;\n'
p10374
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10375
sg1553
g95
sg1554
(lp10376
S'var'
p10377
aS'const'
p10378
aS'transient'
p10379
aS'bool'
p10380
asg1536
S'bForceStaticDecals'
p10381
sg31
I53
sba(iUnrealScriptIDEData
Variable
p10382
(dp10383
g19
S'/** Whether or not we can highlight selected sections - this should really only be done in the editor */\nvar transient bool bCanHighlightSelectedSections;\n'
p10384
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10385
sg1553
g95
sg1554
(lp10386
S'var'
p10387
aS'transient'
p10388
aS'bool'
p10389
asg1536
S'bCanHighlightSelectedSections'
p10390
sg31
I55
sba(iUnrealScriptIDEData
Variable
p10391
(dp10392
g19
S'/** Whether or not to use the optional simple lightmap modification texture */\nvar(MobileSettings) bool bUseSimpleLightmapModifications;\n'
p10393
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10394
sg1553
g95
sg1554
(lp10395
S'var(MobileSettings)'
p10396
aS'bool'
p10397
asg1536
S'bUseSimpleLightmapModifications'
p10398
sg31
I58
sba(iUnrealScriptIDEData
Variable
p10399
(dp10400
g19
S'/** The texture to use when modifying the simple lightmap texture */\nvar(MobileSettings) editoronly texture SimpleLightmapModificationTexture <EditCondition=bUseSimpleLightmapModifications>;\n'
p10401
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10402
sg1553
g95
sg1554
(lp10403
S'var(MobileSettings)'
p10404
aS'editoronly'
p10405
aS'texture'
p10406
aS'SimpleLightmapModificationTexture'
p10407
asg1536
g95
sg31
I69
sba(iUnrealScriptIDEData
Variable
p10408
(dp10409
g19
S'/** Never become dynamic, even if my mesh has bCanBecomeDynamic=true */\nvar(Physics) bool bNeverBecomeDynamic;\n'
p10410
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10411
sg1553
g95
sg1554
(lp10412
S'var(Physics)'
p10413
aS'bool'
p10414
asg1536
S'bNeverBecomeDynamic'
p10415
sg31
I75
sba(iUnrealScriptIDEData
Variable
p10416
(dp10417
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10418
sg1553
g95
sg1554
(lp10419
S'var'
p10420
aS'const'
p10421
aS'array<Guid>'
p10422
asg1536
S'IrrelevantLights'
p10423
sg31
I77
sba(iUnrealScriptIDEData
Variable
p10424
(dp10425
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10426
sg1553
g95
sg1554
(lp10427
S'var'
p10428
aS'native'
p10429
aS'private'
p10430
aS'const'
p10431
aS'pointer'
p10432
asg1536
S'LightMap{FLightMap}'
p10433
sg31
I91
sba(iUnrealScriptIDEData
Variable
p10434
(dp10435
g19
S'\t/** Vertex colors to use for this mesh LOD */\n\tvar private native const pointer OverrideVertexColors{FColorVertexBuffer_Mirror};\n'
p10436
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10437
sg1553
g95
sg1554
(lp10438
S'var'
p10439
aS'private'
p10440
aS'native'
p10441
aS'const'
p10442
aS'pointer'
p10443
asg1536
S'OverrideVertexColors{FColorVertexBuffer_Mirror}'
p10444
sg31
I94
sba(iUnrealScriptIDEData
Variable
p10445
(dp10446
g19
S'\t/** Vertex data cached at the time this LOD was painted, if any */\n\tvar private const array<PaintedVertex> PaintedVertices;\n'
p10447
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10448
sg1553
g95
sg1554
(lp10449
S'var'
p10450
aS'private'
p10451
aS'const'
p10452
aS'array<PaintedVertex>'
p10453
asg1536
S'PaintedVertices'
p10454
sg31
I97
sba(iUnrealScriptIDEData
Variable
p10455
(dp10456
g19
S'/** Static mesh LOD data.  Contains static lighting data along with instanced mesh vertex colors. */\nvar native serializetext private const array<StaticMeshComponentLODInfo> LODData;\n'
p10457
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10458
sg1553
g95
sg1554
(lp10459
S'var'
p10460
aS'native'
p10461
aS'serializetext'
p10462
aS'private'
p10463
aS'const'
p10464
aS'array<StaticMeshComponentLODInfo>'
p10465
asg1536
S'LODData'
p10466
sg31
I101
sba(iUnrealScriptIDEData
Variable
p10467
(dp10468
g19
S'/** Incremented any time the position of vertices from the source mesh change, used to determine if an update from the source static mesh is required */\nvar private const int VertexPositionVersionNumber;\n'
p10469
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10470
sg1553
g95
sg1554
(lp10471
S'var'
p10472
aS'private'
p10473
aS'const'
p10474
aS'int'
p10475
asg1536
S'VertexPositionVersionNumber'
p10476
sg31
I104
sba(iUnrealScriptIDEData
Variable
p10477
(dp10478
g19
S'/** The Lightmass settings for this object. */\nvar(Lightmass) LightmassPrimitiveSettings\tLightmassSettings <ScriptOrder=true>;\n'
p10479
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cStaticMeshComponent.uc
p10480
sg1553
g95
sg1554
(lp10481
S'var(Lightmass)'
p10482
aS'LightmassPrimitiveSettings'
p10483
aS'LightmassSettings'
p10484
asg1536
g95
sg31
I107
sbasba(iUnrealScriptIDEData
ClassReference
p10485
(dp10486
g6
Nsg7
g12
sg90
I01
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cMeshComponent.uc
p10487
sg74
(lp10488
(iUnrealScriptIDEData
Function
p10489
(dp10490
g19
S'/**\n * @param ElementIndex - The element to access the material of.\n * @return the material used by the indexed element of this mesh.\n */\nnative function MaterialInterface GetMaterial(int ElementIndex);\n'
p10491
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cMeshComponent.uc
p10492
sg23
S'int ElementIndex'
p10493
sg25
S'MaterialInterface'
p10494
sg27
S'native'
p10495
sg29
S'GetMaterial'
p10496
sg31
I16
sg32
I01
sba(iUnrealScriptIDEData
Function
p10497
(dp10498
g19
S'/**\n * Changes the material applied to an element of the mesh.\n * @param ElementIndex - The element to access the material of.\n * @return the material used by the indexed element of this mesh.\n */\nnative virtual function SetMaterial(int ElementIndex, MaterialInterface Material);\n'
p10499
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cMeshComponent.uc
p10500
sg23
S'int ElementIndex, MaterialInterface Material'
p10501
sg25
g95
sg27
S'native virtual'
p10502
sg29
S'SetMaterial'
p10503
sg31
I23
sg32
I01
sba(iUnrealScriptIDEData
Function
p10504
(dp10505
g19
S'/** @return The total number of elements in the mesh. */\nnative function int GetNumElements();\n'
p10506
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cMeshComponent.uc
p10507
sg23
g95
sg25
S'int'
p10508
sg27
S'native'
p10509
sg29
S'GetNumElements'
p10510
sg31
I26
sg32
I01
sba(iUnrealScriptIDEData
Function
p10511
(dp10512
g19
S'/**\n *\tTell the streaming system to start loading all textures with all mip-levels.\n *\t@param Seconds\t\t\t\t\t\t\tNumber of seconds to force all mip-levels to be resident\n *\t@param bPrioritizeCharacterTextures\t\tWhether character textures should be prioritized for a while by the streaming system\n *\t@param CinematicTextureGroups\t\t\tBitfield indicating which texture groups that use extra high-resolution mips\n */\nnative final function PrestreamTextures( float Seconds, bool bPrioritizeCharacterTextures, optional int CinematicTextureGroups = 0 );\n'
p10513
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cMeshComponent.uc
p10514
sg23
S'float Seconds, bool bPrioritizeCharacterTextures, optional int CinematicTextureGroups = 0'
p10515
sg25
g95
sg27
S'native final'
p10516
sg29
S'PrestreamTextures'
p10517
sg31
I34
sg32
I01
sba(iUnrealScriptIDEData
Function
p10518
(dp10519
g19
S'/**\n * Creates a material instance for the specified element index.  The parent of the instance is set to the material being replaced.\n * @param ElementIndex - The index of the skin to replace the material for.\n */\nfunction MaterialInstanceConstant CreateAndSetMaterialInstanceConstant(int ElementIndex)\n'
p10520
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cMeshComponent.uc
p10521
sg23
S'int ElementIndex'
p10522
sg25
S'MaterialInstanceConstant'
p10523
sg27
g95
sg29
S'CreateAndSetMaterialInstanceConstant'
p10524
sg31
I40
sg32
I01
sba(iUnrealScriptIDEData
Function
p10525
(dp10526
g19
S'/**\n* Creates a material instance for the specified element index.  The parent of the instance is set to the material being replaced.\n* @param ElementIndex - The index of the skin to replace the material for.\n*/\nfunction MaterialInstanceTimeVarying CreateAndSetMaterialInstanceTimeVarying(int ElementIndex)\n'
p10527
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cMeshComponent.uc
p10528
sg23
S'int ElementIndex'
p10529
sg25
S'MaterialInstanceTimeVarying'
p10530
sg27
g95
sg29
S'CreateAndSetMaterialInstanceTimeVarying'
p10531
sg31
I59
sg32
I01
sbasg1531
S'primitivecomponent'
p10532
sg19
S'/**\n * Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\n */\nclass MeshComponent extends PrimitiveComponent\n'
p10533
sg1534
(lp10534
sg1536
VMeshComponent
p10535
sg1538
(lp10536
sg1540
(lp10537
sg82
(lp10538
(iUnrealScriptIDEData
Variable
p10539
(dp10540
g19
S'/** Per-Component material overrides.  These must NOT be set directly or a race condition can occur between GC and the rendering thread. */\nvar(Rendering) const array<MaterialInterface>\tMaterials;\n'
p10541
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cMeshComponent.uc
p10542
sg1553
g95
sg1554
(lp10543
S'var(Rendering)'
p10544
aS'const'
p10545
aS'array<MaterialInterface>'
p10546
asg1536
S'Materials'
p10547
sg31
I10
sbasba(iUnrealScriptIDEData
ClassReference
p10548
(dp10549
g6
Nsg7
g12
sg90
I01
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10550
sg74
(lp10551
(iUnrealScriptIDEData
Function
p10552
(dp10553
g19
S'/**\n *\tAdd an impulse to the physics of this PrimitiveComponent.\n *\n * Good for zero time.  One time insta burst.\n *\n *\t@param\tImpulse\t\tMagnitude and direction of impulse to apply.\n *\t@param\tPosition\tPoint in world space to apply impulse at. If Position is (0,0,0), impulse is applied at center of mass ie. no rotation.\n *\t@param\tBoneName\tIf a SkeletalMeshComponent, name of bone to apply impulse to.\n *\t@param\tbVelChange\tIf true, the Strength is taken as a change in velocity instead of an impulse (ie. mass will have no affect).\n */\nnative final function AddImpulse(vector Impulse, optional vector Position, optional name BoneName, optional bool bVelChange);\n'
p10554
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10555
sg23
S'vector Impulse, optional vector Position, optional name BoneName, optional bool bVelChange'
p10556
sg25
g95
sg27
S'native final'
p10557
sg29
S'AddImpulse'
p10558
sg31
I495
sg32
I01
sba(iUnrealScriptIDEData
Function
p10559
(dp10560
g19
S'/**\n * Add an impulse to this component, radiating out from the specified position.\n * In the case of a skeletal mesh, may affect each bone of the mesh.\n *\n * @param Origin\t\tPoint of origin for the radial impulse blast\n * @param Radius\t\tSize of radial impulse. Beyond this distance from Origin, there will be no affect.\n * @param Strength\t\tMaximum strength of impulse applied to body.\n * @param Falloff\t\tAllows you to control the strength of the impulse as a function of distance from Origin.\n * @param bVelChange\tIf true, the Strength is taken as a change in velocity instead of an impulse (ie. mass will have no affect).\n */\nnative final function AddRadialImpulse(vector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, optional bool bVelChange);\n'
p10561
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10562
sg23
S'vector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, optional bool bVelChange'
p10563
sg25
g95
sg27
S'native final'
p10564
sg29
S'AddRadialImpulse'
p10565
sg31
I507
sg32
I01
sba(iUnrealScriptIDEData
Function
p10566
(dp10567
g19
S'/**\n *\tAdd a force to this component.\n *\n * This is like a thruster. Good for adding a burst over some (non zero) time.\n *\n *\t@param Force\t\tForce vector to apply. Magnitude indicates strength of force.\n *\t@param Position\t\tPosition on object to apply force. If (0,0,0), force is applied at center of mass.\n *\t@param BoneName\t\tUsed in the skeletal case to apply a force to a single body.\n */\nnative final function AddForce(vector Force, optional vector Position, optional name BoneName);\n'
p10568
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10569
sg23
S'vector Force, optional vector Position, optional name BoneName'
p10570
sg25
g95
sg27
S'native final'
p10571
sg29
S'AddForce'
p10572
sg31
I518
sg32
I01
sba(iUnrealScriptIDEData
Function
p10573
(dp10574
g19
S'/**\n *\tAdd a force originating from the supplied world-space location.\n *\n *\t@param Origin\t\tOrigin of force in world space.\n *\t@param Radius\t\tRadius within which to apply the force.\n *\t@param Strength\t\tStrength of force to apply.\n *  @param Falloff\t\tAllows you to control the strength of the force as a function of distance from Origin.\n */\nnative final function AddRadialForce(vector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff);\n'
p10575
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10576
sg23
S'vector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff'
p10577
sg25
g95
sg27
S'native final'
p10578
sg29
S'AddRadialForce'
p10579
sg31
I528
sg32
I01
sba(iUnrealScriptIDEData
Function
p10580
(dp10581
g19
S'/**\n*\tAdd a torque to this component.\n*\t@param Torque\t\tForce vector to apply. Magnitude indicates strength of force.\n*\t@param BoneName\t\tUsed in the skeletal case to apply a force to a single body.\n*/\nnative final function AddTorque(vector Torque, optional name BoneName);\n'
p10582
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10583
sg23
S'vector Torque, optional name BoneName'
p10584
sg25
g95
sg27
S'native final'
p10585
sg29
S'AddTorque'
p10586
sg31
I535
sg32
I01
sba(iUnrealScriptIDEData
Function
p10587
(dp10588
g19
S'/**\n * Set the linear velocity of the rigid body physics of this PrimitiveComponent. If no rigid-body physics is active, will do nothing.\n * In the case of a SkeletalMeshComponent will affect all bones.\n * This should be used cautiously - it may be better to use AddForce or AddImpulse.\n *\n * @param\tNewVel\t\t\tNew linear velocity to apply to physics.\n * @param\tbAddToCurrent\tIf true, NewVel is added to the existing velocity of the body.\n */\nnative final function SetRBLinearVelocity(vector NewVel, optional bool bAddToCurrent);\n'
p10589
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10590
sg23
S'vector NewVel, optional bool bAddToCurrent'
p10591
sg25
g95
sg27
S'native final'
p10592
sg29
S'SetRBLinearVelocity'
p10593
sg31
I545
sg32
I01
sba(iUnrealScriptIDEData
Function
p10594
(dp10595
g19
S'/**\n * Set the angular velocity of the rigid body physics of this PrimitiveComponent. If no rigid-body physics is active, will do nothing.\n * In the case of a SkeletalMeshComponent will affect all bones - and will apply the linear velocity necessary to get all bones to rotate around the root.\n * This should be used cautiously - it may be better to use AddForce or AddImpulse.\n *\n * @param\tNewAngVel\t\tNew angular velocity to apply to physics.\n * @param\tbAddToCurrent\tIf true, NewAngVel is added to the existing velocity of the body.\n */\nnative final function SetRBAngularVelocity(vector NewAngVel, optional bool bAddToCurrent);\n'
p10596
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10597
sg23
S'vector NewAngVel, optional bool bAddToCurrent'
p10598
sg25
g95
sg27
S'native final'
p10599
sg29
S'SetRBAngularVelocity'
p10600
sg31
I555
sg32
I01
sba(iUnrealScriptIDEData
Function
p10601
(dp10602
g19
S'/**\n *\tReduce velocity of rigid body physics in the direction supplied. This decomposes body velocity into that along supplied vector and that perpendicular to the vector.\n *\tThat along vector, if in same direction as vector, is scale by VelScale. If it is moving in the opposite direction to supplied vector it is not affected.\n *\n *\t@param\tRetardDir\t\tUnit vector indicating direction to check velocity of physics against\n *\t@param\tVelScale\t\tValue from 0.0 to 1.0 - 1.0 will stop all motion along RetardDir\n */\nnative final function RetardRBLinearVelocity(vector RetardDir, float VelScale);\n'
p10603
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10604
sg23
S'vector RetardDir, float VelScale'
p10605
sg25
g95
sg27
S'native final'
p10606
sg29
S'RetardRBLinearVelocity'
p10607
sg31
I564
sg32
I01
sba(iUnrealScriptIDEData
Function
p10608
(dp10609
g19
S'/**\n * Called if you want to move the physics of a component which has dynamics running (ie actor is in PHYS_RigidBody).\n * Be careful calling this when this is jointed to something else, or when it does not fit in the destination (no checking is done).\n * @param NewPos new position of the body\n * @param BoneName (SkeletalMeshComponent only) if specified, the bone to change position of\n * \t\t\tif not specified for a SkeletalMeshComponent, all bodies are moved by the delta\n * \t\t\tbetween the desired location and that of the root body.\n */\nnative final function SetRBPosition(vector NewPos, optional name BoneName);\n'
p10610
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10611
sg23
S'vector NewPos, optional name BoneName'
p10612
sg25
g95
sg27
S'native final'
p10613
sg29
S'SetRBPosition'
p10614
sg31
I574
sg32
I01
sba(iUnrealScriptIDEData
Function
p10615
(dp10616
g19
S'/**\n * Called if you want to rotate the physics of a component which has dynamics running (ie actor is in PHYS_RigidBody).\n * @param NewRot new rotation of the body\n * @param BoneName (SkeletalMeshComponent only) if specified, the bone to change rotation of\n * \t\t\tif not specified for a SkeletalMeshComponent, all bodies are moved by the delta\n * \t\t\tbetween the desired rotation and that of the root body.\n */\nnative final function SetRBRotation(rotator NewRot, optional name BoneName);\n'
p10617
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10618
sg23
S'rotator NewRot, optional name BoneName'
p10619
sg25
g95
sg27
S'native final'
p10620
sg29
S'SetRBRotation'
p10621
sg31
I583
sg32
I01
sba(iUnrealScriptIDEData
Function
p10622
(dp10623
g19
S'/**\n *\tEnsure simulation is running for this component.\n *\tIf a SkeletalMeshComponent and no BoneName is specified, will wake all bones in the PhysicsAsset.\n */\nnative final function WakeRigidBody(optional name BoneName);\n'
p10624
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10625
sg23
S'optional name BoneName'
p10626
sg25
g95
sg27
S'native final'
p10627
sg29
S'WakeRigidBody'
p10628
sg31
I589
sg32
I01
sba(iUnrealScriptIDEData
Function
p10629
(dp10630
g19
S'/**\n * Put a simulation back to sleep.\n */\nnative final function PutRigidBodyToSleep(optional name BoneName);\n'
p10631
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10632
sg23
S'optional name BoneName'
p10633
sg25
g95
sg27
S'native final'
p10634
sg29
S'PutRigidBodyToSleep'
p10635
sg31
I594
sg32
I01
sba(iUnrealScriptIDEData
Function
p10636
(dp10637
g19
S'/**\n *\tReturns if the body is currently awake and simulating.\n *\tIf a SkeletalMeshComponent, and no BoneName is specified, will pick a random bone -\n *\tso does not make much sense if not all bones are jointed together.\n */\nnative final function bool RigidBodyIsAwake(optional name BoneName);\n'
p10638
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10639
sg23
S'optional name BoneName'
p10640
sg25
S'bool'
p10641
sg27
S'native final'
p10642
sg29
S'RigidBodyIsAwake'
p10643
sg31
I601
sg32
I01
sba(iUnrealScriptIDEData
Function
p10644
(dp10645
g19
S'/**\n *\tChange the value of BlockRigidBody.\n *\n *\t@param NewBlockRigidBody - The value to assign to BlockRigidBody.\n */\nnative final function SetBlockRigidBody(bool bNewBlockRigidBody);\n'
p10646
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10647
sg23
S'bool bNewBlockRigidBody'
p10648
sg25
g95
sg27
S'native final'
p10649
sg29
S'SetBlockRigidBody'
p10650
sg31
I608
sg32
I01
sba(iUnrealScriptIDEData
Function
p10651
(dp10652
g19
S'/**\n *\tChanges a member of the RBCollideWithChannels container for this PrimitiveComponent.\n *\n * @param bNewCollides whether or not to collide with passed in channel\n */\nfinal native function SetRBCollidesWithChannel(ERBCollisionChannel Channel, bool bNewCollides);\n'
p10653
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10654
sg23
S'ERBCollisionChannel Channel, bool bNewCollides'
p10655
sg25
g95
sg27
S'final native'
p10656
sg29
S'SetRBCollidesWithChannel'
p10657
sg31
I615
sg32
I01
sba(iUnrealScriptIDEData
Function
p10658
(dp10659
g19
S'/**\n *\tSets the collision channels based on the settings in the Channel container.\n *\n * @param Channels is a list of channels with which the component should collide\n */\nfinal native function SetRBCollisionChannels(RBCollisionChannelContainer Channels);\n'
p10660
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10661
sg23
S'RBCollisionChannelContainer Channels'
p10662
sg25
g95
sg27
S'final native'
p10663
sg29
S'SetRBCollisionChannels'
p10664
sg31
I622
sg32
I01
sba(iUnrealScriptIDEData
Function
p10665
(dp10666
g19
S'/**\n *\tChanges the rigid-body channel that this object is defined in.\n */\nfinal native function SetRBChannel(ERBCollisionChannel Channel);\n'
p10667
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10668
sg23
S'ERBCollisionChannel Channel'
p10669
sg25
g95
sg27
S'final native'
p10670
sg29
S'SetRBChannel'
p10671
sg31
I627
sg32
I01
sba(iUnrealScriptIDEData
Function
p10672
(dp10673
g19
S'/** Changes the value of bNotifyRigidBodyCollision\n * @param bNewNotifyRigidBodyCollision - The value to assign to bNotifyRigidBodyCollision\n */\nnative final function SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);\n'
p10674
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10675
sg23
S'bool bNewNotifyRigidBodyCollision'
p10676
sg25
g95
sg27
S'native final'
p10677
sg29
S'SetNotifyRigidBodyCollision'
p10678
sg31
I632
sg32
I01
sba(iUnrealScriptIDEData
Function
p10679
(dp10680
g19
S'/** initializes rigid body physics for this component\n * this is done automatically for PrimitiveComponents attached via Actor defaults,\n * but if a component is attached at runtime you may need to call this function to set it up\n * @note: this function does nothing if not attached or bDisableAllRigidBody is set\n */\nnative final function InitRBPhys();\n'
p10681
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10682
sg23
g95
sg25
g95
sg27
S'native final'
p10683
sg29
S'InitRBPhys'
p10684
sg31
I639
sg32
I01
sba(iUnrealScriptIDEData
Function
p10685
(dp10686
g19
S'/**\n *\tChanges the current PhysMaterialOverride for this component.\n *\tNote that if physics is already running on this component, this will _not_ alter its mass/inertia etc, it will only change its\n *\tsurface properties like friction and the damping.\n */\nnative final function SetPhysMaterialOverride(PhysicalMaterial NewPhysMaterial);\n'
p10687
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10688
sg23
S'PhysicalMaterial NewPhysMaterial'
p10689
sg25
g95
sg27
S'native final'
p10690
sg29
S'SetPhysMaterialOverride'
p10691
sg31
I646
sg32
I01
sba(iUnrealScriptIDEData
Function
p10692
(dp10693
g19
S'/** returns the physics RB_BodyInstance for the root body of this component (if any) */\nnative final function RB_BodyInstance GetRootBodyInstance();\n'
p10694
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10695
sg23
g95
sg25
S'RB_BodyInstance'
p10696
sg27
S'native final'
p10697
sg29
S'GetRootBodyInstance'
p10698
sg31
I649
sg32
I01
sba(iUnrealScriptIDEData
Function
p10699
(dp10700
g19
S'/**\n *\tUsed for creating one-way physics interactions.\n *\t@see RBDominanceGroup\n */\nnative final function SetRBDominanceGroup(BYTE InDomGroup);\n'
p10701
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10702
sg23
S'BYTE InDomGroup'
p10703
sg25
g95
sg27
S'native final'
p10704
sg29
S'SetRBDominanceGroup'
p10705
sg31
I655
sg32
I01
sba(iUnrealScriptIDEData
Function
p10706
(dp10707
g19
S'/**\n *  Looking at various values of the component, determines if this\n *  component should be added to the scene\n * @return TRUE if the component is visible and should be added to the scene, FALSE otherwise\n */\nnative final function bool ShouldComponentAddToScene();\n'
p10708
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10709
sg23
g95
sg25
S'bool'
p10710
sg27
S'native final'
p10711
sg29
S'ShouldComponentAddToScene'
p10712
sg31
I662
sg32
I01
sba(iUnrealScriptIDEData
Function
p10713
(dp10714
g19
S'/**\n * Changes the value of HiddenGame.\n *\n * @param NewHidden\t- The value to assign to HiddenGame.\n */\nnative final function SetHidden(bool NewHidden);\n'
p10715
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10716
sg23
S'bool NewHidden'
p10717
sg25
g95
sg27
S'native final'
p10718
sg29
S'SetHidden'
p10719
sg31
I669
sg32
I01
sba(iUnrealScriptIDEData
Function
p10720
(dp10721
g19
S'/**\n * Changes the value of bOwnerNoSee.\n */\nnative final function SetOwnerNoSee(bool bNewOwnerNoSee);\n'
p10722
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10723
sg23
S'bool bNewOwnerNoSee'
p10724
sg25
g95
sg27
S'native final'
p10725
sg29
S'SetOwnerNoSee'
p10726
sg31
I674
sg32
I01
sba(iUnrealScriptIDEData
Function
p10727
(dp10728
g19
S'/**\n * Changes the value of bOnlyOwnerSee.\n */\nnative final function SetOnlyOwnerSee(bool bNewOnlyOwnerSee);\n'
p10729
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10730
sg23
S'bool bNewOnlyOwnerSee'
p10731
sg25
g95
sg27
S'native final'
p10732
sg29
S'SetOnlyOwnerSee'
p10733
sg31
I679
sg32
I01
sba(iUnrealScriptIDEData
Function
p10734
(dp10735
g19
S'/**\n* Changes the value of bIgnoreOwnerHidden.\n*/\nnative final function SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden);\n'
p10736
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10737
sg23
S'bool bNewIgnoreOwnerHidden'
p10738
sg25
g95
sg27
S'native final'
p10739
sg29
S'SetIgnoreOwnerHidden'
p10740
sg31
I684
sg32
I01
sba(iUnrealScriptIDEData
Function
p10741
(dp10742
g19
S'/**\n * Changes the value of ShadowParent.\n * @param NewShadowParent - The value to assign to ShadowParent.\n */\nnative final function SetShadowParent(PrimitiveComponent NewShadowParent);\n'
p10743
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10744
sg23
S'PrimitiveComponent NewShadowParent'
p10745
sg25
g95
sg27
S'native final'
p10746
sg29
S'SetShadowParent'
p10747
sg31
I690
sg32
I01
sba(iUnrealScriptIDEData
Function
p10748
(dp10749
g19
S'/**\n * Changes the value of LightEnvironment.\n * @param NewLightEnvironment - The value to assign to LightEnvironment.\n */\nnative final function SetLightEnvironment(LightEnvironmentComponent NewLightEnvironment);\n'
p10750
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10751
sg23
S'LightEnvironmentComponent NewLightEnvironment'
p10752
sg25
g95
sg27
S'native final'
p10753
sg29
S'SetLightEnvironment'
p10754
sg31
I696
sg32
I01
sba(iUnrealScriptIDEData
Function
p10755
(dp10756
g19
S'/**\n * Changes the value of CullDistance.\n * @param NewCullDistance - The value to assign to CullDistance.\n */\nnative final function SetCullDistance(float NewCullDistance);\n'
p10757
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10758
sg23
S'float NewCullDistance'
p10759
sg25
g95
sg27
S'native final'
p10760
sg29
S'SetCullDistance'
p10761
sg31
I702
sg32
I01
sba(iUnrealScriptIDEData
Function
p10762
(dp10763
g19
S'/**\n * Changes the value of LightingChannels.\n * @param NewLightingChannels - The value to assign to LightingChannels.\n */\nnative final function SetLightingChannels(LightingChannelContainer NewLightingChannels);\n'
p10764
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10765
sg23
S'LightingChannelContainer NewLightingChannels'
p10766
sg25
g95
sg27
S'native final'
p10767
sg29
S'SetLightingChannels'
p10768
sg31
I708
sg32
I01
sba(iUnrealScriptIDEData
Function
p10769
(dp10770
g19
S'/**\n * Changes the value of DepthPriorityGroup.\n * @param NewDepthPriorityGroup - The value to assign to DepthPriorityGroup.\n */\nnative final function SetDepthPriorityGroup(ESceneDepthPriorityGroup NewDepthPriorityGroup);\n'
p10771
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10772
sg23
S'ESceneDepthPriorityGroup NewDepthPriorityGroup'
p10773
sg25
g95
sg27
S'native final'
p10774
sg29
S'SetDepthPriorityGroup'
p10775
sg31
I714
sg32
I01
sba(iUnrealScriptIDEData
Function
p10776
(dp10777
g19
S'/**\n * Changes the value of bUseViewOwnerDepthPriorityGroup and ViewOwnerDepthPriorityGroup.\n * @param bNewUseViewOwnerDepthPriorityGroup - The value to assign to bUseViewOwnerDepthPriorityGroup.\n * @param NewViewOwnerDepthPriorityGroup - The value to assign to ViewOwnerDepthPriorityGroup.\n */\nnative final function SetViewOwnerDepthPriorityGroup(\n\tbool bNewUseViewOwnerDepthPriorityGroup,\n\tESceneDepthPriorityGroup NewViewOwnerDepthPriorityGroup\n\t);\n'
p10778
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10779
sg23
S'bool bNewUseViewOwnerDepthPriorityGroup, ESceneDepthPriorityGroup NewViewOwnerDepthPriorityGroup'
p10780
sg25
g95
sg27
S'native final'
p10781
sg29
S'SetViewOwnerDepthPriorityGroup'
p10782
sg31
I724
sg32
I01
sba(iUnrealScriptIDEData
Function
p10783
(dp10784
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10785
sg23
S'bool NewBlockZeroExtent, bool NewBlockNonZeroExtent'
p10786
sg25
g95
sg27
S'native final'
p10787
sg29
S'SetTraceBlocking'
p10788
sg31
I726
sg32
I01
sba(iUnrealScriptIDEData
Function
p10789
(dp10790
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10791
sg23
S'bool NewCollideActors, bool NewBlockActors, optional bool NewAlwaysCheckCollision'
p10792
sg25
g95
sg27
S'native final'
p10793
sg29
S'SetActorCollision'
p10794
sg31
I728
sg32
I01
sba(iUnrealScriptIDEData
Function
p10795
(dp10796
g19
S'// Copied from TransformComponent\nnative function SetTranslation(vector NewTranslation);\n'
p10797
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10798
sg23
S'vector NewTranslation'
p10799
sg25
g95
sg27
S'native'
p10800
sg29
S'SetTranslation'
p10801
sg31
I731
sg32
I01
sba(iUnrealScriptIDEData
Function
p10802
(dp10803
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10804
sg23
S'rotator NewRotation'
p10805
sg25
g95
sg27
S'native'
p10806
sg29
S'SetRotation'
p10807
sg31
I732
sg32
I01
sba(iUnrealScriptIDEData
Function
p10808
(dp10809
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10810
sg23
S'float NewScale'
p10811
sg25
g95
sg27
S'native'
p10812
sg29
S'SetScale'
p10813
sg31
I733
sg32
I01
sba(iUnrealScriptIDEData
Function
p10814
(dp10815
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10816
sg23
S'vector NewScale3D'
p10817
sg25
g95
sg27
S'native'
p10818
sg29
S'SetScale3D'
p10819
sg31
I734
sg32
I01
sba(iUnrealScriptIDEData
Function
p10820
(dp10821
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10822
sg23
S'optional bool NewAbsoluteTranslation,optional bool NewAbsoluteRotation,optional bool NewAbsoluteScale'
p10823
sg25
g95
sg27
S'native'
p10824
sg29
S'SetAbsolute'
p10825
sg31
I735
sg32
I01
sba(iUnrealScriptIDEData
Function
p10826
(dp10827
g19
S'/** Returns position of the component, in world space. */\nnative function vector GetPosition();\n'
p10828
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10829
sg23
g95
sg25
S'vector'
p10830
sg27
S'native'
p10831
sg29
S'GetPosition'
p10832
sg31
I738
sg32
I01
sba(iUnrealScriptIDEData
Function
p10833
(dp10834
g19
S'/** Returns rotation of the component, in world space. */\nnative function rotator GetRotation();\n'
p10835
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10836
sg23
g95
sg25
S'rotator'
p10837
sg27
S'native'
p10838
sg29
S'GetRotation'
p10839
sg31
I741
sg32
I01
sba(iUnrealScriptIDEData
Function
p10840
(dp10841
g19
S'/**\n* Calculates the closest point on this primitive to a point given\n* @param POI - Point in world space to determine closest point to\n* @param Extent - Convex primitive\n* @param OutPointA - The point closest on the extent box\n* @param OutPointB - Point on this primitive closest to the extent box\n*\n* @return An enumeration indicating the result of the query (intersection/non-intersection/failure)\n*/\nnative final function GJKResult ClosestPointOnComponentToPoint(out vector POI, out vector Extent, out vector OutPointA, out vector OutPointB);\n'
p10842
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10843
sg23
S'out vector POI, out vector Extent, out vector OutPointA, out vector OutPointB'
p10844
sg25
S'GJKResult'
p10845
sg27
S'native final'
p10846
sg29
S'ClosestPointOnComponentToPoint'
p10847
sg31
I752
sg32
I01
sba(iUnrealScriptIDEData
Function
p10848
(dp10849
g19
S'/**\n* Calculates the closest point this component to another component\n* @param PrimitiveComponent - Another Primitive Component\n* @param PointOnComponentA - Point on this primitive closest to other primitive\n* @param PointOnComponentB - Point on other primitive closest to this primitive\n*\n* @return An enumeration indicating the result of the query (intersection/non-intersection/failure)\n*/\nnative function GJKResult ClosestPointOnComponentToComponent(out PrimitiveComponent OtherComponent, out vector PointOnComponentA, out vector PointOnComponentB);\n'
p10850
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10851
sg23
S'out PrimitiveComponent OtherComponent, out vector PointOnComponentA, out vector PointOnComponentB'
p10852
sg25
S'GJKResult'
p10853
sg27
S'native'
p10854
sg29
S'ClosestPointOnComponentToComponent'
p10855
sg31
I762
sg32
I01
sbasg1531
S'actorcomponent'
p10856
sg19
S'/**\n * Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\n */\nclass PrimitiveComponent extends ActorComponent\n'
p10857
sg1534
(lp10858
sg1536
VPrimitiveComponent
p10859
sg1538
(lp10860
sg1540
(lp10861
(iUnrealScriptIDEData
Struct
p10862
(dp10863
g1544
S'struct MaterialViewRelevance\n'
p10864
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10865
sg19
S'/** Mirrored from Scene.h */\nstruct MaterialViewRelevance\n'
p10866
sg1536
S'MaterialViewRelevance'
p10867
sg82
(lp10868
(iUnrealScriptIDEData
Variable
p10869
(dp10870
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10871
sg1553
g95
sg1554
(lp10872
S'var'
p10873
aS'bool'
p10874
asg1536
S'bOpaque'
p10875
sg31
I13
sba(iUnrealScriptIDEData
Variable
p10876
(dp10877
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10878
sg1553
g95
sg1554
(lp10879
S'var'
p10880
aS'bool'
p10881
asg1536
S'bTranslucent'
p10882
sg31
I14
sba(iUnrealScriptIDEData
Variable
p10883
(dp10884
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10885
sg1553
g95
sg1554
(lp10886
S'var'
p10887
aS'bool'
p10888
asg1536
S'bDistortion'
p10889
sg31
I15
sba(iUnrealScriptIDEData
Variable
p10890
(dp10891
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10892
sg1553
g95
sg1554
(lp10893
S'var'
p10894
aS'bool'
p10895
asg1536
S'bOneLayerDistortionRelevance'
p10896
sg31
I16
sba(iUnrealScriptIDEData
Variable
p10897
(dp10898
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10899
sg1553
g95
sg1554
(lp10900
S'var'
p10901
aS'bool'
p10902
asg1536
S'bLit'
p10903
sg31
I17
sba(iUnrealScriptIDEData
Variable
p10904
(dp10905
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10906
sg1553
g95
sg1554
(lp10907
S'var'
p10908
aS'bool'
p10909
asg1536
S'bUsesSceneColor'
p10910
sg31
I18
sbasg31
I11
sba(iUnrealScriptIDEData
Struct
p10911
(dp10912
g1544
S'struct RBCollisionChannelContainer\n'
p10913
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10914
sg19
S'/**\n *\tContainer for indicating a set of collision channel that this object will collide with.\n *\tMirrored manually in UnPhysPublic.h\n */\nstruct RBCollisionChannelContainer\n'
p10915
sg1536
S'RBCollisionChannelContainer'
p10916
sg82
(lp10917
(iUnrealScriptIDEData
Variable
p10918
(dp10919
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10920
sg1553
g95
sg1554
(lp10921
S'var()'
p10922
aS'const'
p10923
aS'bool'
p10924
asg1536
S'Default'
p10925
sg31
I400
sba(iUnrealScriptIDEData
Variable
p10926
(dp10927
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10928
sg1553
S' This is reserved to allow an object to opt-out of all collisions, and should not be set.'
p10929
sg1554
(lp10930
S'var'
p10931
aS'const'
p10932
aS'bool'
p10933
asg1536
S'Nothing'
p10934
sg31
I401
sba(iUnrealScriptIDEData
Variable
p10935
(dp10936
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10937
sg1553
g95
sg1554
(lp10938
S'var()'
p10939
aS'const'
p10940
aS'bool'
p10941
asg1536
S'Pawn'
p10942
sg31
I402
sba(iUnrealScriptIDEData
Variable
p10943
(dp10944
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10945
sg1553
g95
sg1554
(lp10946
S'var()'
p10947
aS'const'
p10948
aS'bool'
p10949
asg1536
S'Vehicle'
p10950
sg31
I403
sba(iUnrealScriptIDEData
Variable
p10951
(dp10952
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10953
sg1553
g95
sg1554
(lp10954
S'var()'
p10955
aS'const'
p10956
aS'bool'
p10957
asg1536
S'Water'
p10958
sg31
I404
sba(iUnrealScriptIDEData
Variable
p10959
(dp10960
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10961
sg1553
g95
sg1554
(lp10962
S'var()'
p10963
aS'const'
p10964
aS'bool'
p10965
asg1536
S'GameplayPhysics'
p10966
sg31
I405
sba(iUnrealScriptIDEData
Variable
p10967
(dp10968
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10969
sg1553
g95
sg1554
(lp10970
S'var()'
p10971
aS'const'
p10972
aS'bool'
p10973
asg1536
S'EffectPhysics'
p10974
sg31
I406
sba(iUnrealScriptIDEData
Variable
p10975
(dp10976
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10977
sg1553
g95
sg1554
(lp10978
S'var()'
p10979
aS'const'
p10980
aS'bool'
p10981
asg1536
S'Untitled1'
p10982
sg31
I407
sba(iUnrealScriptIDEData
Variable
p10983
(dp10984
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10985
sg1553
g95
sg1554
(lp10986
S'var()'
p10987
aS'const'
p10988
aS'bool'
p10989
asg1536
S'Untitled2'
p10990
sg31
I408
sba(iUnrealScriptIDEData
Variable
p10991
(dp10992
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p10993
sg1553
g95
sg1554
(lp10994
S'var()'
p10995
aS'const'
p10996
aS'bool'
p10997
asg1536
S'Untitled3'
p10998
sg31
I409
sba(iUnrealScriptIDEData
Variable
p10999
(dp11000
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11001
sg1553
g95
sg1554
(lp11002
S'var()'
p11003
aS'const'
p11004
aS'bool'
p11005
asg1536
S'Untitled4'
p11006
sg31
I410
sba(iUnrealScriptIDEData
Variable
p11007
(dp11008
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11009
sg1553
g95
sg1554
(lp11010
S'var()'
p11011
aS'const'
p11012
aS'bool'
p11013
asg1536
S'Cloth'
p11014
sg31
I411
sba(iUnrealScriptIDEData
Variable
p11015
(dp11016
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11017
sg1553
g95
sg1554
(lp11018
S'var()'
p11019
aS'const'
p11020
aS'bool'
p11021
asg1536
S'FluidDrain'
p11022
sg31
I412
sba(iUnrealScriptIDEData
Variable
p11023
(dp11024
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11025
sg1553
g95
sg1554
(lp11026
S'var()'
p11027
aS'const'
p11028
aS'bool'
p11029
asg1536
S'SoftBody'
p11030
sg31
I413
sba(iUnrealScriptIDEData
Variable
p11031
(dp11032
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11033
sg1553
g95
sg1554
(lp11034
S'var()'
p11035
aS'const'
p11036
aS'bool'
p11037
asg1536
S'FracturedMeshPart'
p11038
sg31
I414
sba(iUnrealScriptIDEData
Variable
p11039
(dp11040
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11041
sg1553
g95
sg1554
(lp11042
S'var()'
p11043
aS'const'
p11044
aS'bool'
p11045
asg1536
S'BlockingVolume'
p11046
sg31
I415
sba(iUnrealScriptIDEData
Variable
p11047
(dp11048
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11049
sg1553
g95
sg1554
(lp11050
S'var()'
p11051
aS'const'
p11052
aS'bool'
p11053
asg1536
S'DeadPawn'
p11054
sg31
I416
sba(iUnrealScriptIDEData
Variable
p11055
(dp11056
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11057
sg1553
g95
sg1554
(lp11058
S'var()'
p11059
aS'const'
p11060
aS'bool'
p11061
asg1536
S'Clothing'
p11062
sg31
I417
sba(iUnrealScriptIDEData
Variable
p11063
(dp11064
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11065
sg1553
g95
sg1554
(lp11066
S'var()'
p11067
aS'const'
p11068
aS'bool'
p11069
asg1536
S'ClothingCollision'
p11070
sg31
I418
sbasg31
I398
sbasg82
(lp11071
(iUnrealScriptIDEData
Variable
p11072
(dp11073
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11074
sg1553
g95
sg1554
(lp11075
S'var'
p11076
aS'const'
p11077
aS'native'
p11078
aS'transient'
p11079
aS'int'
p11080
asg1536
S'Tag'
p11081
sg31
I21
sba(iUnrealScriptIDEData
Variable
p11082
(dp11083
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11084
sg1553
g95
sg1554
(lp11085
S'var'
p11086
aS'const'
p11087
aS'native'
p11088
aS'transient'
p11089
aS'BoxSphereBounds'
p11090
asg1536
S'Bounds'
p11091
sg31
I24
sba(iUnrealScriptIDEData
Variable
p11092
(dp11093
g19
S"/** The primitive's scene info. */\nvar private native transient const pointer SceneInfo{FPrimitiveSceneInfo};\n"
p11094
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11095
sg1553
g95
sg1554
(lp11096
S'var'
p11097
aS'private'
p11098
aS'native'
p11099
aS'transient'
p11100
aS'const'
p11101
aS'pointer'
p11102
asg1536
S'SceneInfo{FPrimitiveSceneInfo}'
p11103
sg31
I27
sba(iUnrealScriptIDEData
Variable
p11104
(dp11105
g19
S'/** A fence to track when the primitive is detached from the scene in the rendering thread. */\nvar private native const int DetachFence;\n'
p11106
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11107
sg1553
g95
sg1554
(lp11108
S'var'
p11109
aS'private'
p11110
aS'native'
p11111
aS'const'
p11112
aS'int'
p11113
asg1536
S'DetachFence'
p11114
sg31
I30
sba(iUnrealScriptIDEData
Variable
p11115
(dp11116
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11117
sg1553
g95
sg1554
(lp11118
S'var'
p11119
aS'native'
p11120
aS'transient'
p11121
aS'const'
p11122
aS'float'
p11123
asg1536
S'LocalToWorldDeterminant'
p11124
sg31
I34
sba(iUnrealScriptIDEData
Variable
p11125
(dp11126
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11127
sg1553
g95
sg1554
(lp11128
S'var'
p11129
aS'native'
p11130
aS'transient'
p11131
aS'const'
p11132
aS'matrix'
p11133
asg1536
S'LocalToWorld'
p11134
sg31
I35
sba(iUnrealScriptIDEData
Variable
p11135
(dp11136
g19
S'/**\n *\tThe index for the primitive component in the MotionBlurInfo array of the scene.\n *\tRender-thread usage only.\n *\tThis assumes that there is only one scene that requires motion blur, as there is only\n *\ta single index... If the application requires a primitive component to exist in multiple\n *\tscenes and have motion blur in each of them, this can be changed into a mapping of the\n *\tscene pointer to the index. (Associated functions would have to be updated as well...)\n */\nvar native transient const int MotionBlurInfoIndex;\n'
p11137
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11138
sg1553
g95
sg1554
(lp11139
S'var'
p11140
aS'native'
p11141
aS'transient'
p11142
aS'const'
p11143
aS'int'
p11144
asg1536
S'MotionBlurInfoIndex'
p11145
sg31
I44
sba(iUnrealScriptIDEData
Variable
p11146
(dp11147
g19
S'/** Current list of active decals attached to the primitive */\nvar native private noimport const array<pointer> DecalList{class FDecalInteraction};\n'
p11148
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11149
sg1553
g95
sg1554
(lp11150
S'var'
p11151
aS'native'
p11152
aS'private'
p11153
aS'noimport'
p11154
aS'const'
p11155
aS'array<pointer>'
p11156
aS'DecalList{class'
p11157
asg1536
S'FDecalInteraction}'
p11158
sg31
I47
sba(iUnrealScriptIDEData
Variable
p11159
(dp11160
g19
S'/** Decals that are detached from the primitive and need to be reattached */\nvar private transient const array<DecalComponent> DecalsToReattach;\n'
p11161
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11162
sg1553
g95
sg1554
(lp11163
S'var'
p11164
aS'private'
p11165
aS'transient'
p11166
aS'const'
p11167
aS'array<DecalComponent>'
p11168
asg1536
S'DecalsToReattach'
p11169
sg31
I49
sba(iUnrealScriptIDEData
Variable
p11170
(dp11171
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11172
sg1553
g95
sg1554
(lp11173
S'var'
p11174
aS'const'
p11175
aS'PrimitiveComponent'
p11176
asg1536
S'ShadowParent'
p11177
sg31
I53
sba(iUnrealScriptIDEData
Variable
p11178
(dp11179
g19
S"/** Replacement primitive to draw instead of this one (multiple UPrim's will point to the same Replacement) */\nvar(Rendering) crosslevelpassive PrimitiveComponent ReplacementPrimitive;\n"
p11180
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11181
sg1553
g95
sg1554
(lp11182
S'var(Rendering)'
p11183
aS'crosslevelpassive'
p11184
aS'PrimitiveComponent'
p11185
asg1536
S'ReplacementPrimitive'
p11186
sg31
I56
sba(iUnrealScriptIDEData
Variable
p11187
(dp11188
g19
S'/** Keeps track of which fog component this primitive is using. */\nvar const transient FogVolumeDensityComponent FogVolumeComponent;\n'
p11189
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11190
sg1553
g95
sg1554
(lp11191
S'var'
p11192
aS'const'
p11193
aS'transient'
p11194
aS'FogVolumeDensityComponent'
p11195
asg1536
S'FogVolumeComponent'
p11196
sg31
I59
sba(iUnrealScriptIDEData
Variable
p11197
(dp11198
g19
S'/** If specified, only OverrideLightComponent can affect the primitive. */\nvar const transient LightComponent OverrideLightComponent;\n'
p11199
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11200
sg1553
g95
sg1554
(lp11201
S'var'
p11202
aS'const'
p11203
aS'transient'
p11204
aS'LightComponent'
p11205
asg1536
S'OverrideLightComponent'
p11206
sg31
I62
sba(iUnrealScriptIDEData
Variable
p11207
(dp11208
g19
S"/** The lighting environment to take the primitive's lighting from. */\nvar const LightEnvironmentComponent LightEnvironment;\n"
p11209
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11210
sg1553
g95
sg1554
(lp11211
S'var'
p11212
aS'const'
p11213
aS'LightEnvironmentComponent'
p11214
asg1536
S'LightEnvironment'
p11215
sg31
I67
sba(iUnrealScriptIDEData
Variable
p11216
(dp11217
g19
S'/** Stores the previous light environment if SetLightEnvironment is called while the primitive is attached, so that Detach can notify the previous light environment correctly. */\nvar transient private const LightEnvironmentComponent PreviousLightEnvironment;\n'
p11218
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11219
sg1553
g95
sg1554
(lp11220
S'var'
p11221
aS'transient'
p11222
aS'private'
p11223
aS'const'
p11224
aS'LightEnvironmentComponent'
p11225
asg1536
S'PreviousLightEnvironment'
p11226
sg31
I70
sba(iUnrealScriptIDEData
Variable
p11227
(dp11228
g19
S"/**\n * The minimum distance at which the primitive should be rendered,\n * measured in world space units from the center of the primitive's bounding sphere to the camera position.\n */\nvar(Rendering) float MinDrawDistance;\n"
p11229
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11230
sg1553
g95
sg1554
(lp11231
S'var(Rendering)'
p11232
aS'float'
p11233
asg1536
S'MinDrawDistance'
p11234
sg31
I76
sba(iUnrealScriptIDEData
Variable
p11235
(dp11236
g19
S'/**\n * The distance at which the renderer will switch from parent (low LOD) to children (high LOD).\n * This is basically the same as MinDrawDistance, except that the low LOD will draw even up close, if there are no children.\n * This is needed so the high lod meshes can be in a streamable sublevel, and if streamed out, the low LOD will draw up close.\n */\nvar(Rendering) float MassiveLODDistance;\n'
p11237
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11238
sg1553
g95
sg1554
(lp11239
S'var(Rendering)'
p11240
aS'float'
p11241
asg1536
S'MassiveLODDistance'
p11242
sg31
I83
sba(iUnrealScriptIDEData
Variable
p11243
(dp11244
g19
S'/**\n * Max draw distance exposed to LDs. The real max draw distance is the min (disregarding 0) of this and volumes affecting this object.\n * This is renamed to LDMaxDrawDistance in c++\n */\nvar(Rendering) const private noexport float MaxDrawDistance;\n'
p11245
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11246
sg1553
g95
sg1554
(lp11247
S'var(Rendering)'
p11248
aS'const'
p11249
aS'private'
p11250
aS'noexport'
p11251
aS'float'
p11252
asg1536
S'MaxDrawDistance'
p11253
sg31
I89
sba(iUnrealScriptIDEData
Variable
p11254
(dp11255
g19
S'/**\n * The distance to cull this primitive at.\n * A CachedMaxDrawDistance of 0 indicates that the primitive should not be culled by distance.\n */\nvar(Rendering) editconst float CachedMaxDrawDistance;\n'
p11256
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11257
sg1553
g95
sg1554
(lp11258
S'var(Rendering)'
p11259
aS'editconst'
p11260
aS'float'
p11261
asg1536
S'CachedMaxDrawDistance'
p11262
sg31
I95
sba(iUnrealScriptIDEData
Variable
p11263
(dp11264
g19
S'/**\n * Scalar controlling the amount of motion blur to be applied when object moves.\n * 0=none, 1=full instance motion blur(default), value should be 0 or bigger\n */\nvar(Rendering) float MotionBlurInstanceScale;\n'
p11265
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11266
sg1553
g95
sg1554
(lp11267
S'var(Rendering)'
p11268
aS'float'
p11269
asg1536
S'MotionBlurInstanceScale'
p11270
sg31
I101
sba(iUnrealScriptIDEData
Variable
p11271
(dp11272
g19
S'/** Legacy, renamed to MaxDrawDistance  deprecated june 2008*/\nvar const private deprecated noexport float CullDistance;\n'
p11273
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11274
sg1553
g95
sg1554
(lp11275
S'var'
p11276
aS'const'
p11277
aS'private'
p11278
aS'deprecated'
p11279
aS'noexport'
p11280
aS'float'
p11281
asg1536
S'CullDistance'
p11282
sg31
I104
sba(iUnrealScriptIDEData
Variable
p11283
(dp11284
g19
S'/** Legacy, renamed to CachedMaxDrawDistance deprecated june 2008*/\nvar editconst deprecated float CachedCullDistance;\n'
p11285
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11286
sg1553
g95
sg1554
(lp11287
S'var'
p11288
aS'editconst'
p11289
aS'deprecated'
p11290
aS'float'
p11291
asg1536
S'CachedCullDistance'
p11292
sg31
I106
sba(iUnrealScriptIDEData
Variable
p11293
(dp11294
g19
S'/** The scene depth priority group to draw the primitive in. */\nvar(Rendering) const ESceneDepthPriorityGroup DepthPriorityGroup;\n'
p11295
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11296
sg1553
g95
sg1554
(lp11297
S'var(Rendering)'
p11298
aS'const'
p11299
aS'ESceneDepthPriorityGroup'
p11300
asg1536
S'DepthPriorityGroup'
p11301
sg31
I109
sba(iUnrealScriptIDEData
Variable
p11302
(dp11303
g19
S"/** The scene depth priority group to draw the primitive in, if it's being viewed by its owner. */\nvar const ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup;\n"
p11304
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11305
sg1553
g95
sg1554
(lp11306
S'var'
p11307
aS'const'
p11308
aS'ESceneDepthPriorityGroup'
p11309
asg1536
S'ViewOwnerDepthPriorityGroup'
p11310
sg31
I112
sba(iUnrealScriptIDEData
Variable
p11311
(dp11312
g19
S"/** If detail mode is > system detail mode, primitive won't be rendered. */\nvar(Rendering) const EDetailMode DetailMode;\n"
p11313
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11314
sg1553
g95
sg1554
(lp11315
S'var(Rendering)'
p11316
aS'const'
p11317
aS'EDetailMode'
p11318
asg1536
S'DetailMode'
p11319
sg31
I115
sba(iUnrealScriptIDEData
Variable
p11320
(dp11321
g19
S'/** Enum indicating what type of object this should be considered for rigid body collision. */\nvar(Collision)\tconst ERBCollisionChannel\tRBChannel;\n'
p11322
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11323
sg1553
g95
sg1554
(lp11324
S'var(Collision)'
p11325
aS'const'
p11326
aS'ERBCollisionChannel'
p11327
asg1536
S'RBChannel'
p11328
sg31
I142
sba(iUnrealScriptIDEData
Variable
p11329
(dp11330
g19
S"/**\n *\tUsed for creating one-way physics interactions (via constraints or contacts)\n *\tGroups with lower RBDominanceGroup push around higher values in a 'one way' fashion. Must be <32.\n */\nvar(Physics)\tbyte\t\tRBDominanceGroup;\n"
p11331
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11332
sg1553
g95
sg1554
(lp11333
S'var(Physics)'
p11334
aS'byte'
p11335
asg1536
S'RBDominanceGroup'
p11336
sg31
I148
sba(iUnrealScriptIDEData
Variable
p11337
(dp11338
g19
S'/** Environment shadow factor used when previewing unbuilt lighting on this primitive. */\nvar\t\t\t\tbyte\t\tPreviewEnvironmentShadowing;\n'
p11339
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11340
sg1553
g95
sg1554
(lp11341
S'var'
p11342
aS'byte'
p11343
asg1536
S'PreviewEnvironmentShadowing'
p11344
sg31
I151
sba(iUnrealScriptIDEData
Variable
p11345
(dp11346
g19
S'/** True if the primitive should be rendered using ViewOwnerDepthPriorityGroup if viewed by its owner. */\nvar const bool bUseViewOwnerDepthPriorityGroup;\n'
p11347
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11348
sg1553
g95
sg1554
(lp11349
S'var'
p11350
aS'const'
p11351
aS'bool'
p11352
asg1536
S'bUseViewOwnerDepthPriorityGroup'
p11353
sg31
I154
sba(iUnrealScriptIDEData
Variable
p11354
(dp11355
g19
S'/** Whether to accept cull distance volumes to modify cached cull distance. */\nvar(Rendering) const bool\tbAllowCullDistanceVolume;\n'
p11356
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11357
sg1553
g95
sg1554
(lp11358
S'var(Rendering)'
p11359
aS'const'
p11360
aS'bool'
p11361
asg1536
S'bAllowCullDistanceVolume'
p11362
sg31
I157
sba(iUnrealScriptIDEData
Variable
p11363
(dp11364
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11365
sg1553
g95
sg1554
(lp11366
S'var(Rendering)'
p11367
aS'const'
p11368
aS'bool'
p11369
asg1536
S'HiddenGame'
p11370
sg31
I159
sba(iUnrealScriptIDEData
Variable
p11371
(dp11372
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11373
sg1553
g95
sg1554
(lp11374
S'var(Rendering)'
p11375
aS'const'
p11376
aS'bool'
p11377
asg1536
S'HiddenEditor'
p11378
sg31
I160
sba(iUnrealScriptIDEData
Variable
p11379
(dp11380
g19
S"/** If this is True, this component won't be visible when the view actor is the component's owner, directly or indirectly. */\nvar(Rendering) const bool bOwnerNoSee;\n"
p11381
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11382
sg1553
g95
sg1554
(lp11383
S'var(Rendering)'
p11384
aS'const'
p11385
aS'bool'
p11386
asg1536
S'bOwnerNoSee'
p11387
sg31
I163
sba(iUnrealScriptIDEData
Variable
p11388
(dp11389
g19
S"/** If this is True, this component will only be visible when the view actor is the component's owner, directly or indirectly. */\nvar(Rendering) const bool bOnlyOwnerSee;\n"
p11390
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11391
sg1553
g95
sg1554
(lp11392
S'var(Rendering)'
p11393
aS'const'
p11394
aS'bool'
p11395
asg1536
S'bOnlyOwnerSee'
p11396
sg31
I166
sba(iUnrealScriptIDEData
Variable
p11397
(dp11398
g19
S'/** If true, bHidden on the Owner of this component will be ignored. */\nvar(Rendering) const bool bIgnoreOwnerHidden;\n'
p11399
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11400
sg1553
g95
sg1554
(lp11401
S'var(Rendering)'
p11402
aS'const'
p11403
aS'bool'
p11404
asg1536
S'bIgnoreOwnerHidden'
p11405
sg31
I169
sba(iUnrealScriptIDEData
Variable
p11406
(dp11407
g19
S'/**\n * Whether to render the primitive in the depth only pass.\n * Setting this to FALSE will cause artifacts with dominant light shadows and potentially large performance loss,\n * So it should be TRUE on all lit objects, setting it to FALSE is mostly only useful for debugging.\n */\nvar bool bUseAsOccluder;\n'
p11408
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11409
sg1553
g95
sg1554
(lp11410
S'var'
p11411
aS'bool'
p11412
asg1536
S'bUseAsOccluder'
p11413
sg31
I176
sba(iUnrealScriptIDEData
Variable
p11414
(dp11415
g19
S"/** If this is True, this component doesn't need exact occlusion info. */\nvar(Rendering) bool bAllowApproximateOcclusion;\n"
p11416
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11417
sg1553
g95
sg1554
(lp11418
S'var(Rendering)'
p11419
aS'bool'
p11420
asg1536
S'bAllowApproximateOcclusion'
p11421
sg31
I179
sba(iUnrealScriptIDEData
Variable
p11422
(dp11423
g19
S'/** If this is True, this component will return 0.0f as their occlusion when first rendered. */\nvar bool bFirstFrameOcclusion;\n'
p11424
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11425
sg1553
g95
sg1554
(lp11426
S'var'
p11427
aS'bool'
p11428
asg1536
S'bFirstFrameOcclusion'
p11429
sg31
I182
sba(iUnrealScriptIDEData
Variable
p11430
(dp11431
g19
S'/** If True, this component will still be queried for occlusion even when it intersects the near plane. */\nvar bool bIgnoreNearPlaneIntersection;\n'
p11432
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11433
sg1553
g95
sg1554
(lp11434
S'var'
p11435
aS'bool'
p11436
asg1536
S'bIgnoreNearPlaneIntersection'
p11437
sg31
I185
sba(iUnrealScriptIDEData
Variable
p11438
(dp11439
g19
S'/** If this is True, this component can be selected in the editor. */\nvar bool bSelectable;\n'
p11440
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11441
sg1553
g95
sg1554
(lp11442
S'var'
p11443
aS'bool'
p11444
asg1536
S'bSelectable'
p11445
sg31
I188
sba(iUnrealScriptIDEData
Variable
p11446
(dp11447
g19
S"/** If TRUE, forces mips for textures used by this component to be resident when this component's level is loaded. */\nvar(Rendering) const bool bForceMipStreaming;\n"
p11448
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11449
sg1553
g95
sg1554
(lp11450
S'var(Rendering)'
p11451
aS'const'
p11452
aS'bool'
p11453
asg1536
S'bForceMipStreaming'
p11454
sg31
I191
sba(iUnrealScriptIDEData
Variable
p11455
(dp11456
g19
S'/** replaced with bAcceptsStaticDecals,bAcceptsDynamicDecals Deprecated April 2008*/\nvar deprecated const bool bAcceptsDecals;\n'
p11457
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11458
sg1553
g95
sg1554
(lp11459
S'var'
p11460
aS'deprecated'
p11461
aS'const'
p11462
aS'bool'
p11463
asg1536
S'bAcceptsDecals'
p11464
sg31
I194
sba(iUnrealScriptIDEData
Variable
p11465
(dp11466
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11467
sg1553
g95
sg1554
(lp11468
S'var'
p11469
aS'deprecated'
p11470
aS'const'
p11471
aS'bool'
p11472
asg1536
S'bAcceptsDecalsDuringGameplay'
p11473
sg31
I195
sba(iUnrealScriptIDEData
Variable
p11474
(dp11475
g19
S'/** If TRUE, this primitive accepts static level placed decals in the editor. */\nvar(Rendering) const bool bAcceptsStaticDecals;\n'
p11476
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11477
sg1553
g95
sg1554
(lp11478
S'var(Rendering)'
p11479
aS'const'
p11480
aS'bool'
p11481
asg1536
S'bAcceptsStaticDecals'
p11482
sg31
I198
sba(iUnrealScriptIDEData
Variable
p11483
(dp11484
g19
S'/** If TRUE, this primitive accepts dynamic decals spawned during gameplay.  */\nvar(Rendering) const bool bAcceptsDynamicDecals;\n'
p11485
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11486
sg1553
g95
sg1554
(lp11487
S'var(Rendering)'
p11488
aS'const'
p11489
aS'bool'
p11490
asg1536
S'bAcceptsDynamicDecals'
p11491
sg31
I201
sba(iUnrealScriptIDEData
Variable
p11492
(dp11493
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11494
sg1553
g95
sg1554
(lp11495
S'var'
p11496
aS'native'
p11497
aS'transient'
p11498
aS'const'
p11499
aS'bool'
p11500
asg1536
S'bIsRefreshingDecals'
p11501
sg31
I203
sba(iUnrealScriptIDEData
Variable
p11502
(dp11503
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11504
sg1553
g95
sg1554
(lp11505
S'var'
p11506
aS'transient'
p11507
aS'bool'
p11508
asg1536
S'bAllowDecalAutomaticReAttach'
p11509
sg31
I205
sba(iUnrealScriptIDEData
Variable
p11510
(dp11511
g19
S'/** If true a hit-proxy will be generated for each instance of instanced static meshes */\nvar bool bUsePerInstanceHitProxies;\n'
p11512
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11513
sg1553
g95
sg1554
(lp11514
S'var'
p11515
aS'bool'
p11516
asg1536
S'bUsePerInstanceHitProxies'
p11517
sg31
I208
sba(iUnrealScriptIDEData
Variable
p11518
(dp11519
g19
S'/**\n * Whether to cast any shadows or not\n *\n * controls whether the primitive component should cast a shadow or not. Currently dynamic primitives will not receive shadows from static objects unless both this flag and bCastDynamicSahdow are enabled.\n **/\nvar(Lighting)\tbool\t\tCastShadow;\n'
p11520
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11521
sg1553
g95
sg1554
(lp11522
S'var(Lighting)'
p11523
aS'bool'
p11524
asg1536
S'CastShadow'
p11525
sg31
I217
sba(iUnrealScriptIDEData
Variable
p11526
(dp11527
g19
S"/**\n * If true, forces all static lights to use light-maps for direct lighting on this primitive, regardless of the light's UseDirectLightMap property.\n *\n * forces the use of lightmaps for all static lights affecting this primitive even though the light might not be set to use light maps. This means that the primitive will not receive any shadows from dynamic objects obstructing static lights. It will correctly shadow in the case of dynamic lights\n */\nvar\tconst bool\tbForceDirectLightMap;\n"
p11528
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11529
sg1553
g95
sg1554
(lp11530
S'var'
p11531
aS'const'
p11532
aS'bool'
p11533
asg1536
S'bForceDirectLightMap'
p11534
sg31
I224
sba(iUnrealScriptIDEData
Variable
p11535
(dp11536
g19
S'/** If false, primitive does not cast dynamic shadows.\n *\n * controls whether the primitive should cast shadows in the case of non precomputed shadowing like e.g. the primitive being in between a light and a dynamic object. This flag is only used if CastShadow is TRUE. Currently dynamic primitives will not receive shadows from static objects unless both this flag and CastShadow are enabled.\n *\n **/\nvar(Lighting)\tbool\t\tbCastDynamicShadow;\n'
p11537
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11538
sg1553
g95
sg1554
(lp11539
S'var(Lighting)'
p11540
aS'bool'
p11541
asg1536
S'bCastDynamicShadow'
p11542
sg31
I231
sba(iUnrealScriptIDEData
Variable
p11543
(dp11544
g19
S'/** Whether the object should cast a static shadow from shadow casting lights.  Also requires Cast Shadow to be set to True. */\nvar(Lighting)\tbool\t\tbCastStaticShadow;\n'
p11545
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11546
sg1553
g95
sg1554
(lp11547
S'var(Lighting)'
p11548
aS'bool'
p11549
asg1536
S'bCastStaticShadow'
p11550
sg31
I234
sba(iUnrealScriptIDEData
Variable
p11551
(dp11552
g19
S"/**\n * If true, the primitive will only shadow itself and will not cast a shadow on other primitives.\n * This can be used as an optimization when the shadow on other primitives won't be noticeable.\n */\nvar(Lighting)\tbool\t\tbSelfShadowOnly;\n"
p11553
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11554
sg1553
g95
sg1554
(lp11555
S'var(Lighting)'
p11556
aS'bool'
p11557
asg1536
S'bSelfShadowOnly'
p11558
sg31
I240
sba(iUnrealScriptIDEData
Variable
p11559
(dp11560
g19
S'/**\n * For mobile platforms only! If true, the primitive will not receive projected mod shadows, not from itself nor any other mod shadow caster.\n * This can be used to avoid self-shadowing artifacts.\n */\nvar(Lighting)\tbool\t\tbNoModSelfShadow;\n'
p11561
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11562
sg1553
g95
sg1554
(lp11563
S'var(Lighting)'
p11564
aS'bool'
p11565
asg1536
S'bNoModSelfShadow'
p11566
sg31
I246
sba(iUnrealScriptIDEData
Variable
p11567
(dp11568
g19
S"/**\n * Optimization for objects which don't need to receive dominant light shadows.\n * This is useful for objects which eat up a lot of GPU time and are heavily texture bound yet never receive noticeable shadows from dominant lights like trees.\n */\nvar(Lighting)\tbool\t\tbAcceptsDynamicDominantLightShadows;\n"
p11569
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11570
sg1553
g95
sg1554
(lp11571
S'var(Lighting)'
p11572
aS'bool'
p11573
asg1536
S'bAcceptsDynamicDominantLightShadows'
p11574
sg31
I252
sba(iUnrealScriptIDEData
Variable
p11575
(dp11576
g19
S'/**\n *\tIf TRUE, the primitive will cast shadows even if bHidden is TRUE.\n *\n *\tControls whether the primitive should cast shadows when hidden.\n *\tThis flag is only used if CastShadow is TRUE.\n *\n */\nvar(Lighting)\tbool\t\tbCastHiddenShadow;\n'
p11577
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11578
sg1553
g95
sg1554
(lp11579
S'var(Lighting)'
p11580
aS'bool'
p11581
asg1536
S'bCastHiddenShadow'
p11582
sg31
I261
sba(iUnrealScriptIDEData
Variable
p11583
(dp11584
g19
S'/** Whether this primitive should cast dynamic shadows as if it were a two sided material. */\nvar(Lighting)\tbool\t\tbCastShadowAsTwoSided;\n'
p11585
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11586
sg1553
g95
sg1554
(lp11587
S'var(Lighting)'
p11588
aS'bool'
p11589
asg1536
S'bCastShadowAsTwoSided'
p11590
sg31
I264
sba(iUnrealScriptIDEData
Variable
p11591
(dp11592
g19
S'/**\n * Does this primitive accept lights?\n *\n * controls whether the primitive accepts any lights. Should be set to FALSE for e.g. unlit objects as its a nice optimization - especially for larger objects.\n **/\nvar(Lighting)\tconst bool\tbAcceptsLights;\n'
p11593
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11594
sg1553
g95
sg1554
(lp11595
S'var(Lighting)'
p11596
aS'const'
p11597
aS'bool'
p11598
asg1536
S'bAcceptsLights'
p11599
sg31
I271
sba(iUnrealScriptIDEData
Variable
p11600
(dp11601
g19
S'/**\n * Whether this primitives accepts dynamic lights\n *\n * controls whether the object should be affected by dynamic lights.\n **/\nvar(Lighting)\tconst bool\tbAcceptsDynamicLights;\n'
p11602
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11603
sg1553
g95
sg1554
(lp11604
S'var(Lighting)'
p11605
aS'const'
p11606
aS'bool'
p11607
asg1536
S'bAcceptsDynamicLights'
p11608
sg31
I278
sba(iUnrealScriptIDEData
Variable
p11609
(dp11610
g19
S'/**\n * If TRUE, dynamically lit translucency on this primitive will render in one pass,\n * Which is cheaper and ensures correct blending but approximates lighting using one directional light and all other lights in an unshadowed SH environment.\n * If FALSE, dynamically lit translucency will render in multiple passes which uses more shader instructions and results in incorrect blending.\n */\nvar(Lighting)\tconst bool bUseOnePassLightingOnTranslucency;\n'
p11611
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11612
sg1553
g95
sg1554
(lp11613
S'var(Lighting)'
p11614
aS'const'
p11615
aS'bool'
p11616
asg1536
S'bUseOnePassLightingOnTranslucency'
p11617
sg31
I285
sba(iUnrealScriptIDEData
Variable
p11618
(dp11619
g19
S'/** Whether to allow the primitive to use precomputed shadows or lighting. */\nvar(Lighting)\tconst bool\tbUsePrecomputedShadows;\n'
p11620
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11621
sg1553
g95
sg1554
(lp11622
S'var(Lighting)'
p11623
aS'const'
p11624
aS'bool'
p11625
asg1536
S'bUsePrecomputedShadows'
p11626
sg31
I288
sba(iUnrealScriptIDEData
Variable
p11627
(dp11628
g19
S'/**\n* TRUE if ShadowParent was set through SetShadowParent,\n* FALSE if ShadowParent is set automatically based on Owner->bShadowParented.\n*/\nvar private transient const bool bHasExplicitShadowParent;\n'
p11629
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11630
sg1553
g95
sg1554
(lp11631
S'var'
p11632
aS'private'
p11633
aS'transient'
p11634
aS'const'
p11635
aS'bool'
p11636
asg1536
S'bHasExplicitShadowParent'
p11637
sg31
I294
sba(iUnrealScriptIDEData
Variable
p11638
(dp11639
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11640
sg1553
g95
sg1554
(lp11641
S'var'
p11642
aS'deprecated'
p11643
aS'bool'
p11644
asg1536
S'bAllowAmbientOcclusion'
p11645
sg31
I296
sba(iUnrealScriptIDEData
Variable
p11646
(dp11647
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11648
sg1553
g95
sg1554
(lp11649
S'var(Collision)'
p11650
aS'const'
p11651
aS'bool'
p11652
asg1536
S'CollideActors'
p11653
sg31
I300
sba(iUnrealScriptIDEData
Variable
p11654
(dp11655
g19
S"/** when this is on, this primitive component get collision tests even if it isn't the actor's collision component */\nvar const bool  AlwaysCheckCollision;\n"
p11656
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11657
sg1553
g95
sg1554
(lp11658
S'var'
p11659
aS'const'
p11660
aS'bool'
p11661
asg1536
S'AlwaysCheckCollision'
p11662
sg31
I303
sba(iUnrealScriptIDEData
Variable
p11663
(dp11664
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11665
sg1553
g95
sg1554
(lp11666
S'var(Collision)'
p11667
aS'const'
p11668
aS'bool'
p11669
asg1536
S'BlockActors'
p11670
sg31
I305
sba(iUnrealScriptIDEData
Variable
p11671
(dp11672
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11673
sg1553
g95
sg1554
(lp11674
S'var(Collision)'
p11675
aS'const'
p11676
aS'bool'
p11677
asg1536
S'BlockZeroExtent'
p11678
sg31
I306
sba(iUnrealScriptIDEData
Variable
p11679
(dp11680
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11681
sg1553
g95
sg1554
(lp11682
S'var(Collision)'
p11683
aS'const'
p11684
aS'bool'
p11685
asg1536
S'BlockNonZeroExtent'
p11686
sg31
I307
sba(iUnrealScriptIDEData
Variable
p11687
(dp11688
g19
S'/** TRUE if this primitive is eligible to block camera traces, FALSE if the camera should ignore it. */\nvar(Collision)\tconst bool\tCanBlockCamera;\n'
p11689
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11690
sg1553
g95
sg1554
(lp11691
S'var(Collision)'
p11692
aS'const'
p11693
aS'bool'
p11694
asg1536
S'CanBlockCamera'
p11695
sg31
I309
sba(iUnrealScriptIDEData
Variable
p11696
(dp11697
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11698
sg1553
g95
sg1554
(lp11699
S'var(Collision)'
p11700
aS'const'
p11701
aS'bool'
p11702
asg1536
S'BlockRigidBody'
p11703
sg31
I310
sba(iUnrealScriptIDEData
Variable
p11704
(dp11705
g19
S'/** If TRUE will block foot placement line checks (default). FALSE will skip right through. */\nvar(Collision)  const bool  bBlockFootPlacement;\n'
p11706
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11707
sg1553
g95
sg1554
(lp11708
S'var(Collision)'
p11709
aS'const'
p11710
aS'bool'
p11711
asg1536
S'bBlockFootPlacement'
p11712
sg31
I312
sba(iUnrealScriptIDEData
Variable
p11713
(dp11714
g19
S'/** Never create any physics engine representation for this body. */\nvar(Physics) const bool bDisableAllRigidBody;\n'
p11715
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11716
sg1553
g95
sg1554
(lp11717
S'var(Physics)'
p11718
aS'const'
p11719
aS'bool'
p11720
asg1536
S'bDisableAllRigidBody'
p11721
sg31
I315
sba(iUnrealScriptIDEData
Variable
p11722
(dp11723
g19
S'/** When creating rigid body, will skip normal geometry creation step, and will rely on ModifyNxActorDesc to fill in geometry. */\nvar(Physics) const bool\tbSkipRBGeomCreation;\n'
p11724
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11725
sg1553
g95
sg1554
(lp11726
S'var(Physics)'
p11727
aS'const'
p11728
aS'bool'
p11729
asg1536
S'bSkipRBGeomCreation'
p11730
sg31
I318
sba(iUnrealScriptIDEData
Variable
p11731
(dp11732
g19
S'/**\n *\tFlag that indicates if OnRigidBodyCollision function should be called for physics collisions involving this PrimitiveComponent.\n */\nvar(Physics) const bool\tbNotifyRigidBodyCollision;\n'
p11733
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11734
sg1553
g95
sg1554
(lp11735
S'var(Physics)'
p11736
aS'const'
p11737
aS'bool'
p11738
asg1536
S'bNotifyRigidBodyCollision'
p11739
sg31
I323
sba(iUnrealScriptIDEData
Variable
p11740
(dp11741
g19
S"/** Whether this object should act as a 'drain' for fluid, and destroy fluid particles when they contact it. */\nvar(Physics) const bool\tbFluidDrain;\n"
p11742
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11743
sg1553
g95
sg1554
(lp11744
S'var(Physics)'
p11745
aS'const'
p11746
aS'bool'
p11747
asg1536
S'bFluidDrain'
p11748
sg31
I328
sba(iUnrealScriptIDEData
Variable
p11749
(dp11750
g19
S"/** Indicates that fluid interaction with this object should be 'two-way' - that is, force should be applied to both fluid and object. */\nvar(Physics) const bool\tbFluidTwoWay;\n"
p11751
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11752
sg1553
g95
sg1554
(lp11753
S'var(Physics)'
p11754
aS'const'
p11755
aS'bool'
p11756
asg1536
S'bFluidTwoWay'
p11757
sg31
I331
sba(iUnrealScriptIDEData
Variable
p11758
(dp11759
g19
S'/** Will ignore radial impulses applied to this component. */\nvar(Physics)\tbool\t\tbIgnoreRadialImpulse;\n'
p11760
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11761
sg1553
g95
sg1554
(lp11762
S'var(Physics)'
p11763
aS'bool'
p11764
asg1536
S'bIgnoreRadialImpulse'
p11765
sg31
I336
sba(iUnrealScriptIDEData
Variable
p11766
(dp11767
g19
S'/** Will ignore radial forces applied to this component. */\nvar(Physics)\tbool\t\tbIgnoreRadialForce;\n'
p11768
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11769
sg1553
g95
sg1554
(lp11770
S'var(Physics)'
p11771
aS'bool'
p11772
asg1536
S'bIgnoreRadialForce'
p11773
sg31
I339
sba(iUnrealScriptIDEData
Variable
p11774
(dp11775
g19
S'/** Will ignore force field applied to this component. */\nvar(Physics)\tbool\t\tbIgnoreForceField;\n'
p11776
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11777
sg1553
g95
sg1554
(lp11778
S'var(Physics)'
p11779
aS'bool'
p11780
asg1536
S'bIgnoreForceField'
p11781
sg31
I342
sba(iUnrealScriptIDEData
Variable
p11782
(dp11783
g19
S"/** Place into a NxCompartment that will run in parallel with the primary scene's physics with potentially different simulation parameters.\n *  If double buffering is enabled in the WorldInfo then physics will run in parallel with the entire game for this component. */\nvar(Physics)\tconst bool\t\tbUseCompartment;\n"
p11784
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11785
sg1553
g95
sg1554
(lp11786
S'var(Physics)'
p11787
aS'const'
p11788
aS'bool'
p11789
asg1536
S'bUseCompartment'
p11790
sg31
I346
sba(iUnrealScriptIDEData
Variable
p11791
(dp11792
g19
S'/** If this is True, this component must always be loaded on clients, even if HiddenGame && !CollideActors. */\nvar private const bool AlwaysLoadOnClient;\n'
p11793
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11794
sg1553
g95
sg1554
(lp11795
S'var'
p11796
aS'private'
p11797
aS'const'
p11798
aS'bool'
p11799
asg1536
S'AlwaysLoadOnClient'
p11800
sg31
I351
sba(iUnrealScriptIDEData
Variable
p11801
(dp11802
g19
S'/** If this is True, this component must always be loaded on servers, even if !CollideActors. */\nvar private const bool AlwaysLoadOnServer;\n'
p11803
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11804
sg1553
g95
sg1554
(lp11805
S'var'
p11806
aS'private'
p11807
aS'const'
p11808
aS'bool'
p11809
asg1536
S'AlwaysLoadOnServer'
p11810
sg31
I354
sba(iUnrealScriptIDEData
Variable
p11811
(dp11812
g19
S"/** Allow certain components to render even if the parent actor is part of the camera's HiddenActors array. */\nvar() bool bIgnoreHiddenActorsMembership;\n"
p11813
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11814
sg1553
g95
sg1554
(lp11815
S'var()'
p11816
aS'bool'
p11817
asg1536
S'bIgnoreHiddenActorsMembership'
p11818
sg31
I357
sba(iUnrealScriptIDEData
Variable
p11819
(dp11820
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11821
sg1553
g95
sg1554
(lp11822
S'var()'
p11823
aS'const'
p11824
aS'bool'
p11825
asg1536
S'AbsoluteTranslation'
p11826
sg31
I359
sba(iUnrealScriptIDEData
Variable
p11827
(dp11828
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11829
sg1553
g95
sg1554
(lp11830
S'var()'
p11831
aS'const'
p11832
aS'bool'
p11833
asg1536
S'AbsoluteRotation'
p11834
sg31
I360
sba(iUnrealScriptIDEData
Variable
p11835
(dp11836
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11837
sg1553
g95
sg1554
(lp11838
S'var()'
p11839
aS'const'
p11840
aS'bool'
p11841
asg1536
S'AbsoluteScale'
p11842
sg31
I361
sba(iUnrealScriptIDEData
Variable
p11843
(dp11844
g19
S'/** Determines whether or not we allow shadowing fading.  Some objects (especially in cinematics) having the shadow fade/pop out looks really bad. **/\nvar bool bAllowShadowFade;\n'
p11845
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11846
sg1553
g95
sg1554
(lp11847
S'var'
p11848
aS'bool'
p11849
asg1536
S'bAllowShadowFade'
p11850
sg31
I364
sba(iUnrealScriptIDEData
Variable
p11851
(dp11852
g19
S'/** Whether or not this primitive type is supported on mobile. For the emulate mobile rendering editor feature. */\nvar bool bSupportedOnMobile;\n'
p11853
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11854
sg1553
g95
sg1554
(lp11855
S'var'
p11856
aS'bool'
p11857
asg1536
S'bSupportedOnMobile'
p11858
sg31
I367
sba(iUnrealScriptIDEData
Variable
p11859
(dp11860
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11861
sg1553
g95
sg1554
(lp11862
S'var'
p11863
aS'const'
p11864
aS'native'
p11865
aS'transient'
p11866
aS'bool'
p11867
asg1536
S'bWasSNFiltered'
p11868
sg31
I371
sba(iUnrealScriptIDEData
Variable
p11869
(dp11870
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11871
sg1553
g95
sg1554
(lp11872
S'var'
p11873
aS'const'
p11874
aS'native'
p11875
aS'transient'
p11876
aS'array<int>'
p11877
asg1536
S'OctreeNodes'
p11878
sg31
I372
sba(iUnrealScriptIDEData
Variable
p11879
(dp11880
g19
S'/**\n * Translucent objects with a lower sort priority draw behind objects with a higher priority.\n * Translucent objects with the same priority are rendered from back-to-front based on their bounds origin.\n *\n * Ignored if the object is not translucent.  The default priority is zero.\n * Warning: This should never be set to a non-default value unless you know what you are doing, as it will prevent the renderer from sorting correctly.\n * It is especially problematic on dynamic gameplay effects.\n **/\nvar(Rendering) int TranslucencySortPriority;\n'
p11881
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11882
sg1553
g95
sg1554
(lp11883
S'var(Rendering)'
p11884
aS'int'
p11885
asg1536
S'TranslucencySortPriority'
p11886
sg31
I383
sba(iUnrealScriptIDEData
Variable
p11887
(dp11888
g19
S'/** Used for precomputed visibility */\nvar duplicatetransient int VisibilityId;\n'
p11889
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11890
sg1553
g95
sg1554
(lp11891
S'var'
p11892
aS'duplicatetransient'
p11893
aS'int'
p11894
asg1536
S'VisibilityId'
p11895
sg31
I386
sba(iUnrealScriptIDEData
Variable
p11896
(dp11897
g19
S'/**\n * Lighting channels controlling light/ primitive interaction. Only allows interaction if at least one channel is shared\n *\n */\nvar(Lighting)\tconst LightingChannelContainer\tLightingChannels;\n'
p11898
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11899
sg1553
g95
sg1554
(lp11900
S'var(Lighting)'
p11901
aS'const'
p11902
aS'LightingChannelContainer'
p11903
asg1536
S'LightingChannels'
p11904
sg31
I392
sba(iUnrealScriptIDEData
Variable
p11905
(dp11906
g19
S'/** Types of objects that this physics objects will collide with. */\nvar(Collision) const RBCollisionChannelContainer\tRBCollideWithChannels;\n'
p11907
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11908
sg1553
g95
sg1554
(lp11909
S'var(Collision)'
p11910
aS'const'
p11911
aS'RBCollisionChannelContainer'
p11912
asg1536
S'RBCollideWithChannels'
p11913
sg31
I422
sba(iUnrealScriptIDEData
Variable
p11914
(dp11915
g19
S'/** Allows you to override the PhysicalMaterial to use for this PrimitiveComponent. */\nvar(Physics)\tconst PhysicalMaterial\t\t\tPhysMaterialOverride;\n'
p11916
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11917
sg1553
g95
sg1554
(lp11918
S'var(Physics)'
p11919
aS'const'
p11920
aS'PhysicalMaterial'
p11921
asg1536
S'PhysMaterialOverride'
p11922
sg31
I437
sba(iUnrealScriptIDEData
Variable
p11923
(dp11924
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11925
sg1553
g95
sg1554
(lp11926
S'var'
p11927
aS'duplicatetransient'
p11928
aS'const'
p11929
aS'native'
p11930
aS'RB_BodyInstance'
p11931
asg1536
S'BodyInstance'
p11932
sg31
I439
sba(iUnrealScriptIDEData
Variable
p11933
(dp11934
g19
S'// Properties moved from TransformComponent\nvar native transient const matrix CachedParentToWorld; //@todo please remove me if possible\n'
p11935
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11936
sg1553
S'@todo please remove me if possible'
p11937
sg1554
(lp11938
S'var'
p11939
aS'native'
p11940
aS'transient'
p11941
aS'const'
p11942
aS'matrix'
p11943
asg1536
S'CachedParentToWorld'
p11944
sg31
I442
sba(iUnrealScriptIDEData
Variable
p11945
(dp11946
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11947
sg1553
g95
sg1554
(lp11948
S'var()'
p11949
aS'const'
p11950
aS'vector'
p11951
asg1536
S'Translation'
p11952
sg31
I444
sba(iUnrealScriptIDEData
Variable
p11953
(dp11954
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11955
sg1553
g95
sg1554
(lp11956
S'var()'
p11957
aS'const'
p11958
aS'rotator'
p11959
asg1536
S'Rotation'
p11960
sg31
I445
sba(iUnrealScriptIDEData
Variable
p11961
(dp11962
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11963
sg1553
g95
sg1554
(lp11964
S'var()'
p11965
aS'const'
p11966
aS'float'
p11967
aS'Scale'
p11968
aS'<UIMin=0.0'
p11969
ag6099
asg1536
S'UIMax=4.0>'
p11970
sg31
I446
sba(iUnrealScriptIDEData
Variable
p11971
(dp11972
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11973
sg1553
g95
sg1554
(lp11974
S'var()'
p11975
aS'const'
p11976
aS'vector'
p11977
asg1536
S'Scale3D'
p11978
sg31
I447
sba(iUnrealScriptIDEData
Variable
p11979
(dp11980
g19
S'/**\n * Scales the bounds of the object.\n * This is useful when using World Position Offset to animate the vertices of the object outside of its bounds.\n * Warning: Increasing the bounds of an object will reduce performance and shadow quality!\n * Currently only used by StaticMeshComponent and SkeletalMeshComponent.\n */\nvar() const float\t\t\tBoundsScale <UIMin=1 | UIMax=10.0>;\n'
p11981
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11982
sg1553
g95
sg1554
(lp11983
S'var()'
p11984
aS'const'
p11985
aS'float'
p11986
aS'BoundsScale'
p11987
aS'<UIMin=1'
p11988
ag6099
asg1536
S'UIMax=10.0>'
p11989
sg31
I454
sba(iUnrealScriptIDEData
Variable
p11990
(dp11991
g19
S'/** Last time the component was submitted for rendering (called FScene::AddPrimitive). */\nvar const transient float\tLastSubmitTime;\n'
p11992
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p11993
sg1553
g95
sg1554
(lp11994
S'var'
p11995
aS'const'
p11996
aS'transient'
p11997
aS'float'
p11998
asg1536
S'LastSubmitTime'
p11999
sg31
I457
sba(iUnrealScriptIDEData
Variable
p12000
(dp12001
g19
S"/**\n * The value of WorldInfo->TimeSeconds for the frame when this actor was last rendered.  This is written\n * from the render thread, which is up to a frame behind the game thread, so you should allow this time to\n * be at least a frame behind the game thread's world time before you consider the actor non-visible.\n * There's an equivalent variable in PrimitiveComponent.\n */\nvar transient float\tLastRenderTime;\n"
p12002
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p12003
sg1553
g95
sg1554
(lp12004
S'var'
p12005
aS'transient'
p12006
aS'float'
p12007
asg1536
S'LastRenderTime'
p12008
sg31
I465
sba(iUnrealScriptIDEData
Variable
p12009
(dp12010
g19
S'/** if > 0, the script RigidBodyCollision() event will be called on our Owner when a physics collision involving\n * this PrimitiveComponent occurs and the relative velocity is greater than or equal to this\n */\nvar float ScriptRigidBodyCollisionThreshold;\n'
p12011
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005cEngine\u005cClasses\u005cPrimitiveComponent.uc
p12012
sg1553
g95
sg1554
(lp12013
S'var'
p12014
aS'float'
p12015
asg1536
S'ScriptRigidBodyCollisionThreshold'
p12016
sg31
I473
sbasba(iUnrealScriptIDEData
ClassReference
p12017
(dp12018
g6
g4
sg7
g12
sg90
I01
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cbaseEntrega.uc
p12019
sg74
(lp12020
(iUnrealScriptIDEData
Function
p12021
(dp12022
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cbaseEntrega.uc
p12023
sg23
g95
sg25
g95
sg27
S'simulated'
p12024
sg29
S'PostBeginPlay'
p12025
sg31
I13
sg32
I00
sba(iUnrealScriptIDEData
Function
p12026
(dp12027
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cbaseEntrega.uc
p12028
sg23
S'float DeltaTime'
p12029
sg25
g95
sg27
g95
sg29
S'Tick'
p12030
sg31
I18
sg32
I00
sba(iUnrealScriptIDEData
Function
p12031
(dp12032
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cbaseEntrega.uc
p12033
sg23
S'Actor Other, PrimitiveComponent OtherComp, vector HitLocation, vector HitNormal'
p12034
sg25
g95
sg27
g95
sg29
S'Touch'
p12035
sg31
I23
sg32
I00
sbasg1531
S'pawn'
p12036
sg19
S' /* Victor Macho\n    Clase PAWN de la base\nDefine Modelo - Animaciones - Afecta Luz o no\n */\n\nclass baseEntrega extends Pawn\n'
p12037
sg1534
(lp12038
sg1536
VbaseEntrega
p12039
sg1538
(lp12040
sg1540
(lp12041
sg82
(lp12042
(iUnrealScriptIDEData
Variable
p12043
(dp12044
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cbaseEntrega.uc
p12045
sg1553
g95
sg1554
(lp12046
S'var'
p12047
aS'(calabaza)'
p12048
aS'int'
p12049
asg1536
S'life'
p12050
sg31
I9
sba(iUnrealScriptIDEData
Variable
p12051
(dp12052
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cbaseEntrega.uc
p12053
sg1553
g95
sg1554
(lp12054
S'var'
p12055
aS'(calabaza)'
p12056
aS'int'
p12057
asg1536
S'calabazas'
p12058
sg31
I10
sba(iUnrealScriptIDEData
Variable
p12059
(dp12060
g19
g95
sg21
VC:\u005cUDK\u005cUDK-2013-07\u005cDevelopment\u005cSrc\u005csampleGame\u005cClasses\u005cbaseEntrega.uc
p12061
sg1553
g95
sg1554
(lp12062
S'var'
p12063
aS'(calabaza)'
p12064
aS'Name'
p12065
asg1536
S'tagPlayer'
p12066
sg31
I11
sbasba.